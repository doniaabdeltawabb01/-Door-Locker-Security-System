
final_project_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003ddc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f8  00800060  00003ddc  00003e70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800158  00800158  00003f68  2**0
                  ALLOC
  3 .stab         00003288  00000000  00000000  00003f68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000119a  00000000  00000000  000071f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000838a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000084ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000863a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a283  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b16e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bf1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c309  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cad7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 8f 1c 	jmp	0x391e	; 0x391e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 35       	cpi	r26, 0x58	; 88
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e5       	ldi	r26, 0x58	; 88
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 35       	cpi	r26, 0x5B	; 91
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <main>
      8a:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e4       	ldi	r26, 0x43	; 67
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 8c 1e 	jmp	0x3d18	; 0x3d18 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 7c 1e 	jmp	0x3cf8	; 0x3cf8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 98 1e 	jmp	0x3d30	; 0x3d30 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 7c 1e 	jmp	0x3cf8	; 0x3cf8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 98 1e 	jmp	0x3d30	; 0x3d30 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 70 1e 	jmp	0x3ce0	; 0x3ce0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e4       	ldi	r24, 0x43	; 67
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 8c 1e 	jmp	0x3d18	; 0x3d18 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7c 1e 	jmp	0x3cf8	; 0x3cf8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 98 1e 	jmp	0x3d30	; 0x3d30 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 7c 1e 	jmp	0x3cf8	; 0x3cf8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 98 1e 	jmp	0x3d30	; 0x3d30 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 7c 1e 	jmp	0x3cf8	; 0x3cf8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 98 1e 	jmp	0x3d30	; 0x3d30 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 9c 1e 	jmp	0x3d38	; 0x3d38 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
			/* Do Nothing */
		}
		else
		{
			//switch for the ports
			switch(port_num){
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
			//porta
			case PORTA_ID:
				if(value==LOGIC_HIGH){
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
					SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else{CLEAR_BIT(PORTA,pin_num);}
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
				break;
				//portB
			case PORTB_ID:
				if(value==LOGIC_HIGH){
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
					SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else{CLEAR_BIT(PORTB,pin_num);}
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
				break;
				//PORTC
			case PORTC_ID:
				if(value==LOGIC_HIGH){
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
					SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else{CLEAR_BIT(PORTC,pin_num);}
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
				break;
				//PORTD
			case PORTD_ID:
				if(value==LOGIC_HIGH){
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
					SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
				}
				else{CLEAR_BIT(PORTD,pin_num);}
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
				break;

			}
		}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	00 d0       	rcall	.+0      	; 0xefc <GPIO_readPin+0xa>
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	88 30       	cpi	r24, 0x08	; 8
     f08:	18 f4       	brcc	.+6      	; 0xf10 <GPIO_readPin+0x1e>
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	84 30       	cpi	r24, 0x04	; 4
     f0e:	10 f0       	brcs	.+4      	; 0xf14 <GPIO_readPin+0x22>
			{
				/* return low*/
		return LOGIC_LOW;
     f10:	1d 82       	std	Y+5, r1	; 0x05
     f12:	82 c0       	rjmp	.+260    	; 0x1018 <GPIO_readPin+0x126>
			}
	else{
		//switch for pins
		switch(port_num){
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	3c 83       	std	Y+4, r19	; 0x04
     f1c:	2b 83       	std	Y+3, r18	; 0x03
     f1e:	4b 81       	ldd	r20, Y+3	; 0x03
     f20:	5c 81       	ldd	r21, Y+4	; 0x04
     f22:	41 30       	cpi	r20, 0x01	; 1
     f24:	51 05       	cpc	r21, r1
     f26:	79 f1       	breq	.+94     	; 0xf86 <GPIO_readPin+0x94>
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	9c 81       	ldd	r25, Y+4	; 0x04
     f2c:	82 30       	cpi	r24, 0x02	; 2
     f2e:	91 05       	cpc	r25, r1
     f30:	34 f4       	brge	.+12     	; 0xf3e <GPIO_readPin+0x4c>
     f32:	2b 81       	ldd	r18, Y+3	; 0x03
     f34:	3c 81       	ldd	r19, Y+4	; 0x04
     f36:	21 15       	cp	r18, r1
     f38:	31 05       	cpc	r19, r1
     f3a:	69 f0       	breq	.+26     	; 0xf56 <GPIO_readPin+0x64>
     f3c:	6c c0       	rjmp	.+216    	; 0x1016 <GPIO_readPin+0x124>
     f3e:	4b 81       	ldd	r20, Y+3	; 0x03
     f40:	5c 81       	ldd	r21, Y+4	; 0x04
     f42:	42 30       	cpi	r20, 0x02	; 2
     f44:	51 05       	cpc	r21, r1
     f46:	b9 f1       	breq	.+110    	; 0xfb6 <GPIO_readPin+0xc4>
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	9c 81       	ldd	r25, Y+4	; 0x04
     f4c:	83 30       	cpi	r24, 0x03	; 3
     f4e:	91 05       	cpc	r25, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <GPIO_readPin+0x62>
     f52:	49 c0       	rjmp	.+146    	; 0xfe6 <GPIO_readPin+0xf4>
     f54:	60 c0       	rjmp	.+192    	; 0x1016 <GPIO_readPin+0x124>
		//PINA
			case PORTA_ID:
				if(BIT_IS_SET(PINA,pin_num)){
     f56:	e9 e3       	ldi	r30, 0x39	; 57
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a9 01       	movw	r20, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <GPIO_readPin+0x7c>
     f6a:	55 95       	asr	r21
     f6c:	47 95       	ror	r20
     f6e:	8a 95       	dec	r24
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <GPIO_readPin+0x78>
     f72:	ca 01       	movw	r24, r20
     f74:	81 70       	andi	r24, 0x01	; 1
     f76:	90 70       	andi	r25, 0x00	; 0
     f78:	88 23       	and	r24, r24
     f7a:	19 f0       	breq	.+6      	; 0xf82 <GPIO_readPin+0x90>
					return LOGIC_HIGH;
     f7c:	51 e0       	ldi	r21, 0x01	; 1
     f7e:	5d 83       	std	Y+5, r21	; 0x05
     f80:	4b c0       	rjmp	.+150    	; 0x1018 <GPIO_readPin+0x126>
				}
				else{return LOGIC_LOW;}
     f82:	1d 82       	std	Y+5, r1	; 0x05
     f84:	49 c0       	rjmp	.+146    	; 0x1018 <GPIO_readPin+0x126>
				break;
				//PINB
			case PORTB_ID:
				if(BIT_IS_SET(PINB,pin_num)){
     f86:	e6 e3       	ldi	r30, 0x36	; 54
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	a9 01       	movw	r20, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <GPIO_readPin+0xac>
     f9a:	55 95       	asr	r21
     f9c:	47 95       	ror	r20
     f9e:	8a 95       	dec	r24
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <GPIO_readPin+0xa8>
     fa2:	ca 01       	movw	r24, r20
     fa4:	81 70       	andi	r24, 0x01	; 1
     fa6:	90 70       	andi	r25, 0x00	; 0
     fa8:	88 23       	and	r24, r24
     faa:	19 f0       	breq	.+6      	; 0xfb2 <GPIO_readPin+0xc0>
					return LOGIC_HIGH;
     fac:	51 e0       	ldi	r21, 0x01	; 1
     fae:	5d 83       	std	Y+5, r21	; 0x05
     fb0:	33 c0       	rjmp	.+102    	; 0x1018 <GPIO_readPin+0x126>
				}
				else{return LOGIC_LOW;}
     fb2:	1d 82       	std	Y+5, r1	; 0x05
     fb4:	31 c0       	rjmp	.+98     	; 0x1018 <GPIO_readPin+0x126>
				break;
				//PINC
			case PORTC_ID:
				if(BIT_IS_SET(PINC,pin_num)){
     fb6:	e3 e3       	ldi	r30, 0x33	; 51
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	a9 01       	movw	r20, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <GPIO_readPin+0xdc>
     fca:	55 95       	asr	r21
     fcc:	47 95       	ror	r20
     fce:	8a 95       	dec	r24
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <GPIO_readPin+0xd8>
     fd2:	ca 01       	movw	r24, r20
     fd4:	81 70       	andi	r24, 0x01	; 1
     fd6:	90 70       	andi	r25, 0x00	; 0
     fd8:	88 23       	and	r24, r24
     fda:	19 f0       	breq	.+6      	; 0xfe2 <GPIO_readPin+0xf0>
					return LOGIC_HIGH;
     fdc:	51 e0       	ldi	r21, 0x01	; 1
     fde:	5d 83       	std	Y+5, r21	; 0x05
     fe0:	1b c0       	rjmp	.+54     	; 0x1018 <GPIO_readPin+0x126>
				}
				else{return LOGIC_LOW;}
     fe2:	1d 82       	std	Y+5, r1	; 0x05
     fe4:	19 c0       	rjmp	.+50     	; 0x1018 <GPIO_readPin+0x126>
				break;
				//PIND
			case PORTD_ID:
				if(BIT_IS_SET(PIND,pin_num)){
     fe6:	e0 e3       	ldi	r30, 0x30	; 48
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	a9 01       	movw	r20, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <GPIO_readPin+0x10c>
     ffa:	55 95       	asr	r21
     ffc:	47 95       	ror	r20
     ffe:	8a 95       	dec	r24
    1000:	e2 f7       	brpl	.-8      	; 0xffa <GPIO_readPin+0x108>
    1002:	ca 01       	movw	r24, r20
    1004:	81 70       	andi	r24, 0x01	; 1
    1006:	90 70       	andi	r25, 0x00	; 0
    1008:	88 23       	and	r24, r24
    100a:	19 f0       	breq	.+6      	; 0x1012 <GPIO_readPin+0x120>
					return LOGIC_HIGH;
    100c:	51 e0       	ldi	r21, 0x01	; 1
    100e:	5d 83       	std	Y+5, r21	; 0x05
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <GPIO_readPin+0x126>
				}
				else{return LOGIC_LOW;}
    1012:	1d 82       	std	Y+5, r1	; 0x05
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <GPIO_readPin+0x126>
    1016:	02 c0       	rjmp	.+4      	; 0x101c <GPIO_readPin+0x12a>
				break;
		}
	}

}
    1018:	8d 81       	ldd	r24, Y+5	; 0x05
    101a:	8e 83       	std	Y+6, r24	; 0x06
    101c:	8e 81       	ldd	r24, Y+6	; 0x06
    101e:	26 96       	adiw	r28, 0x06	; 6
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <GPIO_setupPortDirection+0x6>
    1036:	00 d0       	rcall	.+0      	; 0x1038 <GPIO_setupPortDirection+0x8>
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	89 83       	std	Y+1, r24	; 0x01
    103e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	84 30       	cpi	r24, 0x04	; 4
    1044:	90 f5       	brcc	.+100    	; 0x10aa <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	3c 83       	std	Y+4, r19	; 0x04
    104e:	2b 83       	std	Y+3, r18	; 0x03
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	91 05       	cpc	r25, r1
    1058:	d1 f0       	breq	.+52     	; 0x108e <GPIO_setupPortDirection+0x5e>
    105a:	2b 81       	ldd	r18, Y+3	; 0x03
    105c:	3c 81       	ldd	r19, Y+4	; 0x04
    105e:	22 30       	cpi	r18, 0x02	; 2
    1060:	31 05       	cpc	r19, r1
    1062:	2c f4       	brge	.+10     	; 0x106e <GPIO_setupPortDirection+0x3e>
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	61 f0       	breq	.+24     	; 0x1084 <GPIO_setupPortDirection+0x54>
    106c:	1e c0       	rjmp	.+60     	; 0x10aa <GPIO_setupPortDirection+0x7a>
    106e:	2b 81       	ldd	r18, Y+3	; 0x03
    1070:	3c 81       	ldd	r19, Y+4	; 0x04
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	81 f0       	breq	.+32     	; 0x1098 <GPIO_setupPortDirection+0x68>
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	83 30       	cpi	r24, 0x03	; 3
    107e:	91 05       	cpc	r25, r1
    1080:	81 f0       	breq	.+32     	; 0x10a2 <GPIO_setupPortDirection+0x72>
    1082:	13 c0       	rjmp	.+38     	; 0x10aa <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1084:	ea e3       	ldi	r30, 0x3A	; 58
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	80 83       	st	Z, r24
    108c:	0e c0       	rjmp	.+28     	; 0x10aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    108e:	e7 e3       	ldi	r30, 0x37	; 55
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	80 83       	st	Z, r24
    1096:	09 c0       	rjmp	.+18     	; 0x10aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1098:	e4 e3       	ldi	r30, 0x34	; 52
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	80 83       	st	Z, r24
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    10a2:	e1 e3       	ldi	r30, 0x31	; 49
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	80 83       	st	Z, r24
			break;
		}
	}
}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	00 d0       	rcall	.+0      	; 0x10be <GPIO_writePort+0x6>
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <GPIO_writePort+0x8>
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	84 30       	cpi	r24, 0x04	; 4
    10cc:	90 f5       	brcc	.+100    	; 0x1132 <GPIO_writePort+0x7a>
				/* Do Nothing */
			}
			else
			{
				//SWTICH PORT
				switch(port_num){
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	3c 83       	std	Y+4, r19	; 0x04
    10d6:	2b 83       	std	Y+3, r18	; 0x03
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	91 05       	cpc	r25, r1
    10e0:	d1 f0       	breq	.+52     	; 0x1116 <GPIO_writePort+0x5e>
    10e2:	2b 81       	ldd	r18, Y+3	; 0x03
    10e4:	3c 81       	ldd	r19, Y+4	; 0x04
    10e6:	22 30       	cpi	r18, 0x02	; 2
    10e8:	31 05       	cpc	r19, r1
    10ea:	2c f4       	brge	.+10     	; 0x10f6 <GPIO_writePort+0x3e>
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	61 f0       	breq	.+24     	; 0x110c <GPIO_writePort+0x54>
    10f4:	1e c0       	rjmp	.+60     	; 0x1132 <GPIO_writePort+0x7a>
    10f6:	2b 81       	ldd	r18, Y+3	; 0x03
    10f8:	3c 81       	ldd	r19, Y+4	; 0x04
    10fa:	22 30       	cpi	r18, 0x02	; 2
    10fc:	31 05       	cpc	r19, r1
    10fe:	81 f0       	breq	.+32     	; 0x1120 <GPIO_writePort+0x68>
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	91 05       	cpc	r25, r1
    1108:	81 f0       	breq	.+32     	; 0x112a <GPIO_writePort+0x72>
    110a:	13 c0       	rjmp	.+38     	; 0x1132 <GPIO_writePort+0x7a>
//PORTA
				case PORTA_ID:

					PORTA=value;
    110c:	eb e3       	ldi	r30, 0x3B	; 59
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	80 83       	st	Z, r24
    1114:	0e c0       	rjmp	.+28     	; 0x1132 <GPIO_writePort+0x7a>
					break;
					//PORTB
				case PORTB_ID:
					PORTB=value;
    1116:	e8 e3       	ldi	r30, 0x38	; 56
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	80 83       	st	Z, r24
    111e:	09 c0       	rjmp	.+18     	; 0x1132 <GPIO_writePort+0x7a>
					break;
					//PORTC
				case PORTC_ID:
					PORTC=value;
    1120:	e5 e3       	ldi	r30, 0x35	; 53
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	80 83       	st	Z, r24
    1128:	04 c0       	rjmp	.+8      	; 0x1132 <GPIO_writePort+0x7a>
					break;
					//PORTD
				case PORTD_ID:
					PORTD=value;
    112a:	e2 e3       	ldi	r30, 0x32	; 50
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	80 83       	st	Z, r24
					break;
				}
				}


}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	00 d0       	rcall	.+0      	; 0x1146 <GPIO_readPort+0x6>
    1146:	00 d0       	rcall	.+0      	; 0x1148 <GPIO_readPort+0x8>
    1148:	0f 92       	push	r0
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	84 30       	cpi	r24, 0x04	; 4
    1154:	10 f0       	brcs	.+4      	; 0x115a <GPIO_readPort+0x1a>
				{
					return 0;
    1156:	1c 82       	std	Y+4, r1	; 0x04
    1158:	34 c0       	rjmp	.+104    	; 0x11c2 <GPIO_readPort+0x82>
				}
				else
				{
					//SWTICH PORT
					switch(port_num){
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	3b 83       	std	Y+3, r19	; 0x03
    1162:	2a 83       	std	Y+2, r18	; 0x02
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	9b 81       	ldd	r25, Y+3	; 0x03
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	91 05       	cpc	r25, r1
    116c:	d1 f0       	breq	.+52     	; 0x11a2 <GPIO_readPort+0x62>
    116e:	2a 81       	ldd	r18, Y+2	; 0x02
    1170:	3b 81       	ldd	r19, Y+3	; 0x03
    1172:	22 30       	cpi	r18, 0x02	; 2
    1174:	31 05       	cpc	r19, r1
    1176:	2c f4       	brge	.+10     	; 0x1182 <GPIO_readPort+0x42>
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	9b 81       	ldd	r25, Y+3	; 0x03
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	61 f0       	breq	.+24     	; 0x1198 <GPIO_readPort+0x58>
    1180:	1f c0       	rjmp	.+62     	; 0x11c0 <GPIO_readPort+0x80>
    1182:	2a 81       	ldd	r18, Y+2	; 0x02
    1184:	3b 81       	ldd	r19, Y+3	; 0x03
    1186:	22 30       	cpi	r18, 0x02	; 2
    1188:	31 05       	cpc	r19, r1
    118a:	81 f0       	breq	.+32     	; 0x11ac <GPIO_readPort+0x6c>
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	9b 81       	ldd	r25, Y+3	; 0x03
    1190:	83 30       	cpi	r24, 0x03	; 3
    1192:	91 05       	cpc	r25, r1
    1194:	81 f0       	breq	.+32     	; 0x11b6 <GPIO_readPort+0x76>
    1196:	14 c0       	rjmp	.+40     	; 0x11c0 <GPIO_readPort+0x80>
	//PORTA
					case PORTA_ID:
						return PINA;
    1198:	e9 e3       	ldi	r30, 0x39	; 57
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	90 81       	ld	r25, Z
    119e:	9c 83       	std	Y+4, r25	; 0x04
    11a0:	10 c0       	rjmp	.+32     	; 0x11c2 <GPIO_readPort+0x82>
						break;
						//PORTB
					case PORTB_ID:
						return PINB;
    11a2:	e6 e3       	ldi	r30, 0x36	; 54
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	20 81       	ld	r18, Z
    11a8:	2c 83       	std	Y+4, r18	; 0x04
    11aa:	0b c0       	rjmp	.+22     	; 0x11c2 <GPIO_readPort+0x82>
						break;
						//PORTC
					case PORTC_ID:
						return PINC;
    11ac:	e3 e3       	ldi	r30, 0x33	; 51
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	30 81       	ld	r19, Z
    11b2:	3c 83       	std	Y+4, r19	; 0x04
    11b4:	06 c0       	rjmp	.+12     	; 0x11c2 <GPIO_readPort+0x82>
						break;
						//PORTD
					case PORTD_ID:
						return PIND;
    11b6:	e0 e3       	ldi	r30, 0x30	; 48
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	8c 83       	std	Y+4, r24	; 0x04
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <GPIO_readPort+0x82>
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <GPIO_readPort+0x86>
						break;
					}
					}


}
    11c2:	9c 81       	ldd	r25, Y+4	; 0x04
    11c4:	9d 83       	std	Y+5, r25	; 0x05
    11c6:	8d 81       	ldd	r24, Y+5	; 0x05
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	00 d0       	rcall	.+0      	; 0x11de <KEYPAD_getPressedKey+0x6>
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    11e4:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    11e6:	1b 82       	std	Y+3, r1	; 0x03
    11e8:	43 c0       	rjmp	.+134    	; 0x1270 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    11ea:	82 e0       	ldi	r24, 0x02	; 2
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	0e 94 18 08 	call	0x1030	; 0x1030 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	98 2f       	mov	r25, r24
    11f6:	9c 5f       	subi	r25, 0xFC	; 252
    11f8:	82 e0       	ldi	r24, 0x02	; 2
    11fa:	69 2f       	mov	r22, r25
    11fc:	41 e0       	ldi	r20, 0x01	; 1
    11fe:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	9c 01       	movw	r18, r24
    120a:	2c 5f       	subi	r18, 0xFC	; 252
    120c:	3f 4f       	sbci	r19, 0xFF	; 255
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <KEYPAD_getPressedKey+0x40>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	2a 95       	dec	r18
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <KEYPAD_getPressedKey+0x3c>
    121c:	80 95       	com	r24
    121e:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1220:	82 e0       	ldi	r24, 0x02	; 2
    1222:	69 81       	ldd	r22, Y+1	; 0x01
    1224:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1228:	1a 82       	std	Y+2, r1	; 0x02
    122a:	1c c0       	rjmp	.+56     	; 0x1264 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    122c:	82 e0       	ldi	r24, 0x02	; 2
    122e:	6a 81       	ldd	r22, Y+2	; 0x02
    1230:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    1234:	88 23       	and	r24, r24
    1236:	99 f4       	brne	.+38     	; 0x125e <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	88 2f       	mov	r24, r24
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	98 2f       	mov	r25, r24
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	89 0f       	add	r24, r25
    124c:	8f 5f       	subi	r24, 0xFF	; 255
    124e:	0e 94 3d 09 	call	0x127a	; 0x127a <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	8f 5f       	subi	r24, 0xFF	; 255
    1262:	8a 83       	std	Y+2, r24	; 0x02
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	84 30       	cpi	r24, 0x04	; 4
    1268:	08 f3       	brcs	.-62     	; 0x122c <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	8f 5f       	subi	r24, 0xFF	; 255
    126e:	8b 83       	std	Y+3, r24	; 0x03
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	84 30       	cpi	r24, 0x04	; 4
    1274:	08 f4       	brcc	.+2      	; 0x1278 <KEYPAD_getPressedKey+0xa0>
    1276:	b9 cf       	rjmp	.-142    	; 0x11ea <KEYPAD_getPressedKey+0x12>
    1278:	b6 cf       	rjmp	.-148    	; 0x11e6 <KEYPAD_getPressedKey+0xe>

0000127a <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	00 d0       	rcall	.+0      	; 0x1280 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1280:	00 d0       	rcall	.+0      	; 0x1282 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1288:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	3c 83       	std	Y+4, r19	; 0x04
    1292:	2b 83       	std	Y+3, r18	; 0x03
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	88 30       	cpi	r24, 0x08	; 8
    129a:	91 05       	cpc	r25, r1
    129c:	09 f4       	brne	.+2      	; 0x12a0 <KEYPAD_4x4_adjustKeyNumber+0x26>
    129e:	70 c0       	rjmp	.+224    	; 0x1380 <KEYPAD_4x4_adjustKeyNumber+0x106>
    12a0:	2b 81       	ldd	r18, Y+3	; 0x03
    12a2:	3c 81       	ldd	r19, Y+4	; 0x04
    12a4:	29 30       	cpi	r18, 0x09	; 9
    12a6:	31 05       	cpc	r19, r1
    12a8:	5c f5       	brge	.+86     	; 0x1300 <KEYPAD_4x4_adjustKeyNumber+0x86>
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	84 30       	cpi	r24, 0x04	; 4
    12b0:	91 05       	cpc	r25, r1
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    12b4:	59 c0       	rjmp	.+178    	; 0x1368 <KEYPAD_4x4_adjustKeyNumber+0xee>
    12b6:	2b 81       	ldd	r18, Y+3	; 0x03
    12b8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ba:	25 30       	cpi	r18, 0x05	; 5
    12bc:	31 05       	cpc	r19, r1
    12be:	9c f4       	brge	.+38     	; 0x12e6 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	82 30       	cpi	r24, 0x02	; 2
    12c6:	91 05       	cpc	r25, r1
    12c8:	09 f4       	brne	.+2      	; 0x12cc <KEYPAD_4x4_adjustKeyNumber+0x52>
    12ca:	48 c0       	rjmp	.+144    	; 0x135c <KEYPAD_4x4_adjustKeyNumber+0xe2>
    12cc:	2b 81       	ldd	r18, Y+3	; 0x03
    12ce:	3c 81       	ldd	r19, Y+4	; 0x04
    12d0:	23 30       	cpi	r18, 0x03	; 3
    12d2:	31 05       	cpc	r19, r1
    12d4:	0c f0       	brlt	.+2      	; 0x12d8 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    12d6:	45 c0       	rjmp	.+138    	; 0x1362 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	81 30       	cpi	r24, 0x01	; 1
    12de:	91 05       	cpc	r25, r1
    12e0:	09 f4       	brne	.+2      	; 0x12e4 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    12e2:	39 c0       	rjmp	.+114    	; 0x1356 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    12e4:	67 c0       	rjmp	.+206    	; 0x13b4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    12e6:	2b 81       	ldd	r18, Y+3	; 0x03
    12e8:	3c 81       	ldd	r19, Y+4	; 0x04
    12ea:	26 30       	cpi	r18, 0x06	; 6
    12ec:	31 05       	cpc	r19, r1
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <KEYPAD_4x4_adjustKeyNumber+0x78>
    12f0:	41 c0       	rjmp	.+130    	; 0x1374 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	9c 81       	ldd	r25, Y+4	; 0x04
    12f6:	87 30       	cpi	r24, 0x07	; 7
    12f8:	91 05       	cpc	r25, r1
    12fa:	0c f0       	brlt	.+2      	; 0x12fe <KEYPAD_4x4_adjustKeyNumber+0x84>
    12fc:	3e c0       	rjmp	.+124    	; 0x137a <KEYPAD_4x4_adjustKeyNumber+0x100>
    12fe:	37 c0       	rjmp	.+110    	; 0x136e <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1300:	2b 81       	ldd	r18, Y+3	; 0x03
    1302:	3c 81       	ldd	r19, Y+4	; 0x04
    1304:	2c 30       	cpi	r18, 0x0C	; 12
    1306:	31 05       	cpc	r19, r1
    1308:	09 f4       	brne	.+2      	; 0x130c <KEYPAD_4x4_adjustKeyNumber+0x92>
    130a:	46 c0       	rjmp	.+140    	; 0x1398 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9c 81       	ldd	r25, Y+4	; 0x04
    1310:	8d 30       	cpi	r24, 0x0D	; 13
    1312:	91 05       	cpc	r25, r1
    1314:	5c f4       	brge	.+22     	; 0x132c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1316:	2b 81       	ldd	r18, Y+3	; 0x03
    1318:	3c 81       	ldd	r19, Y+4	; 0x04
    131a:	2a 30       	cpi	r18, 0x0A	; 10
    131c:	31 05       	cpc	r19, r1
    131e:	b1 f1       	breq	.+108    	; 0x138c <KEYPAD_4x4_adjustKeyNumber+0x112>
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	8b 30       	cpi	r24, 0x0B	; 11
    1326:	91 05       	cpc	r25, r1
    1328:	a4 f5       	brge	.+104    	; 0x1392 <KEYPAD_4x4_adjustKeyNumber+0x118>
    132a:	2d c0       	rjmp	.+90     	; 0x1386 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    132c:	2b 81       	ldd	r18, Y+3	; 0x03
    132e:	3c 81       	ldd	r19, Y+4	; 0x04
    1330:	2e 30       	cpi	r18, 0x0E	; 14
    1332:	31 05       	cpc	r19, r1
    1334:	b9 f1       	breq	.+110    	; 0x13a4 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	9c 81       	ldd	r25, Y+4	; 0x04
    133a:	8e 30       	cpi	r24, 0x0E	; 14
    133c:	91 05       	cpc	r25, r1
    133e:	7c f1       	brlt	.+94     	; 0x139e <KEYPAD_4x4_adjustKeyNumber+0x124>
    1340:	2b 81       	ldd	r18, Y+3	; 0x03
    1342:	3c 81       	ldd	r19, Y+4	; 0x04
    1344:	2f 30       	cpi	r18, 0x0F	; 15
    1346:	31 05       	cpc	r19, r1
    1348:	79 f1       	breq	.+94     	; 0x13a8 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	9c 81       	ldd	r25, Y+4	; 0x04
    134e:	80 31       	cpi	r24, 0x10	; 16
    1350:	91 05       	cpc	r25, r1
    1352:	69 f1       	breq	.+90     	; 0x13ae <KEYPAD_4x4_adjustKeyNumber+0x134>
    1354:	2f c0       	rjmp	.+94     	; 0x13b4 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1356:	87 e0       	ldi	r24, 0x07	; 7
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	2e c0       	rjmp	.+92     	; 0x13b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    135c:	88 e0       	ldi	r24, 0x08	; 8
    135e:	89 83       	std	Y+1, r24	; 0x01
    1360:	2b c0       	rjmp	.+86     	; 0x13b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1362:	89 e0       	ldi	r24, 0x09	; 9
    1364:	89 83       	std	Y+1, r24	; 0x01
    1366:	28 c0       	rjmp	.+80     	; 0x13b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1368:	85 e2       	ldi	r24, 0x25	; 37
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	25 c0       	rjmp	.+74     	; 0x13b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    136e:	84 e0       	ldi	r24, 0x04	; 4
    1370:	89 83       	std	Y+1, r24	; 0x01
    1372:	22 c0       	rjmp	.+68     	; 0x13b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1374:	85 e0       	ldi	r24, 0x05	; 5
    1376:	89 83       	std	Y+1, r24	; 0x01
    1378:	1f c0       	rjmp	.+62     	; 0x13b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    137a:	86 e0       	ldi	r24, 0x06	; 6
    137c:	89 83       	std	Y+1, r24	; 0x01
    137e:	1c c0       	rjmp	.+56     	; 0x13b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1380:	8a e2       	ldi	r24, 0x2A	; 42
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	19 c0       	rjmp	.+50     	; 0x13b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	89 83       	std	Y+1, r24	; 0x01
    138a:	16 c0       	rjmp	.+44     	; 0x13b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    138c:	82 e0       	ldi	r24, 0x02	; 2
    138e:	89 83       	std	Y+1, r24	; 0x01
    1390:	13 c0       	rjmp	.+38     	; 0x13b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1392:	83 e0       	ldi	r24, 0x03	; 3
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	10 c0       	rjmp	.+32     	; 0x13b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1398:	8d e2       	ldi	r24, 0x2D	; 45
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	0d c0       	rjmp	.+26     	; 0x13b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    139e:	8d e0       	ldi	r24, 0x0D	; 13
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	0a c0       	rjmp	.+20     	; 0x13b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    13a4:	19 82       	std	Y+1, r1	; 0x01
    13a6:	08 c0       	rjmp	.+16     	; 0x13b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    13a8:	8d e3       	ldi	r24, 0x3D	; 61
    13aa:	89 83       	std	Y+1, r24	; 0x01
    13ac:	05 c0       	rjmp	.+10     	; 0x13b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    13ae:	8b e2       	ldi	r24, 0x2B	; 43
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
} 
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	2e 97       	sbiw	r28, 0x0e	; 14
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	41 e0       	ldi	r20, 0x01	; 1
    13e2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	61 e0       	ldi	r22, 0x01	; 1
    13ea:	41 e0       	ldi	r20, 0x01	; 1
    13ec:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	62 e0       	ldi	r22, 0x02	; 2
    13f4:	41 e0       	ldi	r20, 0x01	; 1
    13f6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a0 ea       	ldi	r26, 0xA0	; 160
    1400:	b1 e4       	ldi	r27, 0x41	; 65
    1402:	8b 87       	std	Y+11, r24	; 0x0b
    1404:	9c 87       	std	Y+12, r25	; 0x0c
    1406:	ad 87       	std	Y+13, r26	; 0x0d
    1408:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    140a:	6b 85       	ldd	r22, Y+11	; 0x0b
    140c:	7c 85       	ldd	r23, Y+12	; 0x0c
    140e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1410:	9e 85       	ldd	r25, Y+14	; 0x0e
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	4a ef       	ldi	r20, 0xFA	; 250
    1418:	54 e4       	ldi	r21, 0x44	; 68
    141a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	8f 83       	std	Y+7, r24	; 0x07
    1424:	98 87       	std	Y+8, r25	; 0x08
    1426:	a9 87       	std	Y+9, r26	; 0x09
    1428:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    142a:	6f 81       	ldd	r22, Y+7	; 0x07
    142c:	78 85       	ldd	r23, Y+8	; 0x08
    142e:	89 85       	ldd	r24, Y+9	; 0x09
    1430:	9a 85       	ldd	r25, Y+10	; 0x0a
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	40 e8       	ldi	r20, 0x80	; 128
    1438:	5f e3       	ldi	r21, 0x3F	; 63
    143a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    143e:	88 23       	and	r24, r24
    1440:	2c f4       	brge	.+10     	; 0x144c <LCD_init+0x84>
		__ticks = 1;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	9e 83       	std	Y+6, r25	; 0x06
    1448:	8d 83       	std	Y+5, r24	; 0x05
    144a:	3f c0       	rjmp	.+126    	; 0x14ca <LCD_init+0x102>
	else if (__tmp > 65535)
    144c:	6f 81       	ldd	r22, Y+7	; 0x07
    144e:	78 85       	ldd	r23, Y+8	; 0x08
    1450:	89 85       	ldd	r24, Y+9	; 0x09
    1452:	9a 85       	ldd	r25, Y+10	; 0x0a
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	3f ef       	ldi	r19, 0xFF	; 255
    1458:	4f e7       	ldi	r20, 0x7F	; 127
    145a:	57 e4       	ldi	r21, 0x47	; 71
    145c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1460:	18 16       	cp	r1, r24
    1462:	4c f5       	brge	.+82     	; 0x14b6 <LCD_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1464:	6b 85       	ldd	r22, Y+11	; 0x0b
    1466:	7c 85       	ldd	r23, Y+12	; 0x0c
    1468:	8d 85       	ldd	r24, Y+13	; 0x0d
    146a:	9e 85       	ldd	r25, Y+14	; 0x0e
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e2       	ldi	r20, 0x20	; 32
    1472:	51 e4       	ldi	r21, 0x41	; 65
    1474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	bc 01       	movw	r22, r24
    147e:	cd 01       	movw	r24, r26
    1480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	9e 83       	std	Y+6, r25	; 0x06
    148a:	8d 83       	std	Y+5, r24	; 0x05
    148c:	0f c0       	rjmp	.+30     	; 0x14ac <LCD_init+0xe4>
    148e:	88 ec       	ldi	r24, 0xC8	; 200
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	9c 83       	std	Y+4, r25	; 0x04
    1494:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	9c 81       	ldd	r25, Y+4	; 0x04
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	f1 f7       	brne	.-4      	; 0x149a <LCD_init+0xd2>
    149e:	9c 83       	std	Y+4, r25	; 0x04
    14a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a2:	8d 81       	ldd	r24, Y+5	; 0x05
    14a4:	9e 81       	ldd	r25, Y+6	; 0x06
    14a6:	01 97       	sbiw	r24, 0x01	; 1
    14a8:	9e 83       	std	Y+6, r25	; 0x06
    14aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ac:	8d 81       	ldd	r24, Y+5	; 0x05
    14ae:	9e 81       	ldd	r25, Y+6	; 0x06
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	69 f7       	brne	.-38     	; 0x148e <LCD_init+0xc6>
    14b4:	14 c0       	rjmp	.+40     	; 0x14de <LCD_init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b6:	6f 81       	ldd	r22, Y+7	; 0x07
    14b8:	78 85       	ldd	r23, Y+8	; 0x08
    14ba:	89 85       	ldd	r24, Y+9	; 0x09
    14bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	9e 83       	std	Y+6, r25	; 0x06
    14c8:	8d 83       	std	Y+5, r24	; 0x05
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	9a 83       	std	Y+2, r25	; 0x02
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	9a 81       	ldd	r25, Y+2	; 0x02
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <LCD_init+0x10e>
    14da:	9a 83       	std	Y+2, r25	; 0x02
    14dc:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	6f ef       	ldi	r22, 0xFF	; 255
    14e2:	0e 94 18 08 	call	0x1030	; 0x1030 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    14e6:	88 e3       	ldi	r24, 0x38	; 56
    14e8:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    14ec:	8c e0       	ldi	r24, 0x0C	; 12
    14ee:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_sendCommand>
}
    14f8:	2e 96       	adiw	r28, 0x0e	; 14
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	de bf       	out	0x3e, r29	; 62
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	cd bf       	out	0x3d, r28	; 61
    1504:	cf 91       	pop	r28
    1506:	df 91       	pop	r29
    1508:	08 95       	ret

0000150a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    150a:	df 93       	push	r29
    150c:	cf 93       	push	r28
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	e9 97       	sbiw	r28, 0x39	; 57
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	40 e0       	ldi	r20, 0x00	; 0
    1526:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	a0 e8       	ldi	r26, 0x80	; 128
    1530:	bf e3       	ldi	r27, 0x3F	; 63
    1532:	8d ab       	std	Y+53, r24	; 0x35
    1534:	9e ab       	std	Y+54, r25	; 0x36
    1536:	af ab       	std	Y+55, r26	; 0x37
    1538:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    153a:	6d a9       	ldd	r22, Y+53	; 0x35
    153c:	7e a9       	ldd	r23, Y+54	; 0x36
    153e:	8f a9       	ldd	r24, Y+55	; 0x37
    1540:	98 ad       	ldd	r25, Y+56	; 0x38
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	4a ef       	ldi	r20, 0xFA	; 250
    1548:	54 e4       	ldi	r21, 0x44	; 68
    154a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	89 ab       	std	Y+49, r24	; 0x31
    1554:	9a ab       	std	Y+50, r25	; 0x32
    1556:	ab ab       	std	Y+51, r26	; 0x33
    1558:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    155a:	69 a9       	ldd	r22, Y+49	; 0x31
    155c:	7a a9       	ldd	r23, Y+50	; 0x32
    155e:	8b a9       	ldd	r24, Y+51	; 0x33
    1560:	9c a9       	ldd	r25, Y+52	; 0x34
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	40 e8       	ldi	r20, 0x80	; 128
    1568:	5f e3       	ldi	r21, 0x3F	; 63
    156a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    156e:	88 23       	and	r24, r24
    1570:	2c f4       	brge	.+10     	; 0x157c <LCD_sendCommand+0x72>
		__ticks = 1;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	98 ab       	std	Y+48, r25	; 0x30
    1578:	8f a7       	std	Y+47, r24	; 0x2f
    157a:	3f c0       	rjmp	.+126    	; 0x15fa <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    157c:	69 a9       	ldd	r22, Y+49	; 0x31
    157e:	7a a9       	ldd	r23, Y+50	; 0x32
    1580:	8b a9       	ldd	r24, Y+51	; 0x33
    1582:	9c a9       	ldd	r25, Y+52	; 0x34
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	3f ef       	ldi	r19, 0xFF	; 255
    1588:	4f e7       	ldi	r20, 0x7F	; 127
    158a:	57 e4       	ldi	r21, 0x47	; 71
    158c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1590:	18 16       	cp	r1, r24
    1592:	4c f5       	brge	.+82     	; 0x15e6 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1594:	6d a9       	ldd	r22, Y+53	; 0x35
    1596:	7e a9       	ldd	r23, Y+54	; 0x36
    1598:	8f a9       	ldd	r24, Y+55	; 0x37
    159a:	98 ad       	ldd	r25, Y+56	; 0x38
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	40 e2       	ldi	r20, 0x20	; 32
    15a2:	51 e4       	ldi	r21, 0x41	; 65
    15a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	bc 01       	movw	r22, r24
    15ae:	cd 01       	movw	r24, r26
    15b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	98 ab       	std	Y+48, r25	; 0x30
    15ba:	8f a7       	std	Y+47, r24	; 0x2f
    15bc:	0f c0       	rjmp	.+30     	; 0x15dc <LCD_sendCommand+0xd2>
    15be:	88 ec       	ldi	r24, 0xC8	; 200
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	9e a7       	std	Y+46, r25	; 0x2e
    15c4:	8d a7       	std	Y+45, r24	; 0x2d
    15c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    15c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <LCD_sendCommand+0xc0>
    15ce:	9e a7       	std	Y+46, r25	; 0x2e
    15d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    15d4:	98 a9       	ldd	r25, Y+48	; 0x30
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	98 ab       	std	Y+48, r25	; 0x30
    15da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    15de:	98 a9       	ldd	r25, Y+48	; 0x30
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	69 f7       	brne	.-38     	; 0x15be <LCD_sendCommand+0xb4>
    15e4:	14 c0       	rjmp	.+40     	; 0x160e <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e6:	69 a9       	ldd	r22, Y+49	; 0x31
    15e8:	7a a9       	ldd	r23, Y+50	; 0x32
    15ea:	8b a9       	ldd	r24, Y+51	; 0x33
    15ec:	9c a9       	ldd	r25, Y+52	; 0x34
    15ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	98 ab       	std	Y+48, r25	; 0x30
    15f8:	8f a7       	std	Y+47, r24	; 0x2f
    15fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    15fc:	98 a9       	ldd	r25, Y+48	; 0x30
    15fe:	9c a7       	std	Y+44, r25	; 0x2c
    1600:	8b a7       	std	Y+43, r24	; 0x2b
    1602:	8b a5       	ldd	r24, Y+43	; 0x2b
    1604:	9c a5       	ldd	r25, Y+44	; 0x2c
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	f1 f7       	brne	.-4      	; 0x1606 <LCD_sendCommand+0xfc>
    160a:	9c a7       	std	Y+44, r25	; 0x2c
    160c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	62 e0       	ldi	r22, 0x02	; 2
    1612:	41 e0       	ldi	r20, 0x01	; 1
    1614:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	a0 e8       	ldi	r26, 0x80	; 128
    161e:	bf e3       	ldi	r27, 0x3F	; 63
    1620:	8f a3       	std	Y+39, r24	; 0x27
    1622:	98 a7       	std	Y+40, r25	; 0x28
    1624:	a9 a7       	std	Y+41, r26	; 0x29
    1626:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1628:	6f a1       	ldd	r22, Y+39	; 0x27
    162a:	78 a5       	ldd	r23, Y+40	; 0x28
    162c:	89 a5       	ldd	r24, Y+41	; 0x29
    162e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	4a ef       	ldi	r20, 0xFA	; 250
    1636:	54 e4       	ldi	r21, 0x44	; 68
    1638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	8b a3       	std	Y+35, r24	; 0x23
    1642:	9c a3       	std	Y+36, r25	; 0x24
    1644:	ad a3       	std	Y+37, r26	; 0x25
    1646:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1648:	6b a1       	ldd	r22, Y+35	; 0x23
    164a:	7c a1       	ldd	r23, Y+36	; 0x24
    164c:	8d a1       	ldd	r24, Y+37	; 0x25
    164e:	9e a1       	ldd	r25, Y+38	; 0x26
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	40 e8       	ldi	r20, 0x80	; 128
    1656:	5f e3       	ldi	r21, 0x3F	; 63
    1658:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    165c:	88 23       	and	r24, r24
    165e:	2c f4       	brge	.+10     	; 0x166a <LCD_sendCommand+0x160>
		__ticks = 1;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	9a a3       	std	Y+34, r25	; 0x22
    1666:	89 a3       	std	Y+33, r24	; 0x21
    1668:	3f c0       	rjmp	.+126    	; 0x16e8 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    166a:	6b a1       	ldd	r22, Y+35	; 0x23
    166c:	7c a1       	ldd	r23, Y+36	; 0x24
    166e:	8d a1       	ldd	r24, Y+37	; 0x25
    1670:	9e a1       	ldd	r25, Y+38	; 0x26
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	3f ef       	ldi	r19, 0xFF	; 255
    1676:	4f e7       	ldi	r20, 0x7F	; 127
    1678:	57 e4       	ldi	r21, 0x47	; 71
    167a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    167e:	18 16       	cp	r1, r24
    1680:	4c f5       	brge	.+82     	; 0x16d4 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1682:	6f a1       	ldd	r22, Y+39	; 0x27
    1684:	78 a5       	ldd	r23, Y+40	; 0x28
    1686:	89 a5       	ldd	r24, Y+41	; 0x29
    1688:	9a a5       	ldd	r25, Y+42	; 0x2a
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e2       	ldi	r20, 0x20	; 32
    1690:	51 e4       	ldi	r21, 0x41	; 65
    1692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	bc 01       	movw	r22, r24
    169c:	cd 01       	movw	r24, r26
    169e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	9a a3       	std	Y+34, r25	; 0x22
    16a8:	89 a3       	std	Y+33, r24	; 0x21
    16aa:	0f c0       	rjmp	.+30     	; 0x16ca <LCD_sendCommand+0x1c0>
    16ac:	88 ec       	ldi	r24, 0xC8	; 200
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	98 a3       	std	Y+32, r25	; 0x20
    16b2:	8f 8f       	std	Y+31, r24	; 0x1f
    16b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16b6:	98 a1       	ldd	r25, Y+32	; 0x20
    16b8:	01 97       	sbiw	r24, 0x01	; 1
    16ba:	f1 f7       	brne	.-4      	; 0x16b8 <LCD_sendCommand+0x1ae>
    16bc:	98 a3       	std	Y+32, r25	; 0x20
    16be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c0:	89 a1       	ldd	r24, Y+33	; 0x21
    16c2:	9a a1       	ldd	r25, Y+34	; 0x22
    16c4:	01 97       	sbiw	r24, 0x01	; 1
    16c6:	9a a3       	std	Y+34, r25	; 0x22
    16c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ca:	89 a1       	ldd	r24, Y+33	; 0x21
    16cc:	9a a1       	ldd	r25, Y+34	; 0x22
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	69 f7       	brne	.-38     	; 0x16ac <LCD_sendCommand+0x1a2>
    16d2:	14 c0       	rjmp	.+40     	; 0x16fc <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d4:	6b a1       	ldd	r22, Y+35	; 0x23
    16d6:	7c a1       	ldd	r23, Y+36	; 0x24
    16d8:	8d a1       	ldd	r24, Y+37	; 0x25
    16da:	9e a1       	ldd	r25, Y+38	; 0x26
    16dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	9a a3       	std	Y+34, r25	; 0x22
    16e6:	89 a3       	std	Y+33, r24	; 0x21
    16e8:	89 a1       	ldd	r24, Y+33	; 0x21
    16ea:	9a a1       	ldd	r25, Y+34	; 0x22
    16ec:	9e 8f       	std	Y+30, r25	; 0x1e
    16ee:	8d 8f       	std	Y+29, r24	; 0x1d
    16f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	f1 f7       	brne	.-4      	; 0x16f4 <LCD_sendCommand+0x1ea>
    16f8:	9e 8f       	std	Y+30, r25	; 0x1e
    16fa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	69 ad       	ldd	r22, Y+57	; 0x39
    1700:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_writePort>
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	a0 e8       	ldi	r26, 0x80	; 128
    170a:	bf e3       	ldi	r27, 0x3F	; 63
    170c:	89 8f       	std	Y+25, r24	; 0x19
    170e:	9a 8f       	std	Y+26, r25	; 0x1a
    1710:	ab 8f       	std	Y+27, r26	; 0x1b
    1712:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1714:	69 8d       	ldd	r22, Y+25	; 0x19
    1716:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1718:	8b 8d       	ldd	r24, Y+27	; 0x1b
    171a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	4a ef       	ldi	r20, 0xFA	; 250
    1722:	54 e4       	ldi	r21, 0x44	; 68
    1724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	8d 8b       	std	Y+21, r24	; 0x15
    172e:	9e 8b       	std	Y+22, r25	; 0x16
    1730:	af 8b       	std	Y+23, r26	; 0x17
    1732:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1734:	6d 89       	ldd	r22, Y+21	; 0x15
    1736:	7e 89       	ldd	r23, Y+22	; 0x16
    1738:	8f 89       	ldd	r24, Y+23	; 0x17
    173a:	98 8d       	ldd	r25, Y+24	; 0x18
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e8       	ldi	r20, 0x80	; 128
    1742:	5f e3       	ldi	r21, 0x3F	; 63
    1744:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1748:	88 23       	and	r24, r24
    174a:	2c f4       	brge	.+10     	; 0x1756 <LCD_sendCommand+0x24c>
		__ticks = 1;
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	9c 8b       	std	Y+20, r25	; 0x14
    1752:	8b 8b       	std	Y+19, r24	; 0x13
    1754:	3f c0       	rjmp	.+126    	; 0x17d4 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1756:	6d 89       	ldd	r22, Y+21	; 0x15
    1758:	7e 89       	ldd	r23, Y+22	; 0x16
    175a:	8f 89       	ldd	r24, Y+23	; 0x17
    175c:	98 8d       	ldd	r25, Y+24	; 0x18
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	3f ef       	ldi	r19, 0xFF	; 255
    1762:	4f e7       	ldi	r20, 0x7F	; 127
    1764:	57 e4       	ldi	r21, 0x47	; 71
    1766:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    176a:	18 16       	cp	r1, r24
    176c:	4c f5       	brge	.+82     	; 0x17c0 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176e:	69 8d       	ldd	r22, Y+25	; 0x19
    1770:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1772:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1774:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	40 e2       	ldi	r20, 0x20	; 32
    177c:	51 e4       	ldi	r21, 0x41	; 65
    177e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	bc 01       	movw	r22, r24
    1788:	cd 01       	movw	r24, r26
    178a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	9c 8b       	std	Y+20, r25	; 0x14
    1794:	8b 8b       	std	Y+19, r24	; 0x13
    1796:	0f c0       	rjmp	.+30     	; 0x17b6 <LCD_sendCommand+0x2ac>
    1798:	88 ec       	ldi	r24, 0xC8	; 200
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	9a 8b       	std	Y+18, r25	; 0x12
    179e:	89 8b       	std	Y+17, r24	; 0x11
    17a0:	89 89       	ldd	r24, Y+17	; 0x11
    17a2:	9a 89       	ldd	r25, Y+18	; 0x12
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	f1 f7       	brne	.-4      	; 0x17a4 <LCD_sendCommand+0x29a>
    17a8:	9a 8b       	std	Y+18, r25	; 0x12
    17aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ac:	8b 89       	ldd	r24, Y+19	; 0x13
    17ae:	9c 89       	ldd	r25, Y+20	; 0x14
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	9c 8b       	std	Y+20, r25	; 0x14
    17b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b6:	8b 89       	ldd	r24, Y+19	; 0x13
    17b8:	9c 89       	ldd	r25, Y+20	; 0x14
    17ba:	00 97       	sbiw	r24, 0x00	; 0
    17bc:	69 f7       	brne	.-38     	; 0x1798 <LCD_sendCommand+0x28e>
    17be:	14 c0       	rjmp	.+40     	; 0x17e8 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c0:	6d 89       	ldd	r22, Y+21	; 0x15
    17c2:	7e 89       	ldd	r23, Y+22	; 0x16
    17c4:	8f 89       	ldd	r24, Y+23	; 0x17
    17c6:	98 8d       	ldd	r25, Y+24	; 0x18
    17c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	9c 8b       	std	Y+20, r25	; 0x14
    17d2:	8b 8b       	std	Y+19, r24	; 0x13
    17d4:	8b 89       	ldd	r24, Y+19	; 0x13
    17d6:	9c 89       	ldd	r25, Y+20	; 0x14
    17d8:	98 8b       	std	Y+16, r25	; 0x10
    17da:	8f 87       	std	Y+15, r24	; 0x0f
    17dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    17de:	98 89       	ldd	r25, Y+16	; 0x10
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	f1 f7       	brne	.-4      	; 0x17e0 <LCD_sendCommand+0x2d6>
    17e4:	98 8b       	std	Y+16, r25	; 0x10
    17e6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	62 e0       	ldi	r22, 0x02	; 2
    17ec:	40 e0       	ldi	r20, 0x00	; 0
    17ee:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	a0 e8       	ldi	r26, 0x80	; 128
    17f8:	bf e3       	ldi	r27, 0x3F	; 63
    17fa:	8b 87       	std	Y+11, r24	; 0x0b
    17fc:	9c 87       	std	Y+12, r25	; 0x0c
    17fe:	ad 87       	std	Y+13, r26	; 0x0d
    1800:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1802:	6b 85       	ldd	r22, Y+11	; 0x0b
    1804:	7c 85       	ldd	r23, Y+12	; 0x0c
    1806:	8d 85       	ldd	r24, Y+13	; 0x0d
    1808:	9e 85       	ldd	r25, Y+14	; 0x0e
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	4a ef       	ldi	r20, 0xFA	; 250
    1810:	54 e4       	ldi	r21, 0x44	; 68
    1812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	8f 83       	std	Y+7, r24	; 0x07
    181c:	98 87       	std	Y+8, r25	; 0x08
    181e:	a9 87       	std	Y+9, r26	; 0x09
    1820:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1822:	6f 81       	ldd	r22, Y+7	; 0x07
    1824:	78 85       	ldd	r23, Y+8	; 0x08
    1826:	89 85       	ldd	r24, Y+9	; 0x09
    1828:	9a 85       	ldd	r25, Y+10	; 0x0a
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e8       	ldi	r20, 0x80	; 128
    1830:	5f e3       	ldi	r21, 0x3F	; 63
    1832:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1836:	88 23       	and	r24, r24
    1838:	2c f4       	brge	.+10     	; 0x1844 <LCD_sendCommand+0x33a>
		__ticks = 1;
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	9e 83       	std	Y+6, r25	; 0x06
    1840:	8d 83       	std	Y+5, r24	; 0x05
    1842:	3f c0       	rjmp	.+126    	; 0x18c2 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1844:	6f 81       	ldd	r22, Y+7	; 0x07
    1846:	78 85       	ldd	r23, Y+8	; 0x08
    1848:	89 85       	ldd	r24, Y+9	; 0x09
    184a:	9a 85       	ldd	r25, Y+10	; 0x0a
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	3f ef       	ldi	r19, 0xFF	; 255
    1850:	4f e7       	ldi	r20, 0x7F	; 127
    1852:	57 e4       	ldi	r21, 0x47	; 71
    1854:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1858:	18 16       	cp	r1, r24
    185a:	4c f5       	brge	.+82     	; 0x18ae <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185c:	6b 85       	ldd	r22, Y+11	; 0x0b
    185e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1860:	8d 85       	ldd	r24, Y+13	; 0x0d
    1862:	9e 85       	ldd	r25, Y+14	; 0x0e
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e2       	ldi	r20, 0x20	; 32
    186a:	51 e4       	ldi	r21, 0x41	; 65
    186c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1870:	dc 01       	movw	r26, r24
    1872:	cb 01       	movw	r24, r22
    1874:	bc 01       	movw	r22, r24
    1876:	cd 01       	movw	r24, r26
    1878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	9e 83       	std	Y+6, r25	; 0x06
    1882:	8d 83       	std	Y+5, r24	; 0x05
    1884:	0f c0       	rjmp	.+30     	; 0x18a4 <LCD_sendCommand+0x39a>
    1886:	88 ec       	ldi	r24, 0xC8	; 200
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	9c 83       	std	Y+4, r25	; 0x04
    188c:	8b 83       	std	Y+3, r24	; 0x03
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	f1 f7       	brne	.-4      	; 0x1892 <LCD_sendCommand+0x388>
    1896:	9c 83       	std	Y+4, r25	; 0x04
    1898:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189a:	8d 81       	ldd	r24, Y+5	; 0x05
    189c:	9e 81       	ldd	r25, Y+6	; 0x06
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	9e 83       	std	Y+6, r25	; 0x06
    18a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a4:	8d 81       	ldd	r24, Y+5	; 0x05
    18a6:	9e 81       	ldd	r25, Y+6	; 0x06
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	69 f7       	brne	.-38     	; 0x1886 <LCD_sendCommand+0x37c>
    18ac:	14 c0       	rjmp	.+40     	; 0x18d6 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ae:	6f 81       	ldd	r22, Y+7	; 0x07
    18b0:	78 85       	ldd	r23, Y+8	; 0x08
    18b2:	89 85       	ldd	r24, Y+9	; 0x09
    18b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	9e 83       	std	Y+6, r25	; 0x06
    18c0:	8d 83       	std	Y+5, r24	; 0x05
    18c2:	8d 81       	ldd	r24, Y+5	; 0x05
    18c4:	9e 81       	ldd	r25, Y+6	; 0x06
    18c6:	9a 83       	std	Y+2, r25	; 0x02
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	9a 81       	ldd	r25, Y+2	; 0x02
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <LCD_sendCommand+0x3c4>
    18d2:	9a 83       	std	Y+2, r25	; 0x02
    18d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    18d6:	e9 96       	adiw	r28, 0x39	; 57
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	f8 94       	cli
    18dc:	de bf       	out	0x3e, r29	; 62
    18de:	0f be       	out	0x3f, r0	; 63
    18e0:	cd bf       	out	0x3d, r28	; 61
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	08 95       	ret

000018e8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
    18f0:	e9 97       	sbiw	r28, 0x39	; 57
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	60 e0       	ldi	r22, 0x00	; 0
    1902:	41 e0       	ldi	r20, 0x01	; 1
    1904:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	a0 e8       	ldi	r26, 0x80	; 128
    190e:	bf e3       	ldi	r27, 0x3F	; 63
    1910:	8d ab       	std	Y+53, r24	; 0x35
    1912:	9e ab       	std	Y+54, r25	; 0x36
    1914:	af ab       	std	Y+55, r26	; 0x37
    1916:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1918:	6d a9       	ldd	r22, Y+53	; 0x35
    191a:	7e a9       	ldd	r23, Y+54	; 0x36
    191c:	8f a9       	ldd	r24, Y+55	; 0x37
    191e:	98 ad       	ldd	r25, Y+56	; 0x38
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	4a ef       	ldi	r20, 0xFA	; 250
    1926:	54 e4       	ldi	r21, 0x44	; 68
    1928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	89 ab       	std	Y+49, r24	; 0x31
    1932:	9a ab       	std	Y+50, r25	; 0x32
    1934:	ab ab       	std	Y+51, r26	; 0x33
    1936:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1938:	69 a9       	ldd	r22, Y+49	; 0x31
    193a:	7a a9       	ldd	r23, Y+50	; 0x32
    193c:	8b a9       	ldd	r24, Y+51	; 0x33
    193e:	9c a9       	ldd	r25, Y+52	; 0x34
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e8       	ldi	r20, 0x80	; 128
    1946:	5f e3       	ldi	r21, 0x3F	; 63
    1948:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    194c:	88 23       	and	r24, r24
    194e:	2c f4       	brge	.+10     	; 0x195a <LCD_displayCharacter+0x72>
		__ticks = 1;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	98 ab       	std	Y+48, r25	; 0x30
    1956:	8f a7       	std	Y+47, r24	; 0x2f
    1958:	3f c0       	rjmp	.+126    	; 0x19d8 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    195a:	69 a9       	ldd	r22, Y+49	; 0x31
    195c:	7a a9       	ldd	r23, Y+50	; 0x32
    195e:	8b a9       	ldd	r24, Y+51	; 0x33
    1960:	9c a9       	ldd	r25, Y+52	; 0x34
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	3f ef       	ldi	r19, 0xFF	; 255
    1966:	4f e7       	ldi	r20, 0x7F	; 127
    1968:	57 e4       	ldi	r21, 0x47	; 71
    196a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    196e:	18 16       	cp	r1, r24
    1970:	4c f5       	brge	.+82     	; 0x19c4 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1972:	6d a9       	ldd	r22, Y+53	; 0x35
    1974:	7e a9       	ldd	r23, Y+54	; 0x36
    1976:	8f a9       	ldd	r24, Y+55	; 0x37
    1978:	98 ad       	ldd	r25, Y+56	; 0x38
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e2       	ldi	r20, 0x20	; 32
    1980:	51 e4       	ldi	r21, 0x41	; 65
    1982:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	bc 01       	movw	r22, r24
    198c:	cd 01       	movw	r24, r26
    198e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	98 ab       	std	Y+48, r25	; 0x30
    1998:	8f a7       	std	Y+47, r24	; 0x2f
    199a:	0f c0       	rjmp	.+30     	; 0x19ba <LCD_displayCharacter+0xd2>
    199c:	88 ec       	ldi	r24, 0xC8	; 200
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	9e a7       	std	Y+46, r25	; 0x2e
    19a2:	8d a7       	std	Y+45, r24	; 0x2d
    19a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    19a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <LCD_displayCharacter+0xc0>
    19ac:	9e a7       	std	Y+46, r25	; 0x2e
    19ae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    19b2:	98 a9       	ldd	r25, Y+48	; 0x30
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	98 ab       	std	Y+48, r25	; 0x30
    19b8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    19bc:	98 a9       	ldd	r25, Y+48	; 0x30
    19be:	00 97       	sbiw	r24, 0x00	; 0
    19c0:	69 f7       	brne	.-38     	; 0x199c <LCD_displayCharacter+0xb4>
    19c2:	14 c0       	rjmp	.+40     	; 0x19ec <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c4:	69 a9       	ldd	r22, Y+49	; 0x31
    19c6:	7a a9       	ldd	r23, Y+50	; 0x32
    19c8:	8b a9       	ldd	r24, Y+51	; 0x33
    19ca:	9c a9       	ldd	r25, Y+52	; 0x34
    19cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	98 ab       	std	Y+48, r25	; 0x30
    19d6:	8f a7       	std	Y+47, r24	; 0x2f
    19d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    19da:	98 a9       	ldd	r25, Y+48	; 0x30
    19dc:	9c a7       	std	Y+44, r25	; 0x2c
    19de:	8b a7       	std	Y+43, r24	; 0x2b
    19e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    19e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	f1 f7       	brne	.-4      	; 0x19e4 <LCD_displayCharacter+0xfc>
    19e8:	9c a7       	std	Y+44, r25	; 0x2c
    19ea:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	62 e0       	ldi	r22, 0x02	; 2
    19f0:	41 e0       	ldi	r20, 0x01	; 1
    19f2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	a0 e8       	ldi	r26, 0x80	; 128
    19fc:	bf e3       	ldi	r27, 0x3F	; 63
    19fe:	8f a3       	std	Y+39, r24	; 0x27
    1a00:	98 a7       	std	Y+40, r25	; 0x28
    1a02:	a9 a7       	std	Y+41, r26	; 0x29
    1a04:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a06:	6f a1       	ldd	r22, Y+39	; 0x27
    1a08:	78 a5       	ldd	r23, Y+40	; 0x28
    1a0a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	4a ef       	ldi	r20, 0xFA	; 250
    1a14:	54 e4       	ldi	r21, 0x44	; 68
    1a16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	8b a3       	std	Y+35, r24	; 0x23
    1a20:	9c a3       	std	Y+36, r25	; 0x24
    1a22:	ad a3       	std	Y+37, r26	; 0x25
    1a24:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a26:	6b a1       	ldd	r22, Y+35	; 0x23
    1a28:	7c a1       	ldd	r23, Y+36	; 0x24
    1a2a:	8d a1       	ldd	r24, Y+37	; 0x25
    1a2c:	9e a1       	ldd	r25, Y+38	; 0x26
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e8       	ldi	r20, 0x80	; 128
    1a34:	5f e3       	ldi	r21, 0x3F	; 63
    1a36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a3a:	88 23       	and	r24, r24
    1a3c:	2c f4       	brge	.+10     	; 0x1a48 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	9a a3       	std	Y+34, r25	; 0x22
    1a44:	89 a3       	std	Y+33, r24	; 0x21
    1a46:	3f c0       	rjmp	.+126    	; 0x1ac6 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1a48:	6b a1       	ldd	r22, Y+35	; 0x23
    1a4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	3f ef       	ldi	r19, 0xFF	; 255
    1a54:	4f e7       	ldi	r20, 0x7F	; 127
    1a56:	57 e4       	ldi	r21, 0x47	; 71
    1a58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a5c:	18 16       	cp	r1, r24
    1a5e:	4c f5       	brge	.+82     	; 0x1ab2 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a60:	6f a1       	ldd	r22, Y+39	; 0x27
    1a62:	78 a5       	ldd	r23, Y+40	; 0x28
    1a64:	89 a5       	ldd	r24, Y+41	; 0x29
    1a66:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e2       	ldi	r20, 0x20	; 32
    1a6e:	51 e4       	ldi	r21, 0x41	; 65
    1a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	bc 01       	movw	r22, r24
    1a7a:	cd 01       	movw	r24, r26
    1a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	9a a3       	std	Y+34, r25	; 0x22
    1a86:	89 a3       	std	Y+33, r24	; 0x21
    1a88:	0f c0       	rjmp	.+30     	; 0x1aa8 <LCD_displayCharacter+0x1c0>
    1a8a:	88 ec       	ldi	r24, 0xC8	; 200
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	98 a3       	std	Y+32, r25	; 0x20
    1a90:	8f 8f       	std	Y+31, r24	; 0x1f
    1a92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a94:	98 a1       	ldd	r25, Y+32	; 0x20
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <LCD_displayCharacter+0x1ae>
    1a9a:	98 a3       	std	Y+32, r25	; 0x20
    1a9c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1aa0:	9a a1       	ldd	r25, Y+34	; 0x22
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	9a a3       	std	Y+34, r25	; 0x22
    1aa6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa8:	89 a1       	ldd	r24, Y+33	; 0x21
    1aaa:	9a a1       	ldd	r25, Y+34	; 0x22
    1aac:	00 97       	sbiw	r24, 0x00	; 0
    1aae:	69 f7       	brne	.-38     	; 0x1a8a <LCD_displayCharacter+0x1a2>
    1ab0:	14 c0       	rjmp	.+40     	; 0x1ada <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ab4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ab6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ab8:	9e a1       	ldd	r25, Y+38	; 0x26
    1aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	9a a3       	std	Y+34, r25	; 0x22
    1ac4:	89 a3       	std	Y+33, r24	; 0x21
    1ac6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ac8:	9a a1       	ldd	r25, Y+34	; 0x22
    1aca:	9e 8f       	std	Y+30, r25	; 0x1e
    1acc:	8d 8f       	std	Y+29, r24	; 0x1d
    1ace:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ad0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <LCD_displayCharacter+0x1ea>
    1ad6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ad8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	69 ad       	ldd	r22, Y+57	; 0x39
    1ade:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_writePort>
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	a0 e8       	ldi	r26, 0x80	; 128
    1ae8:	bf e3       	ldi	r27, 0x3F	; 63
    1aea:	89 8f       	std	Y+25, r24	; 0x19
    1aec:	9a 8f       	std	Y+26, r25	; 0x1a
    1aee:	ab 8f       	std	Y+27, r26	; 0x1b
    1af0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af2:	69 8d       	ldd	r22, Y+25	; 0x19
    1af4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1af8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	4a ef       	ldi	r20, 0xFA	; 250
    1b00:	54 e4       	ldi	r21, 0x44	; 68
    1b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	8d 8b       	std	Y+21, r24	; 0x15
    1b0c:	9e 8b       	std	Y+22, r25	; 0x16
    1b0e:	af 8b       	std	Y+23, r26	; 0x17
    1b10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b12:	6d 89       	ldd	r22, Y+21	; 0x15
    1b14:	7e 89       	ldd	r23, Y+22	; 0x16
    1b16:	8f 89       	ldd	r24, Y+23	; 0x17
    1b18:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	40 e8       	ldi	r20, 0x80	; 128
    1b20:	5f e3       	ldi	r21, 0x3F	; 63
    1b22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b26:	88 23       	and	r24, r24
    1b28:	2c f4       	brge	.+10     	; 0x1b34 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	9c 8b       	std	Y+20, r25	; 0x14
    1b30:	8b 8b       	std	Y+19, r24	; 0x13
    1b32:	3f c0       	rjmp	.+126    	; 0x1bb2 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1b34:	6d 89       	ldd	r22, Y+21	; 0x15
    1b36:	7e 89       	ldd	r23, Y+22	; 0x16
    1b38:	8f 89       	ldd	r24, Y+23	; 0x17
    1b3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	3f ef       	ldi	r19, 0xFF	; 255
    1b40:	4f e7       	ldi	r20, 0x7F	; 127
    1b42:	57 e4       	ldi	r21, 0x47	; 71
    1b44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b48:	18 16       	cp	r1, r24
    1b4a:	4c f5       	brge	.+82     	; 0x1b9e <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e2       	ldi	r20, 0x20	; 32
    1b5a:	51 e4       	ldi	r21, 0x41	; 65
    1b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	bc 01       	movw	r22, r24
    1b66:	cd 01       	movw	r24, r26
    1b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	9c 8b       	std	Y+20, r25	; 0x14
    1b72:	8b 8b       	std	Y+19, r24	; 0x13
    1b74:	0f c0       	rjmp	.+30     	; 0x1b94 <LCD_displayCharacter+0x2ac>
    1b76:	88 ec       	ldi	r24, 0xC8	; 200
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	9a 8b       	std	Y+18, r25	; 0x12
    1b7c:	89 8b       	std	Y+17, r24	; 0x11
    1b7e:	89 89       	ldd	r24, Y+17	; 0x11
    1b80:	9a 89       	ldd	r25, Y+18	; 0x12
    1b82:	01 97       	sbiw	r24, 0x01	; 1
    1b84:	f1 f7       	brne	.-4      	; 0x1b82 <LCD_displayCharacter+0x29a>
    1b86:	9a 8b       	std	Y+18, r25	; 0x12
    1b88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	9c 8b       	std	Y+20, r25	; 0x14
    1b92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b94:	8b 89       	ldd	r24, Y+19	; 0x13
    1b96:	9c 89       	ldd	r25, Y+20	; 0x14
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	69 f7       	brne	.-38     	; 0x1b76 <LCD_displayCharacter+0x28e>
    1b9c:	14 c0       	rjmp	.+40     	; 0x1bc6 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	9c 8b       	std	Y+20, r25	; 0x14
    1bb0:	8b 8b       	std	Y+19, r24	; 0x13
    1bb2:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb4:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb6:	98 8b       	std	Y+16, r25	; 0x10
    1bb8:	8f 87       	std	Y+15, r24	; 0x0f
    1bba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bbc:	98 89       	ldd	r25, Y+16	; 0x10
    1bbe:	01 97       	sbiw	r24, 0x01	; 1
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <LCD_displayCharacter+0x2d6>
    1bc2:	98 8b       	std	Y+16, r25	; 0x10
    1bc4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	62 e0       	ldi	r22, 0x02	; 2
    1bca:	40 e0       	ldi	r20, 0x00	; 0
    1bcc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	a0 e8       	ldi	r26, 0x80	; 128
    1bd6:	bf e3       	ldi	r27, 0x3F	; 63
    1bd8:	8b 87       	std	Y+11, r24	; 0x0b
    1bda:	9c 87       	std	Y+12, r25	; 0x0c
    1bdc:	ad 87       	std	Y+13, r26	; 0x0d
    1bde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	4a ef       	ldi	r20, 0xFA	; 250
    1bee:	54 e4       	ldi	r21, 0x44	; 68
    1bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	8f 83       	std	Y+7, r24	; 0x07
    1bfa:	98 87       	std	Y+8, r25	; 0x08
    1bfc:	a9 87       	std	Y+9, r26	; 0x09
    1bfe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c00:	6f 81       	ldd	r22, Y+7	; 0x07
    1c02:	78 85       	ldd	r23, Y+8	; 0x08
    1c04:	89 85       	ldd	r24, Y+9	; 0x09
    1c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e8       	ldi	r20, 0x80	; 128
    1c0e:	5f e3       	ldi	r21, 0x3F	; 63
    1c10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c14:	88 23       	and	r24, r24
    1c16:	2c f4       	brge	.+10     	; 0x1c22 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	9e 83       	std	Y+6, r25	; 0x06
    1c1e:	8d 83       	std	Y+5, r24	; 0x05
    1c20:	3f c0       	rjmp	.+126    	; 0x1ca0 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1c22:	6f 81       	ldd	r22, Y+7	; 0x07
    1c24:	78 85       	ldd	r23, Y+8	; 0x08
    1c26:	89 85       	ldd	r24, Y+9	; 0x09
    1c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	3f ef       	ldi	r19, 0xFF	; 255
    1c2e:	4f e7       	ldi	r20, 0x7F	; 127
    1c30:	57 e4       	ldi	r21, 0x47	; 71
    1c32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c36:	18 16       	cp	r1, r24
    1c38:	4c f5       	brge	.+82     	; 0x1c8c <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	40 e2       	ldi	r20, 0x20	; 32
    1c48:	51 e4       	ldi	r21, 0x41	; 65
    1c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	bc 01       	movw	r22, r24
    1c54:	cd 01       	movw	r24, r26
    1c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	9e 83       	std	Y+6, r25	; 0x06
    1c60:	8d 83       	std	Y+5, r24	; 0x05
    1c62:	0f c0       	rjmp	.+30     	; 0x1c82 <LCD_displayCharacter+0x39a>
    1c64:	88 ec       	ldi	r24, 0xC8	; 200
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	9c 83       	std	Y+4, r25	; 0x04
    1c6a:	8b 83       	std	Y+3, r24	; 0x03
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <LCD_displayCharacter+0x388>
    1c74:	9c 83       	std	Y+4, r25	; 0x04
    1c76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c78:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	9e 83       	std	Y+6, r25	; 0x06
    1c80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c82:	8d 81       	ldd	r24, Y+5	; 0x05
    1c84:	9e 81       	ldd	r25, Y+6	; 0x06
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	69 f7       	brne	.-38     	; 0x1c64 <LCD_displayCharacter+0x37c>
    1c8a:	14 c0       	rjmp	.+40     	; 0x1cb4 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8e:	78 85       	ldd	r23, Y+8	; 0x08
    1c90:	89 85       	ldd	r24, Y+9	; 0x09
    1c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	9e 83       	std	Y+6, r25	; 0x06
    1c9e:	8d 83       	std	Y+5, r24	; 0x05
    1ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca4:	9a 83       	std	Y+2, r25	; 0x02
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <LCD_displayCharacter+0x3c4>
    1cb0:	9a 83       	std	Y+2, r25	; 0x02
    1cb2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1cb4:	e9 96       	adiw	r28, 0x39	; 57
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <LCD_displayString+0x6>
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	9a 83       	std	Y+2, r25	; 0x02
    1cd2:	89 83       	std	Y+1, r24	; 0x01
    1cd4:	0a c0       	rjmp	.+20     	; 0x1cea <LCD_displayString+0x24>


	while((*Str) != '\0')
	{
		LCD_displayCharacter(*Str);
    1cd6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cda:	80 81       	ld	r24, Z
    1cdc:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <LCD_displayCharacter>
		Str++;
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce4:	01 96       	adiw	r24, 0x01	; 1
    1ce6:	9a 83       	std	Y+2, r25	; 0x02
    1ce8:	89 83       	std	Y+1, r24	; 0x01
 */
void LCD_displayString(const char *Str)
{


	while((*Str) != '\0')
    1cea:	e9 81       	ldd	r30, Y+1	; 0x01
    1cec:	fa 81       	ldd	r31, Y+2	; 0x02
    1cee:	80 81       	ld	r24, Z
    1cf0:	88 23       	and	r24, r24
    1cf2:	89 f7       	brne	.-30     	; 0x1cd6 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}

}
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	00 d0       	rcall	.+0      	; 0x1d04 <LCD_moveCursor+0x6>
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <LCD_moveCursor+0x8>
    1d06:	0f 92       	push	r0
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	8a 83       	std	Y+2, r24	; 0x02
    1d0e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	3d 83       	std	Y+5, r19	; 0x05
    1d18:	2c 83       	std	Y+4, r18	; 0x04
    1d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1e:	81 30       	cpi	r24, 0x01	; 1
    1d20:	91 05       	cpc	r25, r1
    1d22:	c1 f0       	breq	.+48     	; 0x1d54 <LCD_moveCursor+0x56>
    1d24:	2c 81       	ldd	r18, Y+4	; 0x04
    1d26:	3d 81       	ldd	r19, Y+5	; 0x05
    1d28:	22 30       	cpi	r18, 0x02	; 2
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	2c f4       	brge	.+10     	; 0x1d38 <LCD_moveCursor+0x3a>
    1d2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d30:	9d 81       	ldd	r25, Y+5	; 0x05
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	61 f0       	breq	.+24     	; 0x1d4e <LCD_moveCursor+0x50>
    1d36:	19 c0       	rjmp	.+50     	; 0x1d6a <LCD_moveCursor+0x6c>
    1d38:	2c 81       	ldd	r18, Y+4	; 0x04
    1d3a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d3c:	22 30       	cpi	r18, 0x02	; 2
    1d3e:	31 05       	cpc	r19, r1
    1d40:	69 f0       	breq	.+26     	; 0x1d5c <LCD_moveCursor+0x5e>
    1d42:	8c 81       	ldd	r24, Y+4	; 0x04
    1d44:	9d 81       	ldd	r25, Y+5	; 0x05
    1d46:	83 30       	cpi	r24, 0x03	; 3
    1d48:	91 05       	cpc	r25, r1
    1d4a:	61 f0       	breq	.+24     	; 0x1d64 <LCD_moveCursor+0x66>
    1d4c:	0e c0       	rjmp	.+28     	; 0x1d6a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	89 83       	std	Y+1, r24	; 0x01
    1d52:	0b c0       	rjmp	.+22     	; 0x1d6a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	80 5c       	subi	r24, 0xC0	; 192
    1d58:	89 83       	std	Y+1, r24	; 0x01
    1d5a:	07 c0       	rjmp	.+14     	; 0x1d6a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	80 5f       	subi	r24, 0xF0	; 240
    1d60:	89 83       	std	Y+1, r24	; 0x01
    1d62:	03 c0       	rjmp	.+6      	; 0x1d6a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	80 5b       	subi	r24, 0xB0	; 176
    1d68:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	80 68       	ori	r24, 0x80	; 128
    1d6e:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_sendCommand>
}
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <LCD_displayStringRowColumn+0x6>
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <LCD_displayStringRowColumn+0x8>
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    1d90:	6a 83       	std	Y+2, r22	; 0x02
    1d92:	5c 83       	std	Y+4, r21	; 0x04
    1d94:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	6a 81       	ldd	r22, Y+2	; 0x02
    1d9a:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_displayString>
}
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62
    1dbc:	62 97       	sbiw	r28, 0x12	; 18
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	f8 94       	cli
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	cd bf       	out	0x3d, r28	; 61
    1dc8:	9a 8b       	std	Y+18, r25	; 0x12
    1dca:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1dcc:	89 89       	ldd	r24, Y+17	; 0x11
    1dce:	9a 89       	ldd	r25, Y+18	; 0x12
    1dd0:	9e 01       	movw	r18, r28
    1dd2:	2f 5f       	subi	r18, 0xFF	; 255
    1dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd6:	b9 01       	movw	r22, r18
    1dd8:	4a e0       	ldi	r20, 0x0A	; 10
    1dda:	50 e0       	ldi	r21, 0x00	; 0
    1ddc:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <itoa>
   LCD_displayString(buff); /* Display the string */
    1de0:	ce 01       	movw	r24, r28
    1de2:	01 96       	adiw	r24, 0x01	; 1
    1de4:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_displayString>
}
    1de8:	62 96       	adiw	r28, 0x12	; 18
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_sendCommand>
}
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <main>:
 */
uint8 count1;
UART_ConfigType UART_Configurations={BIT_8,DISABLED,STOP_BIT1,9600};
Timer1_ConfigType timer1_Configurations_CTC={0,7812,PRESCALER1024, COMPARE};
int main(void)
{
    1e0e:	0f 93       	push	r16
    1e10:	1f 93       	push	r17
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	ce 5e       	subi	r28, 0xEE	; 238
    1e1c:	d0 40       	sbci	r29, 0x00	; 0
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61

	SREG |= (1<<7);//enable the global intr
    1e28:	af e5       	ldi	r26, 0x5F	; 95
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	ef e5       	ldi	r30, 0x5F	; 95
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	80 68       	ori	r24, 0x80	; 128
    1e34:	8c 93       	st	X, r24
	uint8 num1[5]={0},num2[5]={0},verifed=0,command=0;
    1e36:	ce 01       	movw	r24, r28
    1e38:	8b 51       	subi	r24, 0x1B	; 27
    1e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3c:	25 e0       	ldi	r18, 0x05	; 5
    1e3e:	fc 01       	movw	r30, r24
    1e40:	df 01       	movw	r26, r30
    1e42:	82 2f       	mov	r24, r18
    1e44:	1d 92       	st	X+, r1
    1e46:	8a 95       	dec	r24
    1e48:	e9 f7       	brne	.-6      	; 0x1e44 <main+0x36>
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	86 51       	subi	r24, 0x16	; 22
    1e4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e50:	25 e0       	ldi	r18, 0x05	; 5
    1e52:	fc 01       	movw	r30, r24
    1e54:	df 01       	movw	r26, r30
    1e56:	82 2f       	mov	r24, r18
    1e58:	1d 92       	st	X+, r1
    1e5a:	8a 95       	dec	r24
    1e5c:	e9 f7       	brne	.-6      	; 0x1e58 <main+0x4a>
    1e5e:	fe 01       	movw	r30, r28
    1e60:	ec 51       	subi	r30, 0x1C	; 28
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	10 82       	st	Z, r1
    1e66:	fe 01       	movw	r30, r28
    1e68:	ed 51       	subi	r30, 0x1D	; 29
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	10 82       	st	Z, r1
	/*
	 * LCD &UART init and set call back
	 */
	LCD_init();
    1e6e:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <LCD_init>
	UART_init(&UART_Configurations);
    1e72:	8b e4       	ldi	r24, 0x4B	; 75
    1e74:	91 e0       	ldi	r25, 0x01	; 1
    1e76:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <UART_init>
	Timer1_setCallBack(timer_count_CTC);
    1e7a:	8a e6       	ldi	r24, 0x6A	; 106
    1e7c:	9c e1       	ldi	r25, 0x1C	; 28
    1e7e:	0e 94 30 1d 	call	0x3a60	; 0x3a60 <Timer1_setCallBack>
    1e82:	48 c2       	rjmp	.+1168   	; 0x2314 <main+0x506>

	while (verifed == 0)
	{
		LCD_clearScreen();
    1e84:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_clearScreen>
		LCD_displayString("Plz enter pass: ");
    1e88:	80 e6       	ldi	r24, 0x60	; 96
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_displayString>
		LCD_moveCursor(1,0);
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	60 e0       	ldi	r22, 0x00	; 0
    1e94:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_moveCursor>
		creat_password(num1);//Receive the first pass
    1e98:	ce 01       	movw	r24, r28
    1e9a:	8b 51       	subi	r24, 0x1B	; 27
    1e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9e:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <creat_password>
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	e3 52       	subi	r30, 0x23	; 35
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	a8 e4       	ldi	r26, 0x48	; 72
    1eae:	b2 e4       	ldi	r27, 0x42	; 66
    1eb0:	80 83       	st	Z, r24
    1eb2:	91 83       	std	Z+1, r25	; 0x01
    1eb4:	a2 83       	std	Z+2, r26	; 0x02
    1eb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb8:	8e 01       	movw	r16, r28
    1eba:	07 52       	subi	r16, 0x27	; 39
    1ebc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	e3 52       	subi	r30, 0x23	; 35
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	60 81       	ld	r22, Z
    1ec6:	71 81       	ldd	r23, Z+1	; 0x01
    1ec8:	82 81       	ldd	r24, Z+2	; 0x02
    1eca:	93 81       	ldd	r25, Z+3	; 0x03
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	4a ef       	ldi	r20, 0xFA	; 250
    1ed2:	54 e4       	ldi	r21, 0x44	; 68
    1ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	f8 01       	movw	r30, r16
    1ede:	80 83       	st	Z, r24
    1ee0:	91 83       	std	Z+1, r25	; 0x01
    1ee2:	a2 83       	std	Z+2, r26	; 0x02
    1ee4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	e7 52       	subi	r30, 0x27	; 39
    1eea:	ff 4f       	sbci	r31, 0xFF	; 255
    1eec:	60 81       	ld	r22, Z
    1eee:	71 81       	ldd	r23, Z+1	; 0x01
    1ef0:	82 81       	ldd	r24, Z+2	; 0x02
    1ef2:	93 81       	ldd	r25, Z+3	; 0x03
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e8       	ldi	r20, 0x80	; 128
    1efa:	5f e3       	ldi	r21, 0x3F	; 63
    1efc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f00:	88 23       	and	r24, r24
    1f02:	44 f4       	brge	.+16     	; 0x1f14 <main+0x106>
		__ticks = 1;
    1f04:	fe 01       	movw	r30, r28
    1f06:	e9 52       	subi	r30, 0x29	; 41
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	91 83       	std	Z+1, r25	; 0x01
    1f10:	80 83       	st	Z, r24
    1f12:	64 c0       	rjmp	.+200    	; 0x1fdc <main+0x1ce>
	else if (__tmp > 65535)
    1f14:	fe 01       	movw	r30, r28
    1f16:	e7 52       	subi	r30, 0x27	; 39
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	60 81       	ld	r22, Z
    1f1c:	71 81       	ldd	r23, Z+1	; 0x01
    1f1e:	82 81       	ldd	r24, Z+2	; 0x02
    1f20:	93 81       	ldd	r25, Z+3	; 0x03
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	3f ef       	ldi	r19, 0xFF	; 255
    1f26:	4f e7       	ldi	r20, 0x7F	; 127
    1f28:	57 e4       	ldi	r21, 0x47	; 71
    1f2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f2e:	18 16       	cp	r1, r24
    1f30:	0c f0       	brlt	.+2      	; 0x1f34 <main+0x126>
    1f32:	43 c0       	rjmp	.+134    	; 0x1fba <main+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f34:	fe 01       	movw	r30, r28
    1f36:	e3 52       	subi	r30, 0x23	; 35
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	60 81       	ld	r22, Z
    1f3c:	71 81       	ldd	r23, Z+1	; 0x01
    1f3e:	82 81       	ldd	r24, Z+2	; 0x02
    1f40:	93 81       	ldd	r25, Z+3	; 0x03
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	40 e2       	ldi	r20, 0x20	; 32
    1f48:	51 e4       	ldi	r21, 0x41	; 65
    1f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	8e 01       	movw	r16, r28
    1f54:	09 52       	subi	r16, 0x29	; 41
    1f56:	1f 4f       	sbci	r17, 0xFF	; 255
    1f58:	bc 01       	movw	r22, r24
    1f5a:	cd 01       	movw	r24, r26
    1f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	f8 01       	movw	r30, r16
    1f66:	91 83       	std	Z+1, r25	; 0x01
    1f68:	80 83       	st	Z, r24
    1f6a:	1f c0       	rjmp	.+62     	; 0x1faa <main+0x19c>
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	eb 52       	subi	r30, 0x2B	; 43
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	88 ec       	ldi	r24, 0xC8	; 200
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	91 83       	std	Z+1, r25	; 0x01
    1f78:	80 83       	st	Z, r24
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	eb 52       	subi	r30, 0x2B	; 43
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	80 81       	ld	r24, Z
    1f82:	91 81       	ldd	r25, Z+1	; 0x01
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <main+0x176>
    1f88:	fe 01       	movw	r30, r28
    1f8a:	eb 52       	subi	r30, 0x2B	; 43
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	91 83       	std	Z+1, r25	; 0x01
    1f90:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f92:	de 01       	movw	r26, r28
    1f94:	a9 52       	subi	r26, 0x29	; 41
    1f96:	bf 4f       	sbci	r27, 0xFF	; 255
    1f98:	fe 01       	movw	r30, r28
    1f9a:	e9 52       	subi	r30, 0x29	; 41
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	80 81       	ld	r24, Z
    1fa0:	91 81       	ldd	r25, Z+1	; 0x01
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	11 96       	adiw	r26, 0x01	; 1
    1fa6:	9c 93       	st	X, r25
    1fa8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1faa:	fe 01       	movw	r30, r28
    1fac:	e9 52       	subi	r30, 0x29	; 41
    1fae:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb0:	80 81       	ld	r24, Z
    1fb2:	91 81       	ldd	r25, Z+1	; 0x01
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	d1 f6       	brne	.-76     	; 0x1f6c <main+0x15e>
    1fb8:	27 c0       	rjmp	.+78     	; 0x2008 <main+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fba:	8e 01       	movw	r16, r28
    1fbc:	09 52       	subi	r16, 0x29	; 41
    1fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	e7 52       	subi	r30, 0x27	; 39
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	60 81       	ld	r22, Z
    1fc8:	71 81       	ldd	r23, Z+1	; 0x01
    1fca:	82 81       	ldd	r24, Z+2	; 0x02
    1fcc:	93 81       	ldd	r25, Z+3	; 0x03
    1fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	f8 01       	movw	r30, r16
    1fd8:	91 83       	std	Z+1, r25	; 0x01
    1fda:	80 83       	st	Z, r24
    1fdc:	de 01       	movw	r26, r28
    1fde:	ad 52       	subi	r26, 0x2D	; 45
    1fe0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e9 52       	subi	r30, 0x29	; 41
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	80 81       	ld	r24, Z
    1fea:	91 81       	ldd	r25, Z+1	; 0x01
    1fec:	8d 93       	st	X+, r24
    1fee:	9c 93       	st	X, r25
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	ed 52       	subi	r30, 0x2D	; 45
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	80 81       	ld	r24, Z
    1ff8:	91 81       	ldd	r25, Z+1	; 0x01
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	f1 f7       	brne	.-4      	; 0x1ffa <main+0x1ec>
    1ffe:	fe 01       	movw	r30, r28
    2000:	ed 52       	subi	r30, 0x2D	; 45
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	80 83       	st	Z, r24
		_delay_ms(50);
		send_pass(num1);//send the first pass
    2008:	ce 01       	movw	r24, r28
    200a:	8b 51       	subi	r24, 0x1B	; 27
    200c:	9f 4f       	sbci	r25, 0xFF	; 255
    200e:	0e 94 89 1b 	call	0x3712	; 0x3712 <send_pass>


		LCD_clearScreen();
    2012:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_clearScreen>
		LCD_displayString("Enter same pass: ");
    2016:	81 e7       	ldi	r24, 0x71	; 113
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_displayString>
		LCD_moveCursor(1,0);
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	60 e0       	ldi	r22, 0x00	; 0
    2022:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_moveCursor>

		creat_password(num2);//Receive the 2nd pass
    2026:	ce 01       	movw	r24, r28
    2028:	86 51       	subi	r24, 0x16	; 22
    202a:	9f 4f       	sbci	r25, 0xFF	; 255
    202c:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <creat_password>
    2030:	fe 01       	movw	r30, r28
    2032:	e1 53       	subi	r30, 0x31	; 49
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	a8 e4       	ldi	r26, 0x48	; 72
    203c:	b2 e4       	ldi	r27, 0x42	; 66
    203e:	80 83       	st	Z, r24
    2040:	91 83       	std	Z+1, r25	; 0x01
    2042:	a2 83       	std	Z+2, r26	; 0x02
    2044:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2046:	8e 01       	movw	r16, r28
    2048:	05 53       	subi	r16, 0x35	; 53
    204a:	1f 4f       	sbci	r17, 0xFF	; 255
    204c:	fe 01       	movw	r30, r28
    204e:	e1 53       	subi	r30, 0x31	; 49
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	60 81       	ld	r22, Z
    2054:	71 81       	ldd	r23, Z+1	; 0x01
    2056:	82 81       	ldd	r24, Z+2	; 0x02
    2058:	93 81       	ldd	r25, Z+3	; 0x03
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	4a ef       	ldi	r20, 0xFA	; 250
    2060:	54 e4       	ldi	r21, 0x44	; 68
    2062:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	f8 01       	movw	r30, r16
    206c:	80 83       	st	Z, r24
    206e:	91 83       	std	Z+1, r25	; 0x01
    2070:	a2 83       	std	Z+2, r26	; 0x02
    2072:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2074:	fe 01       	movw	r30, r28
    2076:	e5 53       	subi	r30, 0x35	; 53
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	60 81       	ld	r22, Z
    207c:	71 81       	ldd	r23, Z+1	; 0x01
    207e:	82 81       	ldd	r24, Z+2	; 0x02
    2080:	93 81       	ldd	r25, Z+3	; 0x03
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e8       	ldi	r20, 0x80	; 128
    2088:	5f e3       	ldi	r21, 0x3F	; 63
    208a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    208e:	88 23       	and	r24, r24
    2090:	44 f4       	brge	.+16     	; 0x20a2 <main+0x294>
		__ticks = 1;
    2092:	fe 01       	movw	r30, r28
    2094:	e7 53       	subi	r30, 0x37	; 55
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	81 e0       	ldi	r24, 0x01	; 1
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	91 83       	std	Z+1, r25	; 0x01
    209e:	80 83       	st	Z, r24
    20a0:	64 c0       	rjmp	.+200    	; 0x216a <main+0x35c>
	else if (__tmp > 65535)
    20a2:	fe 01       	movw	r30, r28
    20a4:	e5 53       	subi	r30, 0x35	; 53
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	60 81       	ld	r22, Z
    20aa:	71 81       	ldd	r23, Z+1	; 0x01
    20ac:	82 81       	ldd	r24, Z+2	; 0x02
    20ae:	93 81       	ldd	r25, Z+3	; 0x03
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	3f ef       	ldi	r19, 0xFF	; 255
    20b4:	4f e7       	ldi	r20, 0x7F	; 127
    20b6:	57 e4       	ldi	r21, 0x47	; 71
    20b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20bc:	18 16       	cp	r1, r24
    20be:	0c f0       	brlt	.+2      	; 0x20c2 <main+0x2b4>
    20c0:	43 c0       	rjmp	.+134    	; 0x2148 <main+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c2:	fe 01       	movw	r30, r28
    20c4:	e1 53       	subi	r30, 0x31	; 49
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	60 81       	ld	r22, Z
    20ca:	71 81       	ldd	r23, Z+1	; 0x01
    20cc:	82 81       	ldd	r24, Z+2	; 0x02
    20ce:	93 81       	ldd	r25, Z+3	; 0x03
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e2       	ldi	r20, 0x20	; 32
    20d6:	51 e4       	ldi	r21, 0x41	; 65
    20d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	8e 01       	movw	r16, r28
    20e2:	07 53       	subi	r16, 0x37	; 55
    20e4:	1f 4f       	sbci	r17, 0xFF	; 255
    20e6:	bc 01       	movw	r22, r24
    20e8:	cd 01       	movw	r24, r26
    20ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	f8 01       	movw	r30, r16
    20f4:	91 83       	std	Z+1, r25	; 0x01
    20f6:	80 83       	st	Z, r24
    20f8:	1f c0       	rjmp	.+62     	; 0x2138 <main+0x32a>
    20fa:	fe 01       	movw	r30, r28
    20fc:	e9 53       	subi	r30, 0x39	; 57
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	88 ec       	ldi	r24, 0xC8	; 200
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	91 83       	std	Z+1, r25	; 0x01
    2106:	80 83       	st	Z, r24
    2108:	fe 01       	movw	r30, r28
    210a:	e9 53       	subi	r30, 0x39	; 57
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	80 81       	ld	r24, Z
    2110:	91 81       	ldd	r25, Z+1	; 0x01
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	f1 f7       	brne	.-4      	; 0x2112 <main+0x304>
    2116:	fe 01       	movw	r30, r28
    2118:	e9 53       	subi	r30, 0x39	; 57
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	91 83       	std	Z+1, r25	; 0x01
    211e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2120:	de 01       	movw	r26, r28
    2122:	a7 53       	subi	r26, 0x37	; 55
    2124:	bf 4f       	sbci	r27, 0xFF	; 255
    2126:	fe 01       	movw	r30, r28
    2128:	e7 53       	subi	r30, 0x37	; 55
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	80 81       	ld	r24, Z
    212e:	91 81       	ldd	r25, Z+1	; 0x01
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	11 96       	adiw	r26, 0x01	; 1
    2134:	9c 93       	st	X, r25
    2136:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2138:	fe 01       	movw	r30, r28
    213a:	e7 53       	subi	r30, 0x37	; 55
    213c:	ff 4f       	sbci	r31, 0xFF	; 255
    213e:	80 81       	ld	r24, Z
    2140:	91 81       	ldd	r25, Z+1	; 0x01
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	d1 f6       	brne	.-76     	; 0x20fa <main+0x2ec>
    2146:	27 c0       	rjmp	.+78     	; 0x2196 <main+0x388>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2148:	8e 01       	movw	r16, r28
    214a:	07 53       	subi	r16, 0x37	; 55
    214c:	1f 4f       	sbci	r17, 0xFF	; 255
    214e:	fe 01       	movw	r30, r28
    2150:	e5 53       	subi	r30, 0x35	; 53
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	60 81       	ld	r22, Z
    2156:	71 81       	ldd	r23, Z+1	; 0x01
    2158:	82 81       	ldd	r24, Z+2	; 0x02
    215a:	93 81       	ldd	r25, Z+3	; 0x03
    215c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	f8 01       	movw	r30, r16
    2166:	91 83       	std	Z+1, r25	; 0x01
    2168:	80 83       	st	Z, r24
    216a:	de 01       	movw	r26, r28
    216c:	ab 53       	subi	r26, 0x3B	; 59
    216e:	bf 4f       	sbci	r27, 0xFF	; 255
    2170:	fe 01       	movw	r30, r28
    2172:	e7 53       	subi	r30, 0x37	; 55
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	80 81       	ld	r24, Z
    2178:	91 81       	ldd	r25, Z+1	; 0x01
    217a:	8d 93       	st	X+, r24
    217c:	9c 93       	st	X, r25
    217e:	fe 01       	movw	r30, r28
    2180:	eb 53       	subi	r30, 0x3B	; 59
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	80 81       	ld	r24, Z
    2186:	91 81       	ldd	r25, Z+1	; 0x01
    2188:	01 97       	sbiw	r24, 0x01	; 1
    218a:	f1 f7       	brne	.-4      	; 0x2188 <main+0x37a>
    218c:	fe 01       	movw	r30, r28
    218e:	eb 53       	subi	r30, 0x3B	; 59
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	91 83       	std	Z+1, r25	; 0x01
    2194:	80 83       	st	Z, r24
		_delay_ms(50);
		send_pass(num2);//send the 2nd pass
    2196:	ce 01       	movw	r24, r28
    2198:	86 51       	subi	r24, 0x16	; 22
    219a:	9f 4f       	sbci	r25, 0xFF	; 255
    219c:	0e 94 89 1b 	call	0x3712	; 0x3712 <send_pass>

		verifed = UART_recieveByte();//if the 2 passwords matched the verifed=1 if not verified=0
    21a0:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <UART_recieveByte>
    21a4:	fe 01       	movw	r30, r28
    21a6:	ec 51       	subi	r30, 0x1C	; 28
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	80 83       	st	Z, r24
    21ac:	fe 01       	movw	r30, r28
    21ae:	ef 53       	subi	r30, 0x3F	; 63
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	a8 e4       	ldi	r26, 0x48	; 72
    21b8:	b2 e4       	ldi	r27, 0x42	; 66
    21ba:	80 83       	st	Z, r24
    21bc:	91 83       	std	Z+1, r25	; 0x01
    21be:	a2 83       	std	Z+2, r26	; 0x02
    21c0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c2:	8e 01       	movw	r16, r28
    21c4:	03 54       	subi	r16, 0x43	; 67
    21c6:	1f 4f       	sbci	r17, 0xFF	; 255
    21c8:	fe 01       	movw	r30, r28
    21ca:	ef 53       	subi	r30, 0x3F	; 63
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	60 81       	ld	r22, Z
    21d0:	71 81       	ldd	r23, Z+1	; 0x01
    21d2:	82 81       	ldd	r24, Z+2	; 0x02
    21d4:	93 81       	ldd	r25, Z+3	; 0x03
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	4a ef       	ldi	r20, 0xFA	; 250
    21dc:	54 e4       	ldi	r21, 0x44	; 68
    21de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	f8 01       	movw	r30, r16
    21e8:	80 83       	st	Z, r24
    21ea:	91 83       	std	Z+1, r25	; 0x01
    21ec:	a2 83       	std	Z+2, r26	; 0x02
    21ee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21f0:	fe 01       	movw	r30, r28
    21f2:	e3 54       	subi	r30, 0x43	; 67
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	60 81       	ld	r22, Z
    21f8:	71 81       	ldd	r23, Z+1	; 0x01
    21fa:	82 81       	ldd	r24, Z+2	; 0x02
    21fc:	93 81       	ldd	r25, Z+3	; 0x03
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e8       	ldi	r20, 0x80	; 128
    2204:	5f e3       	ldi	r21, 0x3F	; 63
    2206:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    220a:	88 23       	and	r24, r24
    220c:	44 f4       	brge	.+16     	; 0x221e <main+0x410>
		__ticks = 1;
    220e:	fe 01       	movw	r30, r28
    2210:	e5 54       	subi	r30, 0x45	; 69
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	91 83       	std	Z+1, r25	; 0x01
    221a:	80 83       	st	Z, r24
    221c:	64 c0       	rjmp	.+200    	; 0x22e6 <main+0x4d8>
	else if (__tmp > 65535)
    221e:	fe 01       	movw	r30, r28
    2220:	e3 54       	subi	r30, 0x43	; 67
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	60 81       	ld	r22, Z
    2226:	71 81       	ldd	r23, Z+1	; 0x01
    2228:	82 81       	ldd	r24, Z+2	; 0x02
    222a:	93 81       	ldd	r25, Z+3	; 0x03
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	3f ef       	ldi	r19, 0xFF	; 255
    2230:	4f e7       	ldi	r20, 0x7F	; 127
    2232:	57 e4       	ldi	r21, 0x47	; 71
    2234:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2238:	18 16       	cp	r1, r24
    223a:	0c f0       	brlt	.+2      	; 0x223e <main+0x430>
    223c:	43 c0       	rjmp	.+134    	; 0x22c4 <main+0x4b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    223e:	fe 01       	movw	r30, r28
    2240:	ef 53       	subi	r30, 0x3F	; 63
    2242:	ff 4f       	sbci	r31, 0xFF	; 255
    2244:	60 81       	ld	r22, Z
    2246:	71 81       	ldd	r23, Z+1	; 0x01
    2248:	82 81       	ldd	r24, Z+2	; 0x02
    224a:	93 81       	ldd	r25, Z+3	; 0x03
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e2       	ldi	r20, 0x20	; 32
    2252:	51 e4       	ldi	r21, 0x41	; 65
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	8e 01       	movw	r16, r28
    225e:	05 54       	subi	r16, 0x45	; 69
    2260:	1f 4f       	sbci	r17, 0xFF	; 255
    2262:	bc 01       	movw	r22, r24
    2264:	cd 01       	movw	r24, r26
    2266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	f8 01       	movw	r30, r16
    2270:	91 83       	std	Z+1, r25	; 0x01
    2272:	80 83       	st	Z, r24
    2274:	1f c0       	rjmp	.+62     	; 0x22b4 <main+0x4a6>
    2276:	fe 01       	movw	r30, r28
    2278:	e7 54       	subi	r30, 0x47	; 71
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	88 ec       	ldi	r24, 0xC8	; 200
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	91 83       	std	Z+1, r25	; 0x01
    2282:	80 83       	st	Z, r24
    2284:	fe 01       	movw	r30, r28
    2286:	e7 54       	subi	r30, 0x47	; 71
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	80 81       	ld	r24, Z
    228c:	91 81       	ldd	r25, Z+1	; 0x01
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <main+0x480>
    2292:	fe 01       	movw	r30, r28
    2294:	e7 54       	subi	r30, 0x47	; 71
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229c:	de 01       	movw	r26, r28
    229e:	a5 54       	subi	r26, 0x45	; 69
    22a0:	bf 4f       	sbci	r27, 0xFF	; 255
    22a2:	fe 01       	movw	r30, r28
    22a4:	e5 54       	subi	r30, 0x45	; 69
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	80 81       	ld	r24, Z
    22aa:	91 81       	ldd	r25, Z+1	; 0x01
    22ac:	01 97       	sbiw	r24, 0x01	; 1
    22ae:	11 96       	adiw	r26, 0x01	; 1
    22b0:	9c 93       	st	X, r25
    22b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b4:	fe 01       	movw	r30, r28
    22b6:	e5 54       	subi	r30, 0x45	; 69
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	80 81       	ld	r24, Z
    22bc:	91 81       	ldd	r25, Z+1	; 0x01
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	d1 f6       	brne	.-76     	; 0x2276 <main+0x468>
    22c2:	28 c0       	rjmp	.+80     	; 0x2314 <main+0x506>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c4:	8e 01       	movw	r16, r28
    22c6:	05 54       	subi	r16, 0x45	; 69
    22c8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ca:	fe 01       	movw	r30, r28
    22cc:	e3 54       	subi	r30, 0x43	; 67
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	60 81       	ld	r22, Z
    22d2:	71 81       	ldd	r23, Z+1	; 0x01
    22d4:	82 81       	ldd	r24, Z+2	; 0x02
    22d6:	93 81       	ldd	r25, Z+3	; 0x03
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	f8 01       	movw	r30, r16
    22e2:	91 83       	std	Z+1, r25	; 0x01
    22e4:	80 83       	st	Z, r24
    22e6:	de 01       	movw	r26, r28
    22e8:	a9 54       	subi	r26, 0x49	; 73
    22ea:	bf 4f       	sbci	r27, 0xFF	; 255
    22ec:	fe 01       	movw	r30, r28
    22ee:	e5 54       	subi	r30, 0x45	; 69
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	80 81       	ld	r24, Z
    22f4:	91 81       	ldd	r25, Z+1	; 0x01
    22f6:	11 96       	adiw	r26, 0x01	; 1
    22f8:	9c 93       	st	X, r25
    22fa:	8e 93       	st	-X, r24
    22fc:	fe 01       	movw	r30, r28
    22fe:	e9 54       	subi	r30, 0x49	; 73
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	80 81       	ld	r24, Z
    2304:	91 81       	ldd	r25, Z+1	; 0x01
    2306:	01 97       	sbiw	r24, 0x01	; 1
    2308:	f1 f7       	brne	.-4      	; 0x2306 <main+0x4f8>
    230a:	fe 01       	movw	r30, r28
    230c:	e9 54       	subi	r30, 0x49	; 73
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	91 83       	std	Z+1, r25	; 0x01
    2312:	80 83       	st	Z, r24
	 */
	LCD_init();
	UART_init(&UART_Configurations);
	Timer1_setCallBack(timer_count_CTC);

	while (verifed == 0)
    2314:	fe 01       	movw	r30, r28
    2316:	ec 51       	subi	r30, 0x1C	; 28
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	80 81       	ld	r24, Z
    231c:	88 23       	and	r24, r24
    231e:	09 f4       	brne	.+2      	; 0x2322 <main+0x514>
    2320:	b1 cd       	rjmp	.-1182   	; 0x1e84 <main+0x76>
    2322:	fe 01       	movw	r30, r28
    2324:	ed 54       	subi	r30, 0x4D	; 77
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	aa ef       	ldi	r26, 0xFA	; 250
    232e:	b3 e4       	ldi	r27, 0x43	; 67
    2330:	80 83       	st	Z, r24
    2332:	91 83       	std	Z+1, r25	; 0x01
    2334:	a2 83       	std	Z+2, r26	; 0x02
    2336:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2338:	8e 01       	movw	r16, r28
    233a:	01 55       	subi	r16, 0x51	; 81
    233c:	1f 4f       	sbci	r17, 0xFF	; 255
    233e:	fe 01       	movw	r30, r28
    2340:	ed 54       	subi	r30, 0x4D	; 77
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	60 81       	ld	r22, Z
    2346:	71 81       	ldd	r23, Z+1	; 0x01
    2348:	82 81       	ldd	r24, Z+2	; 0x02
    234a:	93 81       	ldd	r25, Z+3	; 0x03
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	4a ef       	ldi	r20, 0xFA	; 250
    2352:	54 e4       	ldi	r21, 0x44	; 68
    2354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	f8 01       	movw	r30, r16
    235e:	80 83       	st	Z, r24
    2360:	91 83       	std	Z+1, r25	; 0x01
    2362:	a2 83       	std	Z+2, r26	; 0x02
    2364:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2366:	fe 01       	movw	r30, r28
    2368:	e1 55       	subi	r30, 0x51	; 81
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	60 81       	ld	r22, Z
    236e:	71 81       	ldd	r23, Z+1	; 0x01
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e8       	ldi	r20, 0x80	; 128
    237a:	5f e3       	ldi	r21, 0x3F	; 63
    237c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2380:	88 23       	and	r24, r24
    2382:	44 f4       	brge	.+16     	; 0x2394 <main+0x586>
		__ticks = 1;
    2384:	fe 01       	movw	r30, r28
    2386:	e3 55       	subi	r30, 0x53	; 83
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	91 83       	std	Z+1, r25	; 0x01
    2390:	80 83       	st	Z, r24
    2392:	64 c0       	rjmp	.+200    	; 0x245c <main+0x64e>
	else if (__tmp > 65535)
    2394:	fe 01       	movw	r30, r28
    2396:	e1 55       	subi	r30, 0x51	; 81
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	60 81       	ld	r22, Z
    239c:	71 81       	ldd	r23, Z+1	; 0x01
    239e:	82 81       	ldd	r24, Z+2	; 0x02
    23a0:	93 81       	ldd	r25, Z+3	; 0x03
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	3f ef       	ldi	r19, 0xFF	; 255
    23a6:	4f e7       	ldi	r20, 0x7F	; 127
    23a8:	57 e4       	ldi	r21, 0x47	; 71
    23aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ae:	18 16       	cp	r1, r24
    23b0:	0c f0       	brlt	.+2      	; 0x23b4 <main+0x5a6>
    23b2:	43 c0       	rjmp	.+134    	; 0x243a <main+0x62c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b4:	fe 01       	movw	r30, r28
    23b6:	ed 54       	subi	r30, 0x4D	; 77
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	60 81       	ld	r22, Z
    23bc:	71 81       	ldd	r23, Z+1	; 0x01
    23be:	82 81       	ldd	r24, Z+2	; 0x02
    23c0:	93 81       	ldd	r25, Z+3	; 0x03
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e2       	ldi	r20, 0x20	; 32
    23c8:	51 e4       	ldi	r21, 0x41	; 65
    23ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	8e 01       	movw	r16, r28
    23d4:	03 55       	subi	r16, 0x53	; 83
    23d6:	1f 4f       	sbci	r17, 0xFF	; 255
    23d8:	bc 01       	movw	r22, r24
    23da:	cd 01       	movw	r24, r26
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	f8 01       	movw	r30, r16
    23e6:	91 83       	std	Z+1, r25	; 0x01
    23e8:	80 83       	st	Z, r24
    23ea:	1f c0       	rjmp	.+62     	; 0x242a <main+0x61c>
    23ec:	fe 01       	movw	r30, r28
    23ee:	e5 55       	subi	r30, 0x55	; 85
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	88 ec       	ldi	r24, 0xC8	; 200
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	91 83       	std	Z+1, r25	; 0x01
    23f8:	80 83       	st	Z, r24
    23fa:	fe 01       	movw	r30, r28
    23fc:	e5 55       	subi	r30, 0x55	; 85
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	80 81       	ld	r24, Z
    2402:	91 81       	ldd	r25, Z+1	; 0x01
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <main+0x5f6>
    2408:	fe 01       	movw	r30, r28
    240a:	e5 55       	subi	r30, 0x55	; 85
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	91 83       	std	Z+1, r25	; 0x01
    2410:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2412:	de 01       	movw	r26, r28
    2414:	a3 55       	subi	r26, 0x53	; 83
    2416:	bf 4f       	sbci	r27, 0xFF	; 255
    2418:	fe 01       	movw	r30, r28
    241a:	e3 55       	subi	r30, 0x53	; 83
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	80 81       	ld	r24, Z
    2420:	91 81       	ldd	r25, Z+1	; 0x01
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	11 96       	adiw	r26, 0x01	; 1
    2426:	9c 93       	st	X, r25
    2428:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242a:	fe 01       	movw	r30, r28
    242c:	e3 55       	subi	r30, 0x53	; 83
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	80 81       	ld	r24, Z
    2432:	91 81       	ldd	r25, Z+1	; 0x01
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	d1 f6       	brne	.-76     	; 0x23ec <main+0x5de>
    2438:	27 c0       	rjmp	.+78     	; 0x2488 <main+0x67a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243a:	8e 01       	movw	r16, r28
    243c:	03 55       	subi	r16, 0x53	; 83
    243e:	1f 4f       	sbci	r17, 0xFF	; 255
    2440:	fe 01       	movw	r30, r28
    2442:	e1 55       	subi	r30, 0x51	; 81
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	60 81       	ld	r22, Z
    2448:	71 81       	ldd	r23, Z+1	; 0x01
    244a:	82 81       	ldd	r24, Z+2	; 0x02
    244c:	93 81       	ldd	r25, Z+3	; 0x03
    244e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	f8 01       	movw	r30, r16
    2458:	91 83       	std	Z+1, r25	; 0x01
    245a:	80 83       	st	Z, r24
    245c:	de 01       	movw	r26, r28
    245e:	a7 55       	subi	r26, 0x57	; 87
    2460:	bf 4f       	sbci	r27, 0xFF	; 255
    2462:	fe 01       	movw	r30, r28
    2464:	e3 55       	subi	r30, 0x53	; 83
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	80 81       	ld	r24, Z
    246a:	91 81       	ldd	r25, Z+1	; 0x01
    246c:	8d 93       	st	X+, r24
    246e:	9c 93       	st	X, r25
    2470:	fe 01       	movw	r30, r28
    2472:	e7 55       	subi	r30, 0x57	; 87
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	80 81       	ld	r24, Z
    2478:	91 81       	ldd	r25, Z+1	; 0x01
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	f1 f7       	brne	.-4      	; 0x247a <main+0x66c>
    247e:	fe 01       	movw	r30, r28
    2480:	e7 55       	subi	r30, 0x57	; 87
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	91 83       	std	Z+1, r25	; 0x01
    2486:	80 83       	st	Z, r24
	{
		/*
		 * The LCD will always display the main system option:
		 *
		 */
		main_options();
    2488:	0e 94 24 1c 	call	0x3848	; 0x3848 <main_options>

		command = KEYPAD_getPressedKey(); //takes the command form the keypad
    248c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <KEYPAD_getPressedKey>
    2490:	fe 01       	movw	r30, r28
    2492:	ed 51       	subi	r30, 0x1D	; 29
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	80 83       	st	Z, r24
    2498:	fe 01       	movw	r30, r28
    249a:	eb 55       	subi	r30, 0x5B	; 91
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	a8 e4       	ldi	r26, 0x48	; 72
    24a4:	b2 e4       	ldi	r27, 0x42	; 66
    24a6:	80 83       	st	Z, r24
    24a8:	91 83       	std	Z+1, r25	; 0x01
    24aa:	a2 83       	std	Z+2, r26	; 0x02
    24ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ae:	8e 01       	movw	r16, r28
    24b0:	0f 55       	subi	r16, 0x5F	; 95
    24b2:	1f 4f       	sbci	r17, 0xFF	; 255
    24b4:	fe 01       	movw	r30, r28
    24b6:	eb 55       	subi	r30, 0x5B	; 91
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	60 81       	ld	r22, Z
    24bc:	71 81       	ldd	r23, Z+1	; 0x01
    24be:	82 81       	ldd	r24, Z+2	; 0x02
    24c0:	93 81       	ldd	r25, Z+3	; 0x03
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	4a ef       	ldi	r20, 0xFA	; 250
    24c8:	54 e4       	ldi	r21, 0x44	; 68
    24ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	f8 01       	movw	r30, r16
    24d4:	80 83       	st	Z, r24
    24d6:	91 83       	std	Z+1, r25	; 0x01
    24d8:	a2 83       	std	Z+2, r26	; 0x02
    24da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24dc:	fe 01       	movw	r30, r28
    24de:	ef 55       	subi	r30, 0x5F	; 95
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	60 81       	ld	r22, Z
    24e4:	71 81       	ldd	r23, Z+1	; 0x01
    24e6:	82 81       	ldd	r24, Z+2	; 0x02
    24e8:	93 81       	ldd	r25, Z+3	; 0x03
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e8       	ldi	r20, 0x80	; 128
    24f0:	5f e3       	ldi	r21, 0x3F	; 63
    24f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24f6:	88 23       	and	r24, r24
    24f8:	44 f4       	brge	.+16     	; 0x250a <main+0x6fc>
		__ticks = 1;
    24fa:	fe 01       	movw	r30, r28
    24fc:	e1 56       	subi	r30, 0x61	; 97
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	91 83       	std	Z+1, r25	; 0x01
    2506:	80 83       	st	Z, r24
    2508:	64 c0       	rjmp	.+200    	; 0x25d2 <main+0x7c4>
	else if (__tmp > 65535)
    250a:	fe 01       	movw	r30, r28
    250c:	ef 55       	subi	r30, 0x5F	; 95
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	60 81       	ld	r22, Z
    2512:	71 81       	ldd	r23, Z+1	; 0x01
    2514:	82 81       	ldd	r24, Z+2	; 0x02
    2516:	93 81       	ldd	r25, Z+3	; 0x03
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	3f ef       	ldi	r19, 0xFF	; 255
    251c:	4f e7       	ldi	r20, 0x7F	; 127
    251e:	57 e4       	ldi	r21, 0x47	; 71
    2520:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2524:	18 16       	cp	r1, r24
    2526:	0c f0       	brlt	.+2      	; 0x252a <main+0x71c>
    2528:	43 c0       	rjmp	.+134    	; 0x25b0 <main+0x7a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252a:	fe 01       	movw	r30, r28
    252c:	eb 55       	subi	r30, 0x5B	; 91
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	60 81       	ld	r22, Z
    2532:	71 81       	ldd	r23, Z+1	; 0x01
    2534:	82 81       	ldd	r24, Z+2	; 0x02
    2536:	93 81       	ldd	r25, Z+3	; 0x03
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 e2       	ldi	r20, 0x20	; 32
    253e:	51 e4       	ldi	r21, 0x41	; 65
    2540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	8e 01       	movw	r16, r28
    254a:	01 56       	subi	r16, 0x61	; 97
    254c:	1f 4f       	sbci	r17, 0xFF	; 255
    254e:	bc 01       	movw	r22, r24
    2550:	cd 01       	movw	r24, r26
    2552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	f8 01       	movw	r30, r16
    255c:	91 83       	std	Z+1, r25	; 0x01
    255e:	80 83       	st	Z, r24
    2560:	1f c0       	rjmp	.+62     	; 0x25a0 <main+0x792>
    2562:	fe 01       	movw	r30, r28
    2564:	e3 56       	subi	r30, 0x63	; 99
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	88 ec       	ldi	r24, 0xC8	; 200
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	91 83       	std	Z+1, r25	; 0x01
    256e:	80 83       	st	Z, r24
    2570:	fe 01       	movw	r30, r28
    2572:	e3 56       	subi	r30, 0x63	; 99
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	80 81       	ld	r24, Z
    2578:	91 81       	ldd	r25, Z+1	; 0x01
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <main+0x76c>
    257e:	fe 01       	movw	r30, r28
    2580:	e3 56       	subi	r30, 0x63	; 99
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	91 83       	std	Z+1, r25	; 0x01
    2586:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2588:	de 01       	movw	r26, r28
    258a:	a1 56       	subi	r26, 0x61	; 97
    258c:	bf 4f       	sbci	r27, 0xFF	; 255
    258e:	fe 01       	movw	r30, r28
    2590:	e1 56       	subi	r30, 0x61	; 97
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	80 81       	ld	r24, Z
    2596:	91 81       	ldd	r25, Z+1	; 0x01
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	11 96       	adiw	r26, 0x01	; 1
    259c:	9c 93       	st	X, r25
    259e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a0:	fe 01       	movw	r30, r28
    25a2:	e1 56       	subi	r30, 0x61	; 97
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	80 81       	ld	r24, Z
    25a8:	91 81       	ldd	r25, Z+1	; 0x01
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	d1 f6       	brne	.-76     	; 0x2562 <main+0x754>
    25ae:	27 c0       	rjmp	.+78     	; 0x25fe <main+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b0:	8e 01       	movw	r16, r28
    25b2:	01 56       	subi	r16, 0x61	; 97
    25b4:	1f 4f       	sbci	r17, 0xFF	; 255
    25b6:	fe 01       	movw	r30, r28
    25b8:	ef 55       	subi	r30, 0x5F	; 95
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	60 81       	ld	r22, Z
    25be:	71 81       	ldd	r23, Z+1	; 0x01
    25c0:	82 81       	ldd	r24, Z+2	; 0x02
    25c2:	93 81       	ldd	r25, Z+3	; 0x03
    25c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	f8 01       	movw	r30, r16
    25ce:	91 83       	std	Z+1, r25	; 0x01
    25d0:	80 83       	st	Z, r24
    25d2:	de 01       	movw	r26, r28
    25d4:	a5 56       	subi	r26, 0x65	; 101
    25d6:	bf 4f       	sbci	r27, 0xFF	; 255
    25d8:	fe 01       	movw	r30, r28
    25da:	e1 56       	subi	r30, 0x61	; 97
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	80 81       	ld	r24, Z
    25e0:	91 81       	ldd	r25, Z+1	; 0x01
    25e2:	8d 93       	st	X+, r24
    25e4:	9c 93       	st	X, r25
    25e6:	fe 01       	movw	r30, r28
    25e8:	e5 56       	subi	r30, 0x65	; 101
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	80 81       	ld	r24, Z
    25ee:	91 81       	ldd	r25, Z+1	; 0x01
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	f1 f7       	brne	.-4      	; 0x25f0 <main+0x7e2>
    25f4:	fe 01       	movw	r30, r28
    25f6:	e5 56       	subi	r30, 0x65	; 101
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	91 83       	std	Z+1, r25	; 0x01
    25fc:	80 83       	st	Z, r24
		_delay_ms(50);
		UART_sendByte(command);
    25fe:	fe 01       	movw	r30, r28
    2600:	ed 51       	subi	r30, 0x1D	; 29
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	80 81       	ld	r24, Z
    2606:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <UART_sendByte>
    260a:	fe 01       	movw	r30, r28
    260c:	e9 56       	subi	r30, 0x69	; 105
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	aa ef       	ldi	r26, 0xFA	; 250
    2616:	b3 e4       	ldi	r27, 0x43	; 67
    2618:	80 83       	st	Z, r24
    261a:	91 83       	std	Z+1, r25	; 0x01
    261c:	a2 83       	std	Z+2, r26	; 0x02
    261e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2620:	8e 01       	movw	r16, r28
    2622:	0d 56       	subi	r16, 0x6D	; 109
    2624:	1f 4f       	sbci	r17, 0xFF	; 255
    2626:	fe 01       	movw	r30, r28
    2628:	e9 56       	subi	r30, 0x69	; 105
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	60 81       	ld	r22, Z
    262e:	71 81       	ldd	r23, Z+1	; 0x01
    2630:	82 81       	ldd	r24, Z+2	; 0x02
    2632:	93 81       	ldd	r25, Z+3	; 0x03
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	4a ef       	ldi	r20, 0xFA	; 250
    263a:	54 e4       	ldi	r21, 0x44	; 68
    263c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	f8 01       	movw	r30, r16
    2646:	80 83       	st	Z, r24
    2648:	91 83       	std	Z+1, r25	; 0x01
    264a:	a2 83       	std	Z+2, r26	; 0x02
    264c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    264e:	fe 01       	movw	r30, r28
    2650:	ed 56       	subi	r30, 0x6D	; 109
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	60 81       	ld	r22, Z
    2656:	71 81       	ldd	r23, Z+1	; 0x01
    2658:	82 81       	ldd	r24, Z+2	; 0x02
    265a:	93 81       	ldd	r25, Z+3	; 0x03
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e8       	ldi	r20, 0x80	; 128
    2662:	5f e3       	ldi	r21, 0x3F	; 63
    2664:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2668:	88 23       	and	r24, r24
    266a:	44 f4       	brge	.+16     	; 0x267c <main+0x86e>
		__ticks = 1;
    266c:	fe 01       	movw	r30, r28
    266e:	ef 56       	subi	r30, 0x6F	; 111
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	91 83       	std	Z+1, r25	; 0x01
    2678:	80 83       	st	Z, r24
    267a:	64 c0       	rjmp	.+200    	; 0x2744 <main+0x936>
	else if (__tmp > 65535)
    267c:	fe 01       	movw	r30, r28
    267e:	ed 56       	subi	r30, 0x6D	; 109
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	60 81       	ld	r22, Z
    2684:	71 81       	ldd	r23, Z+1	; 0x01
    2686:	82 81       	ldd	r24, Z+2	; 0x02
    2688:	93 81       	ldd	r25, Z+3	; 0x03
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	3f ef       	ldi	r19, 0xFF	; 255
    268e:	4f e7       	ldi	r20, 0x7F	; 127
    2690:	57 e4       	ldi	r21, 0x47	; 71
    2692:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2696:	18 16       	cp	r1, r24
    2698:	0c f0       	brlt	.+2      	; 0x269c <main+0x88e>
    269a:	43 c0       	rjmp	.+134    	; 0x2722 <main+0x914>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    269c:	fe 01       	movw	r30, r28
    269e:	e9 56       	subi	r30, 0x69	; 105
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	60 81       	ld	r22, Z
    26a4:	71 81       	ldd	r23, Z+1	; 0x01
    26a6:	82 81       	ldd	r24, Z+2	; 0x02
    26a8:	93 81       	ldd	r25, Z+3	; 0x03
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	40 e2       	ldi	r20, 0x20	; 32
    26b0:	51 e4       	ldi	r21, 0x41	; 65
    26b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	8e 01       	movw	r16, r28
    26bc:	0f 56       	subi	r16, 0x6F	; 111
    26be:	1f 4f       	sbci	r17, 0xFF	; 255
    26c0:	bc 01       	movw	r22, r24
    26c2:	cd 01       	movw	r24, r26
    26c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	f8 01       	movw	r30, r16
    26ce:	91 83       	std	Z+1, r25	; 0x01
    26d0:	80 83       	st	Z, r24
    26d2:	1f c0       	rjmp	.+62     	; 0x2712 <main+0x904>
    26d4:	fe 01       	movw	r30, r28
    26d6:	e1 57       	subi	r30, 0x71	; 113
    26d8:	ff 4f       	sbci	r31, 0xFF	; 255
    26da:	88 ec       	ldi	r24, 0xC8	; 200
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	91 83       	std	Z+1, r25	; 0x01
    26e0:	80 83       	st	Z, r24
    26e2:	fe 01       	movw	r30, r28
    26e4:	e1 57       	subi	r30, 0x71	; 113
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	80 81       	ld	r24, Z
    26ea:	91 81       	ldd	r25, Z+1	; 0x01
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	f1 f7       	brne	.-4      	; 0x26ec <main+0x8de>
    26f0:	fe 01       	movw	r30, r28
    26f2:	e1 57       	subi	r30, 0x71	; 113
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	91 83       	std	Z+1, r25	; 0x01
    26f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26fa:	de 01       	movw	r26, r28
    26fc:	af 56       	subi	r26, 0x6F	; 111
    26fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2700:	fe 01       	movw	r30, r28
    2702:	ef 56       	subi	r30, 0x6F	; 111
    2704:	ff 4f       	sbci	r31, 0xFF	; 255
    2706:	80 81       	ld	r24, Z
    2708:	91 81       	ldd	r25, Z+1	; 0x01
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	11 96       	adiw	r26, 0x01	; 1
    270e:	9c 93       	st	X, r25
    2710:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2712:	fe 01       	movw	r30, r28
    2714:	ef 56       	subi	r30, 0x6F	; 111
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	80 81       	ld	r24, Z
    271a:	91 81       	ldd	r25, Z+1	; 0x01
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	d1 f6       	brne	.-76     	; 0x26d4 <main+0x8c6>
    2720:	28 c0       	rjmp	.+80     	; 0x2772 <main+0x964>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2722:	8e 01       	movw	r16, r28
    2724:	0f 56       	subi	r16, 0x6F	; 111
    2726:	1f 4f       	sbci	r17, 0xFF	; 255
    2728:	fe 01       	movw	r30, r28
    272a:	ed 56       	subi	r30, 0x6D	; 109
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	60 81       	ld	r22, Z
    2730:	71 81       	ldd	r23, Z+1	; 0x01
    2732:	82 81       	ldd	r24, Z+2	; 0x02
    2734:	93 81       	ldd	r25, Z+3	; 0x03
    2736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	f8 01       	movw	r30, r16
    2740:	91 83       	std	Z+1, r25	; 0x01
    2742:	80 83       	st	Z, r24
    2744:	de 01       	movw	r26, r28
    2746:	a3 57       	subi	r26, 0x73	; 115
    2748:	bf 4f       	sbci	r27, 0xFF	; 255
    274a:	fe 01       	movw	r30, r28
    274c:	ef 56       	subi	r30, 0x6F	; 111
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	80 81       	ld	r24, Z
    2752:	91 81       	ldd	r25, Z+1	; 0x01
    2754:	11 96       	adiw	r26, 0x01	; 1
    2756:	9c 93       	st	X, r25
    2758:	8e 93       	st	-X, r24
    275a:	fe 01       	movw	r30, r28
    275c:	e3 57       	subi	r30, 0x73	; 115
    275e:	ff 4f       	sbci	r31, 0xFF	; 255
    2760:	80 81       	ld	r24, Z
    2762:	91 81       	ldd	r25, Z+1	; 0x01
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	f1 f7       	brne	.-4      	; 0x2764 <main+0x956>
    2768:	fe 01       	movw	r30, r28
    276a:	e3 57       	subi	r30, 0x73	; 115
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	91 83       	std	Z+1, r25	; 0x01
    2770:	80 83       	st	Z, r24
		_delay_ms(500);
		// Open Door = +
		if (command == '+')
    2772:	fe 01       	movw	r30, r28
    2774:	ed 51       	subi	r30, 0x1D	; 29
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	80 81       	ld	r24, Z
    277a:	8b 32       	cpi	r24, 0x2B	; 43
    277c:	09 f0       	breq	.+2      	; 0x2780 <main+0x972>
    277e:	5a c2       	rjmp	.+1204   	; 0x2c34 <main+0xe26>
		{

			LCD_clearScreen();
    2780:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_clearScreen>
			LCD_displayString("Enter your pass: ");
    2784:	83 e8       	ldi	r24, 0x83	; 131
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_displayString>
			LCD_moveCursor(1,0);
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	60 e0       	ldi	r22, 0x00	; 0
    2790:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_moveCursor>
			creat_password(num1);//take the pass
    2794:	ce 01       	movw	r24, r28
    2796:	8b 51       	subi	r24, 0x1B	; 27
    2798:	9f 4f       	sbci	r25, 0xFF	; 255
    279a:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <creat_password>
    279e:	fe 01       	movw	r30, r28
    27a0:	e7 57       	subi	r30, 0x77	; 119
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	a8 e4       	ldi	r26, 0x48	; 72
    27aa:	b2 e4       	ldi	r27, 0x42	; 66
    27ac:	80 83       	st	Z, r24
    27ae:	91 83       	std	Z+1, r25	; 0x01
    27b0:	a2 83       	std	Z+2, r26	; 0x02
    27b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b4:	8e 01       	movw	r16, r28
    27b6:	0b 57       	subi	r16, 0x7B	; 123
    27b8:	1f 4f       	sbci	r17, 0xFF	; 255
    27ba:	fe 01       	movw	r30, r28
    27bc:	e7 57       	subi	r30, 0x77	; 119
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	60 81       	ld	r22, Z
    27c2:	71 81       	ldd	r23, Z+1	; 0x01
    27c4:	82 81       	ldd	r24, Z+2	; 0x02
    27c6:	93 81       	ldd	r25, Z+3	; 0x03
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	4a ef       	ldi	r20, 0xFA	; 250
    27ce:	54 e4       	ldi	r21, 0x44	; 68
    27d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	f8 01       	movw	r30, r16
    27da:	80 83       	st	Z, r24
    27dc:	91 83       	std	Z+1, r25	; 0x01
    27de:	a2 83       	std	Z+2, r26	; 0x02
    27e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27e2:	fe 01       	movw	r30, r28
    27e4:	eb 57       	subi	r30, 0x7B	; 123
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	60 81       	ld	r22, Z
    27ea:	71 81       	ldd	r23, Z+1	; 0x01
    27ec:	82 81       	ldd	r24, Z+2	; 0x02
    27ee:	93 81       	ldd	r25, Z+3	; 0x03
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	40 e8       	ldi	r20, 0x80	; 128
    27f6:	5f e3       	ldi	r21, 0x3F	; 63
    27f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27fc:	88 23       	and	r24, r24
    27fe:	44 f4       	brge	.+16     	; 0x2810 <main+0xa02>
		__ticks = 1;
    2800:	fe 01       	movw	r30, r28
    2802:	ed 57       	subi	r30, 0x7D	; 125
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	80 83       	st	Z, r24
    280e:	64 c0       	rjmp	.+200    	; 0x28d8 <main+0xaca>
	else if (__tmp > 65535)
    2810:	fe 01       	movw	r30, r28
    2812:	eb 57       	subi	r30, 0x7B	; 123
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	60 81       	ld	r22, Z
    2818:	71 81       	ldd	r23, Z+1	; 0x01
    281a:	82 81       	ldd	r24, Z+2	; 0x02
    281c:	93 81       	ldd	r25, Z+3	; 0x03
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	3f ef       	ldi	r19, 0xFF	; 255
    2822:	4f e7       	ldi	r20, 0x7F	; 127
    2824:	57 e4       	ldi	r21, 0x47	; 71
    2826:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    282a:	18 16       	cp	r1, r24
    282c:	0c f0       	brlt	.+2      	; 0x2830 <main+0xa22>
    282e:	43 c0       	rjmp	.+134    	; 0x28b6 <main+0xaa8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2830:	fe 01       	movw	r30, r28
    2832:	e7 57       	subi	r30, 0x77	; 119
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	60 81       	ld	r22, Z
    2838:	71 81       	ldd	r23, Z+1	; 0x01
    283a:	82 81       	ldd	r24, Z+2	; 0x02
    283c:	93 81       	ldd	r25, Z+3	; 0x03
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	40 e2       	ldi	r20, 0x20	; 32
    2844:	51 e4       	ldi	r21, 0x41	; 65
    2846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284a:	dc 01       	movw	r26, r24
    284c:	cb 01       	movw	r24, r22
    284e:	8e 01       	movw	r16, r28
    2850:	0d 57       	subi	r16, 0x7D	; 125
    2852:	1f 4f       	sbci	r17, 0xFF	; 255
    2854:	bc 01       	movw	r22, r24
    2856:	cd 01       	movw	r24, r26
    2858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	f8 01       	movw	r30, r16
    2862:	91 83       	std	Z+1, r25	; 0x01
    2864:	80 83       	st	Z, r24
    2866:	1f c0       	rjmp	.+62     	; 0x28a6 <main+0xa98>
    2868:	fe 01       	movw	r30, r28
    286a:	ef 57       	subi	r30, 0x7F	; 127
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	88 ec       	ldi	r24, 0xC8	; 200
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	91 83       	std	Z+1, r25	; 0x01
    2874:	80 83       	st	Z, r24
    2876:	fe 01       	movw	r30, r28
    2878:	ef 57       	subi	r30, 0x7F	; 127
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	80 81       	ld	r24, Z
    287e:	91 81       	ldd	r25, Z+1	; 0x01
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <main+0xa72>
    2884:	fe 01       	movw	r30, r28
    2886:	ef 57       	subi	r30, 0x7F	; 127
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	91 83       	std	Z+1, r25	; 0x01
    288c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288e:	de 01       	movw	r26, r28
    2890:	ad 57       	subi	r26, 0x7D	; 125
    2892:	bf 4f       	sbci	r27, 0xFF	; 255
    2894:	fe 01       	movw	r30, r28
    2896:	ed 57       	subi	r30, 0x7D	; 125
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	80 81       	ld	r24, Z
    289c:	91 81       	ldd	r25, Z+1	; 0x01
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	11 96       	adiw	r26, 0x01	; 1
    28a2:	9c 93       	st	X, r25
    28a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a6:	fe 01       	movw	r30, r28
    28a8:	ed 57       	subi	r30, 0x7D	; 125
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	80 81       	ld	r24, Z
    28ae:	91 81       	ldd	r25, Z+1	; 0x01
    28b0:	00 97       	sbiw	r24, 0x00	; 0
    28b2:	d1 f6       	brne	.-76     	; 0x2868 <main+0xa5a>
    28b4:	27 c0       	rjmp	.+78     	; 0x2904 <main+0xaf6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b6:	8e 01       	movw	r16, r28
    28b8:	0d 57       	subi	r16, 0x7D	; 125
    28ba:	1f 4f       	sbci	r17, 0xFF	; 255
    28bc:	fe 01       	movw	r30, r28
    28be:	eb 57       	subi	r30, 0x7B	; 123
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	60 81       	ld	r22, Z
    28c4:	71 81       	ldd	r23, Z+1	; 0x01
    28c6:	82 81       	ldd	r24, Z+2	; 0x02
    28c8:	93 81       	ldd	r25, Z+3	; 0x03
    28ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	f8 01       	movw	r30, r16
    28d4:	91 83       	std	Z+1, r25	; 0x01
    28d6:	80 83       	st	Z, r24
    28d8:	de 01       	movw	r26, r28
    28da:	a1 58       	subi	r26, 0x81	; 129
    28dc:	bf 4f       	sbci	r27, 0xFF	; 255
    28de:	fe 01       	movw	r30, r28
    28e0:	ed 57       	subi	r30, 0x7D	; 125
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	80 81       	ld	r24, Z
    28e6:	91 81       	ldd	r25, Z+1	; 0x01
    28e8:	8d 93       	st	X+, r24
    28ea:	9c 93       	st	X, r25
    28ec:	fe 01       	movw	r30, r28
    28ee:	e1 58       	subi	r30, 0x81	; 129
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	80 81       	ld	r24, Z
    28f4:	91 81       	ldd	r25, Z+1	; 0x01
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	f1 f7       	brne	.-4      	; 0x28f6 <main+0xae8>
    28fa:	fe 01       	movw	r30, r28
    28fc:	e1 58       	subi	r30, 0x81	; 129
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	91 83       	std	Z+1, r25	; 0x01
    2902:	80 83       	st	Z, r24
			_delay_ms(50);
			send_pass(num1);//Receive the password
    2904:	ce 01       	movw	r24, r28
    2906:	8b 51       	subi	r24, 0x1B	; 27
    2908:	9f 4f       	sbci	r25, 0xFF	; 255
    290a:	0e 94 89 1b 	call	0x3712	; 0x3712 <send_pass>
    290e:	fe 01       	movw	r30, r28
    2910:	e5 58       	subi	r30, 0x85	; 133
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	aa ef       	ldi	r26, 0xFA	; 250
    291a:	b3 e4       	ldi	r27, 0x43	; 67
    291c:	80 83       	st	Z, r24
    291e:	91 83       	std	Z+1, r25	; 0x01
    2920:	a2 83       	std	Z+2, r26	; 0x02
    2922:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2924:	8e 01       	movw	r16, r28
    2926:	09 58       	subi	r16, 0x89	; 137
    2928:	1f 4f       	sbci	r17, 0xFF	; 255
    292a:	fe 01       	movw	r30, r28
    292c:	e5 58       	subi	r30, 0x85	; 133
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	60 81       	ld	r22, Z
    2932:	71 81       	ldd	r23, Z+1	; 0x01
    2934:	82 81       	ldd	r24, Z+2	; 0x02
    2936:	93 81       	ldd	r25, Z+3	; 0x03
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	4a ef       	ldi	r20, 0xFA	; 250
    293e:	54 e4       	ldi	r21, 0x44	; 68
    2940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	f8 01       	movw	r30, r16
    294a:	80 83       	st	Z, r24
    294c:	91 83       	std	Z+1, r25	; 0x01
    294e:	a2 83       	std	Z+2, r26	; 0x02
    2950:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2952:	fe 01       	movw	r30, r28
    2954:	e9 58       	subi	r30, 0x89	; 137
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	60 81       	ld	r22, Z
    295a:	71 81       	ldd	r23, Z+1	; 0x01
    295c:	82 81       	ldd	r24, Z+2	; 0x02
    295e:	93 81       	ldd	r25, Z+3	; 0x03
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	40 e8       	ldi	r20, 0x80	; 128
    2966:	5f e3       	ldi	r21, 0x3F	; 63
    2968:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    296c:	88 23       	and	r24, r24
    296e:	44 f4       	brge	.+16     	; 0x2980 <main+0xb72>
		__ticks = 1;
    2970:	fe 01       	movw	r30, r28
    2972:	eb 58       	subi	r30, 0x8B	; 139
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	91 83       	std	Z+1, r25	; 0x01
    297c:	80 83       	st	Z, r24
    297e:	64 c0       	rjmp	.+200    	; 0x2a48 <main+0xc3a>
	else if (__tmp > 65535)
    2980:	fe 01       	movw	r30, r28
    2982:	e9 58       	subi	r30, 0x89	; 137
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	60 81       	ld	r22, Z
    2988:	71 81       	ldd	r23, Z+1	; 0x01
    298a:	82 81       	ldd	r24, Z+2	; 0x02
    298c:	93 81       	ldd	r25, Z+3	; 0x03
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	3f ef       	ldi	r19, 0xFF	; 255
    2992:	4f e7       	ldi	r20, 0x7F	; 127
    2994:	57 e4       	ldi	r21, 0x47	; 71
    2996:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    299a:	18 16       	cp	r1, r24
    299c:	0c f0       	brlt	.+2      	; 0x29a0 <main+0xb92>
    299e:	43 c0       	rjmp	.+134    	; 0x2a26 <main+0xc18>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a0:	fe 01       	movw	r30, r28
    29a2:	e5 58       	subi	r30, 0x85	; 133
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	60 81       	ld	r22, Z
    29a8:	71 81       	ldd	r23, Z+1	; 0x01
    29aa:	82 81       	ldd	r24, Z+2	; 0x02
    29ac:	93 81       	ldd	r25, Z+3	; 0x03
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	40 e2       	ldi	r20, 0x20	; 32
    29b4:	51 e4       	ldi	r21, 0x41	; 65
    29b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	8e 01       	movw	r16, r28
    29c0:	0b 58       	subi	r16, 0x8B	; 139
    29c2:	1f 4f       	sbci	r17, 0xFF	; 255
    29c4:	bc 01       	movw	r22, r24
    29c6:	cd 01       	movw	r24, r26
    29c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	f8 01       	movw	r30, r16
    29d2:	91 83       	std	Z+1, r25	; 0x01
    29d4:	80 83       	st	Z, r24
    29d6:	1f c0       	rjmp	.+62     	; 0x2a16 <main+0xc08>
    29d8:	fe 01       	movw	r30, r28
    29da:	ed 58       	subi	r30, 0x8D	; 141
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	88 ec       	ldi	r24, 0xC8	; 200
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	91 83       	std	Z+1, r25	; 0x01
    29e4:	80 83       	st	Z, r24
    29e6:	fe 01       	movw	r30, r28
    29e8:	ed 58       	subi	r30, 0x8D	; 141
    29ea:	ff 4f       	sbci	r31, 0xFF	; 255
    29ec:	80 81       	ld	r24, Z
    29ee:	91 81       	ldd	r25, Z+1	; 0x01
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <main+0xbe2>
    29f4:	fe 01       	movw	r30, r28
    29f6:	ed 58       	subi	r30, 0x8D	; 141
    29f8:	ff 4f       	sbci	r31, 0xFF	; 255
    29fa:	91 83       	std	Z+1, r25	; 0x01
    29fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29fe:	de 01       	movw	r26, r28
    2a00:	ab 58       	subi	r26, 0x8B	; 139
    2a02:	bf 4f       	sbci	r27, 0xFF	; 255
    2a04:	fe 01       	movw	r30, r28
    2a06:	eb 58       	subi	r30, 0x8B	; 139
    2a08:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0a:	80 81       	ld	r24, Z
    2a0c:	91 81       	ldd	r25, Z+1	; 0x01
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	11 96       	adiw	r26, 0x01	; 1
    2a12:	9c 93       	st	X, r25
    2a14:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a16:	fe 01       	movw	r30, r28
    2a18:	eb 58       	subi	r30, 0x8B	; 139
    2a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1c:	80 81       	ld	r24, Z
    2a1e:	91 81       	ldd	r25, Z+1	; 0x01
    2a20:	00 97       	sbiw	r24, 0x00	; 0
    2a22:	d1 f6       	brne	.-76     	; 0x29d8 <main+0xbca>
    2a24:	27 c0       	rjmp	.+78     	; 0x2a74 <main+0xc66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a26:	8e 01       	movw	r16, r28
    2a28:	0b 58       	subi	r16, 0x8B	; 139
    2a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	e9 58       	subi	r30, 0x89	; 137
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	60 81       	ld	r22, Z
    2a34:	71 81       	ldd	r23, Z+1	; 0x01
    2a36:	82 81       	ldd	r24, Z+2	; 0x02
    2a38:	93 81       	ldd	r25, Z+3	; 0x03
    2a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	f8 01       	movw	r30, r16
    2a44:	91 83       	std	Z+1, r25	; 0x01
    2a46:	80 83       	st	Z, r24
    2a48:	de 01       	movw	r26, r28
    2a4a:	af 58       	subi	r26, 0x8F	; 143
    2a4c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a4e:	fe 01       	movw	r30, r28
    2a50:	eb 58       	subi	r30, 0x8B	; 139
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	80 81       	ld	r24, Z
    2a56:	91 81       	ldd	r25, Z+1	; 0x01
    2a58:	8d 93       	st	X+, r24
    2a5a:	9c 93       	st	X, r25
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	ef 58       	subi	r30, 0x8F	; 143
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	80 81       	ld	r24, Z
    2a64:	91 81       	ldd	r25, Z+1	; 0x01
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <main+0xc58>
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	ef 58       	subi	r30, 0x8F	; 143
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	91 83       	std	Z+1, r25	; 0x01
    2a72:	80 83       	st	Z, r24
			_delay_ms(500);
			verifed=0;
    2a74:	fe 01       	movw	r30, r28
    2a76:	ec 51       	subi	r30, 0x1C	; 28
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	10 82       	st	Z, r1
			verifed = UART_recieveByte();// if the password matched with the old one
    2a7c:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <UART_recieveByte>
    2a80:	fe 01       	movw	r30, r28
    2a82:	ec 51       	subi	r30, 0x1C	; 28
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	80 83       	st	Z, r24

			if (verifed)
    2a88:	fe 01       	movw	r30, r28
    2a8a:	ec 51       	subi	r30, 0x1C	; 28
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	80 81       	ld	r24, Z
    2a90:	88 23       	and	r24, r24
    2a92:	19 f0       	breq	.+6      	; 0x2a9a <main+0xc8c>
			{
				main_choice1();
    2a94:	0e 94 39 1c 	call	0x3872	; 0x3872 <main_choice1>
    2a98:	cd c0       	rjmp	.+410    	; 0x2c34 <main+0xe26>

			else
			{
				// if the 2 passwords do not match
				//receive the counter for the control
				uint8 falsecounter = UART_recieveByte();
    2a9a:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <UART_recieveByte>
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	ee 51       	subi	r30, 0x1E	; 30
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	80 83       	st	Z, r24
				//  two passwords are not matched for the third consecutive time,
				if (falsecounter >= 3)
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	ee 51       	subi	r30, 0x1E	; 30
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	80 81       	ld	r24, Z
    2aae:	83 30       	cpi	r24, 0x03	; 3
    2ab0:	38 f0       	brcs	.+14     	; 0x2ac0 <main+0xcb2>
				{
					unmatched_pass();
    2ab2:	0e 94 76 1c 	call	0x38ec	; 0x38ec <unmatched_pass>
					falsecounter=0;
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	ee 51       	subi	r30, 0x1E	; 30
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	10 82       	st	Z, r1
    2abe:	ba c0       	rjmp	.+372    	; 0x2c34 <main+0xe26>
				}

				else
				{

					LCD_clearScreen();
    2ac0:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_clearScreen>
					LCD_displayString("Wrong Pass");
    2ac4:	85 e9       	ldi	r24, 0x95	; 149
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_displayString>
    2acc:	fe 01       	movw	r30, r28
    2ace:	e3 59       	subi	r30, 0x93	; 147
    2ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	aa ef       	ldi	r26, 0xFA	; 250
    2ad8:	b3 e4       	ldi	r27, 0x43	; 67
    2ada:	80 83       	st	Z, r24
    2adc:	91 83       	std	Z+1, r25	; 0x01
    2ade:	a2 83       	std	Z+2, r26	; 0x02
    2ae0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae2:	8e 01       	movw	r16, r28
    2ae4:	07 59       	subi	r16, 0x97	; 151
    2ae6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae8:	fe 01       	movw	r30, r28
    2aea:	e3 59       	subi	r30, 0x93	; 147
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	60 81       	ld	r22, Z
    2af0:	71 81       	ldd	r23, Z+1	; 0x01
    2af2:	82 81       	ldd	r24, Z+2	; 0x02
    2af4:	93 81       	ldd	r25, Z+3	; 0x03
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	4a ef       	ldi	r20, 0xFA	; 250
    2afc:	54 e4       	ldi	r21, 0x44	; 68
    2afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	f8 01       	movw	r30, r16
    2b08:	80 83       	st	Z, r24
    2b0a:	91 83       	std	Z+1, r25	; 0x01
    2b0c:	a2 83       	std	Z+2, r26	; 0x02
    2b0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b10:	fe 01       	movw	r30, r28
    2b12:	e7 59       	subi	r30, 0x97	; 151
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	60 81       	ld	r22, Z
    2b18:	71 81       	ldd	r23, Z+1	; 0x01
    2b1a:	82 81       	ldd	r24, Z+2	; 0x02
    2b1c:	93 81       	ldd	r25, Z+3	; 0x03
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e8       	ldi	r20, 0x80	; 128
    2b24:	5f e3       	ldi	r21, 0x3F	; 63
    2b26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b2a:	88 23       	and	r24, r24
    2b2c:	44 f4       	brge	.+16     	; 0x2b3e <main+0xd30>
		__ticks = 1;
    2b2e:	fe 01       	movw	r30, r28
    2b30:	e9 59       	subi	r30, 0x99	; 153
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	91 83       	std	Z+1, r25	; 0x01
    2b3a:	80 83       	st	Z, r24
    2b3c:	64 c0       	rjmp	.+200    	; 0x2c06 <main+0xdf8>
	else if (__tmp > 65535)
    2b3e:	fe 01       	movw	r30, r28
    2b40:	e7 59       	subi	r30, 0x97	; 151
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	60 81       	ld	r22, Z
    2b46:	71 81       	ldd	r23, Z+1	; 0x01
    2b48:	82 81       	ldd	r24, Z+2	; 0x02
    2b4a:	93 81       	ldd	r25, Z+3	; 0x03
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	3f ef       	ldi	r19, 0xFF	; 255
    2b50:	4f e7       	ldi	r20, 0x7F	; 127
    2b52:	57 e4       	ldi	r21, 0x47	; 71
    2b54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b58:	18 16       	cp	r1, r24
    2b5a:	0c f0       	brlt	.+2      	; 0x2b5e <main+0xd50>
    2b5c:	43 c0       	rjmp	.+134    	; 0x2be4 <main+0xdd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b5e:	fe 01       	movw	r30, r28
    2b60:	e3 59       	subi	r30, 0x93	; 147
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	60 81       	ld	r22, Z
    2b66:	71 81       	ldd	r23, Z+1	; 0x01
    2b68:	82 81       	ldd	r24, Z+2	; 0x02
    2b6a:	93 81       	ldd	r25, Z+3	; 0x03
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	40 e2       	ldi	r20, 0x20	; 32
    2b72:	51 e4       	ldi	r21, 0x41	; 65
    2b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	8e 01       	movw	r16, r28
    2b7e:	09 59       	subi	r16, 0x99	; 153
    2b80:	1f 4f       	sbci	r17, 0xFF	; 255
    2b82:	bc 01       	movw	r22, r24
    2b84:	cd 01       	movw	r24, r26
    2b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	f8 01       	movw	r30, r16
    2b90:	91 83       	std	Z+1, r25	; 0x01
    2b92:	80 83       	st	Z, r24
    2b94:	1f c0       	rjmp	.+62     	; 0x2bd4 <main+0xdc6>
    2b96:	fe 01       	movw	r30, r28
    2b98:	eb 59       	subi	r30, 0x9B	; 155
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	88 ec       	ldi	r24, 0xC8	; 200
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	91 83       	std	Z+1, r25	; 0x01
    2ba2:	80 83       	st	Z, r24
    2ba4:	fe 01       	movw	r30, r28
    2ba6:	eb 59       	subi	r30, 0x9B	; 155
    2ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    2baa:	80 81       	ld	r24, Z
    2bac:	91 81       	ldd	r25, Z+1	; 0x01
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <main+0xda0>
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	eb 59       	subi	r30, 0x9B	; 155
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bbc:	de 01       	movw	r26, r28
    2bbe:	a9 59       	subi	r26, 0x99	; 153
    2bc0:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e9 59       	subi	r30, 0x99	; 153
    2bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc8:	80 81       	ld	r24, Z
    2bca:	91 81       	ldd	r25, Z+1	; 0x01
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	11 96       	adiw	r26, 0x01	; 1
    2bd0:	9c 93       	st	X, r25
    2bd2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	e9 59       	subi	r30, 0x99	; 153
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	80 81       	ld	r24, Z
    2bdc:	91 81       	ldd	r25, Z+1	; 0x01
    2bde:	00 97       	sbiw	r24, 0x00	; 0
    2be0:	d1 f6       	brne	.-76     	; 0x2b96 <main+0xd88>
    2be2:	28 c0       	rjmp	.+80     	; 0x2c34 <main+0xe26>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be4:	8e 01       	movw	r16, r28
    2be6:	09 59       	subi	r16, 0x99	; 153
    2be8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bea:	fe 01       	movw	r30, r28
    2bec:	e7 59       	subi	r30, 0x97	; 151
    2bee:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf0:	60 81       	ld	r22, Z
    2bf2:	71 81       	ldd	r23, Z+1	; 0x01
    2bf4:	82 81       	ldd	r24, Z+2	; 0x02
    2bf6:	93 81       	ldd	r25, Z+3	; 0x03
    2bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	f8 01       	movw	r30, r16
    2c02:	91 83       	std	Z+1, r25	; 0x01
    2c04:	80 83       	st	Z, r24
    2c06:	de 01       	movw	r26, r28
    2c08:	ad 59       	subi	r26, 0x9D	; 157
    2c0a:	bf 4f       	sbci	r27, 0xFF	; 255
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	e9 59       	subi	r30, 0x99	; 153
    2c10:	ff 4f       	sbci	r31, 0xFF	; 255
    2c12:	80 81       	ld	r24, Z
    2c14:	91 81       	ldd	r25, Z+1	; 0x01
    2c16:	11 96       	adiw	r26, 0x01	; 1
    2c18:	9c 93       	st	X, r25
    2c1a:	8e 93       	st	-X, r24
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	ed 59       	subi	r30, 0x9D	; 157
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	80 81       	ld	r24, Z
    2c24:	91 81       	ldd	r25, Z+1	; 0x01
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	f1 f7       	brne	.-4      	; 0x2c26 <main+0xe18>
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	ed 59       	subi	r30, 0x9D	; 157
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	91 83       	std	Z+1, r25	; 0x01
    2c32:	80 83       	st	Z, r24
				}

			}
		}

		if (command == '-')
    2c34:	fe 01       	movw	r30, r28
    2c36:	ed 51       	subi	r30, 0x1D	; 29
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	80 81       	ld	r24, Z
    2c3c:	8d 32       	cpi	r24, 0x2D	; 45
    2c3e:	09 f0       	breq	.+2      	; 0x2c42 <main+0xe34>
    2c40:	23 cc       	rjmp	.-1978   	; 0x2488 <main+0x67a>
		{


			LCD_clearScreen();
    2c42:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_clearScreen>
			LCD_displayString("Enter your pass: ");
    2c46:	83 e8       	ldi	r24, 0x83	; 131
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_displayString>
			LCD_moveCursor(1,0);
    2c4e:	81 e0       	ldi	r24, 0x01	; 1
    2c50:	60 e0       	ldi	r22, 0x00	; 0
    2c52:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_moveCursor>
			creat_password(num1);//take the pass
    2c56:	ce 01       	movw	r24, r28
    2c58:	8b 51       	subi	r24, 0x1B	; 27
    2c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c5c:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <creat_password>
    2c60:	fe 01       	movw	r30, r28
    2c62:	e1 5a       	subi	r30, 0xA1	; 161
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	a8 e4       	ldi	r26, 0x48	; 72
    2c6c:	b2 e4       	ldi	r27, 0x42	; 66
    2c6e:	80 83       	st	Z, r24
    2c70:	91 83       	std	Z+1, r25	; 0x01
    2c72:	a2 83       	std	Z+2, r26	; 0x02
    2c74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c76:	8e 01       	movw	r16, r28
    2c78:	05 5a       	subi	r16, 0xA5	; 165
    2c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	e1 5a       	subi	r30, 0xA1	; 161
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	60 81       	ld	r22, Z
    2c84:	71 81       	ldd	r23, Z+1	; 0x01
    2c86:	82 81       	ldd	r24, Z+2	; 0x02
    2c88:	93 81       	ldd	r25, Z+3	; 0x03
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	4a ef       	ldi	r20, 0xFA	; 250
    2c90:	54 e4       	ldi	r21, 0x44	; 68
    2c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	f8 01       	movw	r30, r16
    2c9c:	80 83       	st	Z, r24
    2c9e:	91 83       	std	Z+1, r25	; 0x01
    2ca0:	a2 83       	std	Z+2, r26	; 0x02
    2ca2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	e5 5a       	subi	r30, 0xA5	; 165
    2ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    2caa:	60 81       	ld	r22, Z
    2cac:	71 81       	ldd	r23, Z+1	; 0x01
    2cae:	82 81       	ldd	r24, Z+2	; 0x02
    2cb0:	93 81       	ldd	r25, Z+3	; 0x03
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	40 e8       	ldi	r20, 0x80	; 128
    2cb8:	5f e3       	ldi	r21, 0x3F	; 63
    2cba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cbe:	88 23       	and	r24, r24
    2cc0:	44 f4       	brge	.+16     	; 0x2cd2 <main+0xec4>
		__ticks = 1;
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	e7 5a       	subi	r30, 0xA7	; 167
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	91 83       	std	Z+1, r25	; 0x01
    2cce:	80 83       	st	Z, r24
    2cd0:	64 c0       	rjmp	.+200    	; 0x2d9a <main+0xf8c>
	else if (__tmp > 65535)
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	e5 5a       	subi	r30, 0xA5	; 165
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	60 81       	ld	r22, Z
    2cda:	71 81       	ldd	r23, Z+1	; 0x01
    2cdc:	82 81       	ldd	r24, Z+2	; 0x02
    2cde:	93 81       	ldd	r25, Z+3	; 0x03
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	3f ef       	ldi	r19, 0xFF	; 255
    2ce4:	4f e7       	ldi	r20, 0x7F	; 127
    2ce6:	57 e4       	ldi	r21, 0x47	; 71
    2ce8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cec:	18 16       	cp	r1, r24
    2cee:	0c f0       	brlt	.+2      	; 0x2cf2 <main+0xee4>
    2cf0:	43 c0       	rjmp	.+134    	; 0x2d78 <main+0xf6a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf2:	fe 01       	movw	r30, r28
    2cf4:	e1 5a       	subi	r30, 0xA1	; 161
    2cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf8:	60 81       	ld	r22, Z
    2cfa:	71 81       	ldd	r23, Z+1	; 0x01
    2cfc:	82 81       	ldd	r24, Z+2	; 0x02
    2cfe:	93 81       	ldd	r25, Z+3	; 0x03
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	40 e2       	ldi	r20, 0x20	; 32
    2d06:	51 e4       	ldi	r21, 0x41	; 65
    2d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	8e 01       	movw	r16, r28
    2d12:	07 5a       	subi	r16, 0xA7	; 167
    2d14:	1f 4f       	sbci	r17, 0xFF	; 255
    2d16:	bc 01       	movw	r22, r24
    2d18:	cd 01       	movw	r24, r26
    2d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1e:	dc 01       	movw	r26, r24
    2d20:	cb 01       	movw	r24, r22
    2d22:	f8 01       	movw	r30, r16
    2d24:	91 83       	std	Z+1, r25	; 0x01
    2d26:	80 83       	st	Z, r24
    2d28:	1f c0       	rjmp	.+62     	; 0x2d68 <main+0xf5a>
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	e9 5a       	subi	r30, 0xA9	; 169
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	88 ec       	ldi	r24, 0xC8	; 200
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	91 83       	std	Z+1, r25	; 0x01
    2d36:	80 83       	st	Z, r24
    2d38:	fe 01       	movw	r30, r28
    2d3a:	e9 5a       	subi	r30, 0xA9	; 169
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	80 81       	ld	r24, Z
    2d40:	91 81       	ldd	r25, Z+1	; 0x01
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	f1 f7       	brne	.-4      	; 0x2d42 <main+0xf34>
    2d46:	fe 01       	movw	r30, r28
    2d48:	e9 5a       	subi	r30, 0xA9	; 169
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	91 83       	std	Z+1, r25	; 0x01
    2d4e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d50:	de 01       	movw	r26, r28
    2d52:	a7 5a       	subi	r26, 0xA7	; 167
    2d54:	bf 4f       	sbci	r27, 0xFF	; 255
    2d56:	fe 01       	movw	r30, r28
    2d58:	e7 5a       	subi	r30, 0xA7	; 167
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	80 81       	ld	r24, Z
    2d5e:	91 81       	ldd	r25, Z+1	; 0x01
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	11 96       	adiw	r26, 0x01	; 1
    2d64:	9c 93       	st	X, r25
    2d66:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d68:	fe 01       	movw	r30, r28
    2d6a:	e7 5a       	subi	r30, 0xA7	; 167
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	80 81       	ld	r24, Z
    2d70:	91 81       	ldd	r25, Z+1	; 0x01
    2d72:	00 97       	sbiw	r24, 0x00	; 0
    2d74:	d1 f6       	brne	.-76     	; 0x2d2a <main+0xf1c>
    2d76:	27 c0       	rjmp	.+78     	; 0x2dc6 <main+0xfb8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d78:	8e 01       	movw	r16, r28
    2d7a:	07 5a       	subi	r16, 0xA7	; 167
    2d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d7e:	fe 01       	movw	r30, r28
    2d80:	e5 5a       	subi	r30, 0xA5	; 165
    2d82:	ff 4f       	sbci	r31, 0xFF	; 255
    2d84:	60 81       	ld	r22, Z
    2d86:	71 81       	ldd	r23, Z+1	; 0x01
    2d88:	82 81       	ldd	r24, Z+2	; 0x02
    2d8a:	93 81       	ldd	r25, Z+3	; 0x03
    2d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d90:	dc 01       	movw	r26, r24
    2d92:	cb 01       	movw	r24, r22
    2d94:	f8 01       	movw	r30, r16
    2d96:	91 83       	std	Z+1, r25	; 0x01
    2d98:	80 83       	st	Z, r24
    2d9a:	de 01       	movw	r26, r28
    2d9c:	ab 5a       	subi	r26, 0xAB	; 171
    2d9e:	bf 4f       	sbci	r27, 0xFF	; 255
    2da0:	fe 01       	movw	r30, r28
    2da2:	e7 5a       	subi	r30, 0xA7	; 167
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	80 81       	ld	r24, Z
    2da8:	91 81       	ldd	r25, Z+1	; 0x01
    2daa:	8d 93       	st	X+, r24
    2dac:	9c 93       	st	X, r25
    2dae:	fe 01       	movw	r30, r28
    2db0:	eb 5a       	subi	r30, 0xAB	; 171
    2db2:	ff 4f       	sbci	r31, 0xFF	; 255
    2db4:	80 81       	ld	r24, Z
    2db6:	91 81       	ldd	r25, Z+1	; 0x01
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	f1 f7       	brne	.-4      	; 0x2db8 <main+0xfaa>
    2dbc:	fe 01       	movw	r30, r28
    2dbe:	eb 5a       	subi	r30, 0xAB	; 171
    2dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc2:	91 83       	std	Z+1, r25	; 0x01
    2dc4:	80 83       	st	Z, r24
			_delay_ms(50);
			send_pass(num1);//send the pass
    2dc6:	ce 01       	movw	r24, r28
    2dc8:	8b 51       	subi	r24, 0x1B	; 27
    2dca:	9f 4f       	sbci	r25, 0xFF	; 255
    2dcc:	0e 94 89 1b 	call	0x3712	; 0x3712 <send_pass>
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	ef 5a       	subi	r30, 0xAF	; 175
    2dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	aa ef       	ldi	r26, 0xFA	; 250
    2ddc:	b3 e4       	ldi	r27, 0x43	; 67
    2dde:	80 83       	st	Z, r24
    2de0:	91 83       	std	Z+1, r25	; 0x01
    2de2:	a2 83       	std	Z+2, r26	; 0x02
    2de4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de6:	8e 01       	movw	r16, r28
    2de8:	03 5b       	subi	r16, 0xB3	; 179
    2dea:	1f 4f       	sbci	r17, 0xFF	; 255
    2dec:	fe 01       	movw	r30, r28
    2dee:	ef 5a       	subi	r30, 0xAF	; 175
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	60 81       	ld	r22, Z
    2df4:	71 81       	ldd	r23, Z+1	; 0x01
    2df6:	82 81       	ldd	r24, Z+2	; 0x02
    2df8:	93 81       	ldd	r25, Z+3	; 0x03
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	4a ef       	ldi	r20, 0xFA	; 250
    2e00:	54 e4       	ldi	r21, 0x44	; 68
    2e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	f8 01       	movw	r30, r16
    2e0c:	80 83       	st	Z, r24
    2e0e:	91 83       	std	Z+1, r25	; 0x01
    2e10:	a2 83       	std	Z+2, r26	; 0x02
    2e12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e14:	fe 01       	movw	r30, r28
    2e16:	e3 5b       	subi	r30, 0xB3	; 179
    2e18:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1a:	60 81       	ld	r22, Z
    2e1c:	71 81       	ldd	r23, Z+1	; 0x01
    2e1e:	82 81       	ldd	r24, Z+2	; 0x02
    2e20:	93 81       	ldd	r25, Z+3	; 0x03
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	40 e8       	ldi	r20, 0x80	; 128
    2e28:	5f e3       	ldi	r21, 0x3F	; 63
    2e2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e2e:	88 23       	and	r24, r24
    2e30:	44 f4       	brge	.+16     	; 0x2e42 <main+0x1034>
		__ticks = 1;
    2e32:	fe 01       	movw	r30, r28
    2e34:	e5 5b       	subi	r30, 0xB5	; 181
    2e36:	ff 4f       	sbci	r31, 0xFF	; 255
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	91 83       	std	Z+1, r25	; 0x01
    2e3e:	80 83       	st	Z, r24
    2e40:	64 c0       	rjmp	.+200    	; 0x2f0a <main+0x10fc>
	else if (__tmp > 65535)
    2e42:	fe 01       	movw	r30, r28
    2e44:	e3 5b       	subi	r30, 0xB3	; 179
    2e46:	ff 4f       	sbci	r31, 0xFF	; 255
    2e48:	60 81       	ld	r22, Z
    2e4a:	71 81       	ldd	r23, Z+1	; 0x01
    2e4c:	82 81       	ldd	r24, Z+2	; 0x02
    2e4e:	93 81       	ldd	r25, Z+3	; 0x03
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	3f ef       	ldi	r19, 0xFF	; 255
    2e54:	4f e7       	ldi	r20, 0x7F	; 127
    2e56:	57 e4       	ldi	r21, 0x47	; 71
    2e58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e5c:	18 16       	cp	r1, r24
    2e5e:	0c f0       	brlt	.+2      	; 0x2e62 <main+0x1054>
    2e60:	43 c0       	rjmp	.+134    	; 0x2ee8 <main+0x10da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e62:	fe 01       	movw	r30, r28
    2e64:	ef 5a       	subi	r30, 0xAF	; 175
    2e66:	ff 4f       	sbci	r31, 0xFF	; 255
    2e68:	60 81       	ld	r22, Z
    2e6a:	71 81       	ldd	r23, Z+1	; 0x01
    2e6c:	82 81       	ldd	r24, Z+2	; 0x02
    2e6e:	93 81       	ldd	r25, Z+3	; 0x03
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	40 e2       	ldi	r20, 0x20	; 32
    2e76:	51 e4       	ldi	r21, 0x41	; 65
    2e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	8e 01       	movw	r16, r28
    2e82:	05 5b       	subi	r16, 0xB5	; 181
    2e84:	1f 4f       	sbci	r17, 0xFF	; 255
    2e86:	bc 01       	movw	r22, r24
    2e88:	cd 01       	movw	r24, r26
    2e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8e:	dc 01       	movw	r26, r24
    2e90:	cb 01       	movw	r24, r22
    2e92:	f8 01       	movw	r30, r16
    2e94:	91 83       	std	Z+1, r25	; 0x01
    2e96:	80 83       	st	Z, r24
    2e98:	1f c0       	rjmp	.+62     	; 0x2ed8 <main+0x10ca>
    2e9a:	fe 01       	movw	r30, r28
    2e9c:	e7 5b       	subi	r30, 0xB7	; 183
    2e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea0:	88 ec       	ldi	r24, 0xC8	; 200
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	91 83       	std	Z+1, r25	; 0x01
    2ea6:	80 83       	st	Z, r24
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	e7 5b       	subi	r30, 0xB7	; 183
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	80 81       	ld	r24, Z
    2eb0:	91 81       	ldd	r25, Z+1	; 0x01
    2eb2:	01 97       	sbiw	r24, 0x01	; 1
    2eb4:	f1 f7       	brne	.-4      	; 0x2eb2 <main+0x10a4>
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	e7 5b       	subi	r30, 0xB7	; 183
    2eba:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebc:	91 83       	std	Z+1, r25	; 0x01
    2ebe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec0:	de 01       	movw	r26, r28
    2ec2:	a5 5b       	subi	r26, 0xB5	; 181
    2ec4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ec6:	fe 01       	movw	r30, r28
    2ec8:	e5 5b       	subi	r30, 0xB5	; 181
    2eca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ecc:	80 81       	ld	r24, Z
    2ece:	91 81       	ldd	r25, Z+1	; 0x01
    2ed0:	01 97       	sbiw	r24, 0x01	; 1
    2ed2:	11 96       	adiw	r26, 0x01	; 1
    2ed4:	9c 93       	st	X, r25
    2ed6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed8:	fe 01       	movw	r30, r28
    2eda:	e5 5b       	subi	r30, 0xB5	; 181
    2edc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ede:	80 81       	ld	r24, Z
    2ee0:	91 81       	ldd	r25, Z+1	; 0x01
    2ee2:	00 97       	sbiw	r24, 0x00	; 0
    2ee4:	d1 f6       	brne	.-76     	; 0x2e9a <main+0x108c>
    2ee6:	27 c0       	rjmp	.+78     	; 0x2f36 <main+0x1128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee8:	8e 01       	movw	r16, r28
    2eea:	05 5b       	subi	r16, 0xB5	; 181
    2eec:	1f 4f       	sbci	r17, 0xFF	; 255
    2eee:	fe 01       	movw	r30, r28
    2ef0:	e3 5b       	subi	r30, 0xB3	; 179
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	60 81       	ld	r22, Z
    2ef6:	71 81       	ldd	r23, Z+1	; 0x01
    2ef8:	82 81       	ldd	r24, Z+2	; 0x02
    2efa:	93 81       	ldd	r25, Z+3	; 0x03
    2efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f00:	dc 01       	movw	r26, r24
    2f02:	cb 01       	movw	r24, r22
    2f04:	f8 01       	movw	r30, r16
    2f06:	91 83       	std	Z+1, r25	; 0x01
    2f08:	80 83       	st	Z, r24
    2f0a:	de 01       	movw	r26, r28
    2f0c:	a9 5b       	subi	r26, 0xB9	; 185
    2f0e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f10:	fe 01       	movw	r30, r28
    2f12:	e5 5b       	subi	r30, 0xB5	; 181
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	80 81       	ld	r24, Z
    2f18:	91 81       	ldd	r25, Z+1	; 0x01
    2f1a:	8d 93       	st	X+, r24
    2f1c:	9c 93       	st	X, r25
    2f1e:	fe 01       	movw	r30, r28
    2f20:	e9 5b       	subi	r30, 0xB9	; 185
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	80 81       	ld	r24, Z
    2f26:	91 81       	ldd	r25, Z+1	; 0x01
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <main+0x111a>
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	e9 5b       	subi	r30, 0xB9	; 185
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	91 83       	std	Z+1, r25	; 0x01
    2f34:	80 83       	st	Z, r24
			_delay_ms(500);
			verifed=0;
    2f36:	fe 01       	movw	r30, r28
    2f38:	ec 51       	subi	r30, 0x1C	; 28
    2f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3c:	10 82       	st	Z, r1
			verifed = UART_recieveByte();// if the password matched with the old one
    2f3e:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <UART_recieveByte>
    2f42:	fe 01       	movw	r30, r28
    2f44:	ec 51       	subi	r30, 0x1C	; 28
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	80 83       	st	Z, r24


			if (verifed)
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	ec 51       	subi	r30, 0x1C	; 28
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	80 81       	ld	r24, Z
    2f52:	88 23       	and	r24, r24
    2f54:	09 f4       	brne	.+2      	; 0x2f58 <main+0x114a>
    2f56:	32 c2       	rjmp	.+1124   	; 0x33bc <main+0x15ae>
			{
				//change password
				LCD_clearScreen();
    2f58:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_clearScreen>
				LCD_displayString("Enter new pass: ");
    2f5c:	80 ea       	ldi	r24, 0xA0	; 160
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_displayString>
				LCD_moveCursor(1,0);
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	60 e0       	ldi	r22, 0x00	; 0
    2f68:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_moveCursor>
				creat_password(num1);//enter new pass
    2f6c:	ce 01       	movw	r24, r28
    2f6e:	8b 51       	subi	r24, 0x1B	; 27
    2f70:	9f 4f       	sbci	r25, 0xFF	; 255
    2f72:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <creat_password>
    2f76:	fe 01       	movw	r30, r28
    2f78:	ed 5b       	subi	r30, 0xBD	; 189
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	a8 e4       	ldi	r26, 0x48	; 72
    2f82:	b2 e4       	ldi	r27, 0x42	; 66
    2f84:	80 83       	st	Z, r24
    2f86:	91 83       	std	Z+1, r25	; 0x01
    2f88:	a2 83       	std	Z+2, r26	; 0x02
    2f8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f8c:	8e 01       	movw	r16, r28
    2f8e:	01 5c       	subi	r16, 0xC1	; 193
    2f90:	1f 4f       	sbci	r17, 0xFF	; 255
    2f92:	fe 01       	movw	r30, r28
    2f94:	ed 5b       	subi	r30, 0xBD	; 189
    2f96:	ff 4f       	sbci	r31, 0xFF	; 255
    2f98:	60 81       	ld	r22, Z
    2f9a:	71 81       	ldd	r23, Z+1	; 0x01
    2f9c:	82 81       	ldd	r24, Z+2	; 0x02
    2f9e:	93 81       	ldd	r25, Z+3	; 0x03
    2fa0:	20 e0       	ldi	r18, 0x00	; 0
    2fa2:	30 e0       	ldi	r19, 0x00	; 0
    2fa4:	4a ef       	ldi	r20, 0xFA	; 250
    2fa6:	54 e4       	ldi	r21, 0x44	; 68
    2fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	f8 01       	movw	r30, r16
    2fb2:	80 83       	st	Z, r24
    2fb4:	91 83       	std	Z+1, r25	; 0x01
    2fb6:	a2 83       	std	Z+2, r26	; 0x02
    2fb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fba:	fe 01       	movw	r30, r28
    2fbc:	ff 96       	adiw	r30, 0x3f	; 63
    2fbe:	60 81       	ld	r22, Z
    2fc0:	71 81       	ldd	r23, Z+1	; 0x01
    2fc2:	82 81       	ldd	r24, Z+2	; 0x02
    2fc4:	93 81       	ldd	r25, Z+3	; 0x03
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	40 e8       	ldi	r20, 0x80	; 128
    2fcc:	5f e3       	ldi	r21, 0x3F	; 63
    2fce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fd2:	88 23       	and	r24, r24
    2fd4:	2c f4       	brge	.+10     	; 0x2fe0 <main+0x11d2>
		__ticks = 1;
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	9e af       	std	Y+62, r25	; 0x3e
    2fdc:	8d af       	std	Y+61, r24	; 0x3d
    2fde:	46 c0       	rjmp	.+140    	; 0x306c <main+0x125e>
	else if (__tmp > 65535)
    2fe0:	fe 01       	movw	r30, r28
    2fe2:	ff 96       	adiw	r30, 0x3f	; 63
    2fe4:	60 81       	ld	r22, Z
    2fe6:	71 81       	ldd	r23, Z+1	; 0x01
    2fe8:	82 81       	ldd	r24, Z+2	; 0x02
    2fea:	93 81       	ldd	r25, Z+3	; 0x03
    2fec:	20 e0       	ldi	r18, 0x00	; 0
    2fee:	3f ef       	ldi	r19, 0xFF	; 255
    2ff0:	4f e7       	ldi	r20, 0x7F	; 127
    2ff2:	57 e4       	ldi	r21, 0x47	; 71
    2ff4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ff8:	18 16       	cp	r1, r24
    2ffa:	64 f5       	brge	.+88     	; 0x3054 <main+0x1246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ffc:	fe 01       	movw	r30, r28
    2ffe:	ed 5b       	subi	r30, 0xBD	; 189
    3000:	ff 4f       	sbci	r31, 0xFF	; 255
    3002:	60 81       	ld	r22, Z
    3004:	71 81       	ldd	r23, Z+1	; 0x01
    3006:	82 81       	ldd	r24, Z+2	; 0x02
    3008:	93 81       	ldd	r25, Z+3	; 0x03
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	40 e2       	ldi	r20, 0x20	; 32
    3010:	51 e4       	ldi	r21, 0x41	; 65
    3012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	bc 01       	movw	r22, r24
    301c:	cd 01       	movw	r24, r26
    301e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	9e af       	std	Y+62, r25	; 0x3e
    3028:	8d af       	std	Y+61, r24	; 0x3d
    302a:	0f c0       	rjmp	.+30     	; 0x304a <main+0x123c>
    302c:	88 ec       	ldi	r24, 0xC8	; 200
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	9c af       	std	Y+60, r25	; 0x3c
    3032:	8b af       	std	Y+59, r24	; 0x3b
    3034:	8b ad       	ldd	r24, Y+59	; 0x3b
    3036:	9c ad       	ldd	r25, Y+60	; 0x3c
    3038:	01 97       	sbiw	r24, 0x01	; 1
    303a:	f1 f7       	brne	.-4      	; 0x3038 <main+0x122a>
    303c:	9c af       	std	Y+60, r25	; 0x3c
    303e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3040:	8d ad       	ldd	r24, Y+61	; 0x3d
    3042:	9e ad       	ldd	r25, Y+62	; 0x3e
    3044:	01 97       	sbiw	r24, 0x01	; 1
    3046:	9e af       	std	Y+62, r25	; 0x3e
    3048:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    304a:	8d ad       	ldd	r24, Y+61	; 0x3d
    304c:	9e ad       	ldd	r25, Y+62	; 0x3e
    304e:	00 97       	sbiw	r24, 0x00	; 0
    3050:	69 f7       	brne	.-38     	; 0x302c <main+0x121e>
    3052:	16 c0       	rjmp	.+44     	; 0x3080 <main+0x1272>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3054:	fe 01       	movw	r30, r28
    3056:	ff 96       	adiw	r30, 0x3f	; 63
    3058:	60 81       	ld	r22, Z
    305a:	71 81       	ldd	r23, Z+1	; 0x01
    305c:	82 81       	ldd	r24, Z+2	; 0x02
    305e:	93 81       	ldd	r25, Z+3	; 0x03
    3060:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	9e af       	std	Y+62, r25	; 0x3e
    306a:	8d af       	std	Y+61, r24	; 0x3d
    306c:	8d ad       	ldd	r24, Y+61	; 0x3d
    306e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3070:	9a af       	std	Y+58, r25	; 0x3a
    3072:	89 af       	std	Y+57, r24	; 0x39
    3074:	89 ad       	ldd	r24, Y+57	; 0x39
    3076:	9a ad       	ldd	r25, Y+58	; 0x3a
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	f1 f7       	brne	.-4      	; 0x3078 <main+0x126a>
    307c:	9a af       	std	Y+58, r25	; 0x3a
    307e:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(50);
				send_pass(num1);//send new pass
    3080:	ce 01       	movw	r24, r28
    3082:	8b 51       	subi	r24, 0x1B	; 27
    3084:	9f 4f       	sbci	r25, 0xFF	; 255
    3086:	0e 94 89 1b 	call	0x3712	; 0x3712 <send_pass>


				LCD_clearScreen();
    308a:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_clearScreen>
				LCD_displayString("Enter same pass:");
    308e:	81 eb       	ldi	r24, 0xB1	; 177
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_displayString>
				LCD_moveCursor(1,0);
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	60 e0       	ldi	r22, 0x00	; 0
    309a:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_moveCursor>
				creat_password(num2);//re-enter new pass
    309e:	ce 01       	movw	r24, r28
    30a0:	86 51       	subi	r24, 0x16	; 22
    30a2:	9f 4f       	sbci	r25, 0xFF	; 255
    30a4:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <creat_password>
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	a8 e4       	ldi	r26, 0x48	; 72
    30ae:	b2 e4       	ldi	r27, 0x42	; 66
    30b0:	8d ab       	std	Y+53, r24	; 0x35
    30b2:	9e ab       	std	Y+54, r25	; 0x36
    30b4:	af ab       	std	Y+55, r26	; 0x37
    30b6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30b8:	6d a9       	ldd	r22, Y+53	; 0x35
    30ba:	7e a9       	ldd	r23, Y+54	; 0x36
    30bc:	8f a9       	ldd	r24, Y+55	; 0x37
    30be:	98 ad       	ldd	r25, Y+56	; 0x38
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	4a ef       	ldi	r20, 0xFA	; 250
    30c6:	54 e4       	ldi	r21, 0x44	; 68
    30c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30cc:	dc 01       	movw	r26, r24
    30ce:	cb 01       	movw	r24, r22
    30d0:	89 ab       	std	Y+49, r24	; 0x31
    30d2:	9a ab       	std	Y+50, r25	; 0x32
    30d4:	ab ab       	std	Y+51, r26	; 0x33
    30d6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    30d8:	69 a9       	ldd	r22, Y+49	; 0x31
    30da:	7a a9       	ldd	r23, Y+50	; 0x32
    30dc:	8b a9       	ldd	r24, Y+51	; 0x33
    30de:	9c a9       	ldd	r25, Y+52	; 0x34
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	40 e8       	ldi	r20, 0x80	; 128
    30e6:	5f e3       	ldi	r21, 0x3F	; 63
    30e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30ec:	88 23       	and	r24, r24
    30ee:	2c f4       	brge	.+10     	; 0x30fa <main+0x12ec>
		__ticks = 1;
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	98 ab       	std	Y+48, r25	; 0x30
    30f6:	8f a7       	std	Y+47, r24	; 0x2f
    30f8:	3f c0       	rjmp	.+126    	; 0x3178 <main+0x136a>
	else if (__tmp > 65535)
    30fa:	69 a9       	ldd	r22, Y+49	; 0x31
    30fc:	7a a9       	ldd	r23, Y+50	; 0x32
    30fe:	8b a9       	ldd	r24, Y+51	; 0x33
    3100:	9c a9       	ldd	r25, Y+52	; 0x34
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	3f ef       	ldi	r19, 0xFF	; 255
    3106:	4f e7       	ldi	r20, 0x7F	; 127
    3108:	57 e4       	ldi	r21, 0x47	; 71
    310a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    310e:	18 16       	cp	r1, r24
    3110:	4c f5       	brge	.+82     	; 0x3164 <main+0x1356>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3112:	6d a9       	ldd	r22, Y+53	; 0x35
    3114:	7e a9       	ldd	r23, Y+54	; 0x36
    3116:	8f a9       	ldd	r24, Y+55	; 0x37
    3118:	98 ad       	ldd	r25, Y+56	; 0x38
    311a:	20 e0       	ldi	r18, 0x00	; 0
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	40 e2       	ldi	r20, 0x20	; 32
    3120:	51 e4       	ldi	r21, 0x41	; 65
    3122:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3126:	dc 01       	movw	r26, r24
    3128:	cb 01       	movw	r24, r22
    312a:	bc 01       	movw	r22, r24
    312c:	cd 01       	movw	r24, r26
    312e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	98 ab       	std	Y+48, r25	; 0x30
    3138:	8f a7       	std	Y+47, r24	; 0x2f
    313a:	0f c0       	rjmp	.+30     	; 0x315a <main+0x134c>
    313c:	88 ec       	ldi	r24, 0xC8	; 200
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	9e a7       	std	Y+46, r25	; 0x2e
    3142:	8d a7       	std	Y+45, r24	; 0x2d
    3144:	8d a5       	ldd	r24, Y+45	; 0x2d
    3146:	9e a5       	ldd	r25, Y+46	; 0x2e
    3148:	01 97       	sbiw	r24, 0x01	; 1
    314a:	f1 f7       	brne	.-4      	; 0x3148 <main+0x133a>
    314c:	9e a7       	std	Y+46, r25	; 0x2e
    314e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3150:	8f a5       	ldd	r24, Y+47	; 0x2f
    3152:	98 a9       	ldd	r25, Y+48	; 0x30
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	98 ab       	std	Y+48, r25	; 0x30
    3158:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    315a:	8f a5       	ldd	r24, Y+47	; 0x2f
    315c:	98 a9       	ldd	r25, Y+48	; 0x30
    315e:	00 97       	sbiw	r24, 0x00	; 0
    3160:	69 f7       	brne	.-38     	; 0x313c <main+0x132e>
    3162:	14 c0       	rjmp	.+40     	; 0x318c <main+0x137e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3164:	69 a9       	ldd	r22, Y+49	; 0x31
    3166:	7a a9       	ldd	r23, Y+50	; 0x32
    3168:	8b a9       	ldd	r24, Y+51	; 0x33
    316a:	9c a9       	ldd	r25, Y+52	; 0x34
    316c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	98 ab       	std	Y+48, r25	; 0x30
    3176:	8f a7       	std	Y+47, r24	; 0x2f
    3178:	8f a5       	ldd	r24, Y+47	; 0x2f
    317a:	98 a9       	ldd	r25, Y+48	; 0x30
    317c:	9c a7       	std	Y+44, r25	; 0x2c
    317e:	8b a7       	std	Y+43, r24	; 0x2b
    3180:	8b a5       	ldd	r24, Y+43	; 0x2b
    3182:	9c a5       	ldd	r25, Y+44	; 0x2c
    3184:	01 97       	sbiw	r24, 0x01	; 1
    3186:	f1 f7       	brne	.-4      	; 0x3184 <main+0x1376>
    3188:	9c a7       	std	Y+44, r25	; 0x2c
    318a:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(50);
				send_pass(num2);//send the pass
    318c:	ce 01       	movw	r24, r28
    318e:	86 51       	subi	r24, 0x16	; 22
    3190:	9f 4f       	sbci	r25, 0xFF	; 255
    3192:	0e 94 89 1b 	call	0x3712	; 0x3712 <send_pass>
				verifed=0;
    3196:	fe 01       	movw	r30, r28
    3198:	ec 51       	subi	r30, 0x1C	; 28
    319a:	ff 4f       	sbci	r31, 0xFF	; 255
    319c:	10 82       	st	Z, r1
				verifed = UART_recieveByte();
    319e:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <UART_recieveByte>
    31a2:	fe 01       	movw	r30, r28
    31a4:	ec 51       	subi	r30, 0x1C	; 28
    31a6:	ff 4f       	sbci	r31, 0xFF	; 255
    31a8:	80 83       	st	Z, r24
				if(verifed==0){
    31aa:	fe 01       	movw	r30, r28
    31ac:	ec 51       	subi	r30, 0x1C	; 28
    31ae:	ff 4f       	sbci	r31, 0xFF	; 255
    31b0:	80 81       	ld	r24, Z
    31b2:	88 23       	and	r24, r24
    31b4:	09 f0       	breq	.+2      	; 0x31b8 <main+0x13aa>
    31b6:	81 c0       	rjmp	.+258    	; 0x32ba <main+0x14ac>
					//if the 2 passwords aren't matched
					LCD_clearScreen();
    31b8:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_clearScreen>
					LCD_displayString("Unmatched pass");
    31bc:	82 ec       	ldi	r24, 0xC2	; 194
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_displayString>
					LCD_moveCursor(1,0);
    31c4:	81 e0       	ldi	r24, 0x01	; 1
    31c6:	60 e0       	ldi	r22, 0x00	; 0
    31c8:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_moveCursor>
					LCD_displayString("Pass unchanged");
    31cc:	81 ed       	ldi	r24, 0xD1	; 209
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_displayString>
    31d4:	80 e0       	ldi	r24, 0x00	; 0
    31d6:	90 e8       	ldi	r25, 0x80	; 128
    31d8:	ab eb       	ldi	r26, 0xBB	; 187
    31da:	b4 e4       	ldi	r27, 0x44	; 68
    31dc:	8f a3       	std	Y+39, r24	; 0x27
    31de:	98 a7       	std	Y+40, r25	; 0x28
    31e0:	a9 a7       	std	Y+41, r26	; 0x29
    31e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31e4:	6f a1       	ldd	r22, Y+39	; 0x27
    31e6:	78 a5       	ldd	r23, Y+40	; 0x28
    31e8:	89 a5       	ldd	r24, Y+41	; 0x29
    31ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    31ec:	20 e0       	ldi	r18, 0x00	; 0
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	4a ef       	ldi	r20, 0xFA	; 250
    31f2:	54 e4       	ldi	r21, 0x44	; 68
    31f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f8:	dc 01       	movw	r26, r24
    31fa:	cb 01       	movw	r24, r22
    31fc:	8b a3       	std	Y+35, r24	; 0x23
    31fe:	9c a3       	std	Y+36, r25	; 0x24
    3200:	ad a3       	std	Y+37, r26	; 0x25
    3202:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3204:	6b a1       	ldd	r22, Y+35	; 0x23
    3206:	7c a1       	ldd	r23, Y+36	; 0x24
    3208:	8d a1       	ldd	r24, Y+37	; 0x25
    320a:	9e a1       	ldd	r25, Y+38	; 0x26
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	40 e8       	ldi	r20, 0x80	; 128
    3212:	5f e3       	ldi	r21, 0x3F	; 63
    3214:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3218:	88 23       	and	r24, r24
    321a:	2c f4       	brge	.+10     	; 0x3226 <main+0x1418>
		__ticks = 1;
    321c:	81 e0       	ldi	r24, 0x01	; 1
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	9a a3       	std	Y+34, r25	; 0x22
    3222:	89 a3       	std	Y+33, r24	; 0x21
    3224:	3f c0       	rjmp	.+126    	; 0x32a4 <main+0x1496>
	else if (__tmp > 65535)
    3226:	6b a1       	ldd	r22, Y+35	; 0x23
    3228:	7c a1       	ldd	r23, Y+36	; 0x24
    322a:	8d a1       	ldd	r24, Y+37	; 0x25
    322c:	9e a1       	ldd	r25, Y+38	; 0x26
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	3f ef       	ldi	r19, 0xFF	; 255
    3232:	4f e7       	ldi	r20, 0x7F	; 127
    3234:	57 e4       	ldi	r21, 0x47	; 71
    3236:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    323a:	18 16       	cp	r1, r24
    323c:	4c f5       	brge	.+82     	; 0x3290 <main+0x1482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    323e:	6f a1       	ldd	r22, Y+39	; 0x27
    3240:	78 a5       	ldd	r23, Y+40	; 0x28
    3242:	89 a5       	ldd	r24, Y+41	; 0x29
    3244:	9a a5       	ldd	r25, Y+42	; 0x2a
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	40 e2       	ldi	r20, 0x20	; 32
    324c:	51 e4       	ldi	r21, 0x41	; 65
    324e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	bc 01       	movw	r22, r24
    3258:	cd 01       	movw	r24, r26
    325a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    325e:	dc 01       	movw	r26, r24
    3260:	cb 01       	movw	r24, r22
    3262:	9a a3       	std	Y+34, r25	; 0x22
    3264:	89 a3       	std	Y+33, r24	; 0x21
    3266:	0f c0       	rjmp	.+30     	; 0x3286 <main+0x1478>
    3268:	88 ec       	ldi	r24, 0xC8	; 200
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	98 a3       	std	Y+32, r25	; 0x20
    326e:	8f 8f       	std	Y+31, r24	; 0x1f
    3270:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3272:	98 a1       	ldd	r25, Y+32	; 0x20
    3274:	01 97       	sbiw	r24, 0x01	; 1
    3276:	f1 f7       	brne	.-4      	; 0x3274 <main+0x1466>
    3278:	98 a3       	std	Y+32, r25	; 0x20
    327a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    327c:	89 a1       	ldd	r24, Y+33	; 0x21
    327e:	9a a1       	ldd	r25, Y+34	; 0x22
    3280:	01 97       	sbiw	r24, 0x01	; 1
    3282:	9a a3       	std	Y+34, r25	; 0x22
    3284:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3286:	89 a1       	ldd	r24, Y+33	; 0x21
    3288:	9a a1       	ldd	r25, Y+34	; 0x22
    328a:	00 97       	sbiw	r24, 0x00	; 0
    328c:	69 f7       	brne	.-38     	; 0x3268 <main+0x145a>
    328e:	fc c8       	rjmp	.-3592   	; 0x2488 <main+0x67a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3290:	6b a1       	ldd	r22, Y+35	; 0x23
    3292:	7c a1       	ldd	r23, Y+36	; 0x24
    3294:	8d a1       	ldd	r24, Y+37	; 0x25
    3296:	9e a1       	ldd	r25, Y+38	; 0x26
    3298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    329c:	dc 01       	movw	r26, r24
    329e:	cb 01       	movw	r24, r22
    32a0:	9a a3       	std	Y+34, r25	; 0x22
    32a2:	89 a3       	std	Y+33, r24	; 0x21
    32a4:	89 a1       	ldd	r24, Y+33	; 0x21
    32a6:	9a a1       	ldd	r25, Y+34	; 0x22
    32a8:	9e 8f       	std	Y+30, r25	; 0x1e
    32aa:	8d 8f       	std	Y+29, r24	; 0x1d
    32ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32b0:	01 97       	sbiw	r24, 0x01	; 1
    32b2:	f1 f7       	brne	.-4      	; 0x32b0 <main+0x14a2>
    32b4:	9e 8f       	std	Y+30, r25	; 0x1e
    32b6:	8d 8f       	std	Y+29, r24	; 0x1d
    32b8:	e7 c8       	rjmp	.-3634   	; 0x2488 <main+0x67a>
					_delay_ms(1500);
				}
				else{
					//if the 2 passwords are matched
					LCD_clearScreen();
    32ba:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_clearScreen>
					LCD_displayString("Password");
    32be:	80 ee       	ldi	r24, 0xE0	; 224
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_displayString>
					LCD_moveCursor(1,0);
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	60 e0       	ldi	r22, 0x00	; 0
    32ca:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_moveCursor>
					LCD_displayString("changed");
    32ce:	89 ee       	ldi	r24, 0xE9	; 233
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_displayString>
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	90 e8       	ldi	r25, 0x80	; 128
    32da:	ab eb       	ldi	r26, 0xBB	; 187
    32dc:	b4 e4       	ldi	r27, 0x44	; 68
    32de:	89 8f       	std	Y+25, r24	; 0x19
    32e0:	9a 8f       	std	Y+26, r25	; 0x1a
    32e2:	ab 8f       	std	Y+27, r26	; 0x1b
    32e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e6:	69 8d       	ldd	r22, Y+25	; 0x19
    32e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	4a ef       	ldi	r20, 0xFA	; 250
    32f4:	54 e4       	ldi	r21, 0x44	; 68
    32f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fa:	dc 01       	movw	r26, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	8d 8b       	std	Y+21, r24	; 0x15
    3300:	9e 8b       	std	Y+22, r25	; 0x16
    3302:	af 8b       	std	Y+23, r26	; 0x17
    3304:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3306:	6d 89       	ldd	r22, Y+21	; 0x15
    3308:	7e 89       	ldd	r23, Y+22	; 0x16
    330a:	8f 89       	ldd	r24, Y+23	; 0x17
    330c:	98 8d       	ldd	r25, Y+24	; 0x18
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	40 e8       	ldi	r20, 0x80	; 128
    3314:	5f e3       	ldi	r21, 0x3F	; 63
    3316:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    331a:	88 23       	and	r24, r24
    331c:	2c f4       	brge	.+10     	; 0x3328 <main+0x151a>
		__ticks = 1;
    331e:	81 e0       	ldi	r24, 0x01	; 1
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	9c 8b       	std	Y+20, r25	; 0x14
    3324:	8b 8b       	std	Y+19, r24	; 0x13
    3326:	3f c0       	rjmp	.+126    	; 0x33a6 <main+0x1598>
	else if (__tmp > 65535)
    3328:	6d 89       	ldd	r22, Y+21	; 0x15
    332a:	7e 89       	ldd	r23, Y+22	; 0x16
    332c:	8f 89       	ldd	r24, Y+23	; 0x17
    332e:	98 8d       	ldd	r25, Y+24	; 0x18
    3330:	20 e0       	ldi	r18, 0x00	; 0
    3332:	3f ef       	ldi	r19, 0xFF	; 255
    3334:	4f e7       	ldi	r20, 0x7F	; 127
    3336:	57 e4       	ldi	r21, 0x47	; 71
    3338:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    333c:	18 16       	cp	r1, r24
    333e:	4c f5       	brge	.+82     	; 0x3392 <main+0x1584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3340:	69 8d       	ldd	r22, Y+25	; 0x19
    3342:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3344:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3346:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	40 e2       	ldi	r20, 0x20	; 32
    334e:	51 e4       	ldi	r21, 0x41	; 65
    3350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	bc 01       	movw	r22, r24
    335a:	cd 01       	movw	r24, r26
    335c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	9c 8b       	std	Y+20, r25	; 0x14
    3366:	8b 8b       	std	Y+19, r24	; 0x13
    3368:	0f c0       	rjmp	.+30     	; 0x3388 <main+0x157a>
    336a:	88 ec       	ldi	r24, 0xC8	; 200
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	9a 8b       	std	Y+18, r25	; 0x12
    3370:	89 8b       	std	Y+17, r24	; 0x11
    3372:	89 89       	ldd	r24, Y+17	; 0x11
    3374:	9a 89       	ldd	r25, Y+18	; 0x12
    3376:	01 97       	sbiw	r24, 0x01	; 1
    3378:	f1 f7       	brne	.-4      	; 0x3376 <main+0x1568>
    337a:	9a 8b       	std	Y+18, r25	; 0x12
    337c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    337e:	8b 89       	ldd	r24, Y+19	; 0x13
    3380:	9c 89       	ldd	r25, Y+20	; 0x14
    3382:	01 97       	sbiw	r24, 0x01	; 1
    3384:	9c 8b       	std	Y+20, r25	; 0x14
    3386:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3388:	8b 89       	ldd	r24, Y+19	; 0x13
    338a:	9c 89       	ldd	r25, Y+20	; 0x14
    338c:	00 97       	sbiw	r24, 0x00	; 0
    338e:	69 f7       	brne	.-38     	; 0x336a <main+0x155c>
    3390:	7b c8       	rjmp	.-3850   	; 0x2488 <main+0x67a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3392:	6d 89       	ldd	r22, Y+21	; 0x15
    3394:	7e 89       	ldd	r23, Y+22	; 0x16
    3396:	8f 89       	ldd	r24, Y+23	; 0x17
    3398:	98 8d       	ldd	r25, Y+24	; 0x18
    339a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	9c 8b       	std	Y+20, r25	; 0x14
    33a4:	8b 8b       	std	Y+19, r24	; 0x13
    33a6:	8b 89       	ldd	r24, Y+19	; 0x13
    33a8:	9c 89       	ldd	r25, Y+20	; 0x14
    33aa:	98 8b       	std	Y+16, r25	; 0x10
    33ac:	8f 87       	std	Y+15, r24	; 0x0f
    33ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    33b0:	98 89       	ldd	r25, Y+16	; 0x10
    33b2:	01 97       	sbiw	r24, 0x01	; 1
    33b4:	f1 f7       	brne	.-4      	; 0x33b2 <main+0x15a4>
    33b6:	98 8b       	std	Y+16, r25	; 0x10
    33b8:	8f 87       	std	Y+15, r24	; 0x0f
    33ba:	66 c8       	rjmp	.-3892   	; 0x2488 <main+0x67a>

			else
			{
				// if the 2 passwords do not match
				//receive the counter for the control
				uint8 falsecounter = UART_recieveByte();
    33bc:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <UART_recieveByte>
    33c0:	fe 01       	movw	r30, r28
    33c2:	ef 51       	subi	r30, 0x1F	; 31
    33c4:	ff 4f       	sbci	r31, 0xFF	; 255
    33c6:	80 83       	st	Z, r24
				if (falsecounter >= 3)
    33c8:	fe 01       	movw	r30, r28
    33ca:	ef 51       	subi	r30, 0x1F	; 31
    33cc:	ff 4f       	sbci	r31, 0xFF	; 255
    33ce:	80 81       	ld	r24, Z
    33d0:	83 30       	cpi	r24, 0x03	; 3
    33d2:	38 f0       	brcs	.+14     	; 0x33e2 <main+0x15d4>
				{
					unmatched_pass();
    33d4:	0e 94 76 1c 	call	0x38ec	; 0x38ec <unmatched_pass>
					falsecounter=0;
    33d8:	fe 01       	movw	r30, r28
    33da:	ef 51       	subi	r30, 0x1F	; 31
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	10 82       	st	Z, r1
    33e0:	53 c8       	rjmp	.-3930   	; 0x2488 <main+0x67a>
				}

				else
				{
					LCD_clearScreen();
    33e2:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_clearScreen>
					LCD_displayString("Wrong Pass");
    33e6:	85 e9       	ldi	r24, 0x95	; 149
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_displayString>
    33ee:	80 e0       	ldi	r24, 0x00	; 0
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	aa ef       	ldi	r26, 0xFA	; 250
    33f4:	b3 e4       	ldi	r27, 0x43	; 67
    33f6:	8b 87       	std	Y+11, r24	; 0x0b
    33f8:	9c 87       	std	Y+12, r25	; 0x0c
    33fa:	ad 87       	std	Y+13, r26	; 0x0d
    33fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3400:	7c 85       	ldd	r23, Y+12	; 0x0c
    3402:	8d 85       	ldd	r24, Y+13	; 0x0d
    3404:	9e 85       	ldd	r25, Y+14	; 0x0e
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	4a ef       	ldi	r20, 0xFA	; 250
    340c:	54 e4       	ldi	r21, 0x44	; 68
    340e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	8f 83       	std	Y+7, r24	; 0x07
    3418:	98 87       	std	Y+8, r25	; 0x08
    341a:	a9 87       	std	Y+9, r26	; 0x09
    341c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    341e:	6f 81       	ldd	r22, Y+7	; 0x07
    3420:	78 85       	ldd	r23, Y+8	; 0x08
    3422:	89 85       	ldd	r24, Y+9	; 0x09
    3424:	9a 85       	ldd	r25, Y+10	; 0x0a
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	40 e8       	ldi	r20, 0x80	; 128
    342c:	5f e3       	ldi	r21, 0x3F	; 63
    342e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3432:	88 23       	and	r24, r24
    3434:	2c f4       	brge	.+10     	; 0x3440 <main+0x1632>
		__ticks = 1;
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	9e 83       	std	Y+6, r25	; 0x06
    343c:	8d 83       	std	Y+5, r24	; 0x05
    343e:	40 c0       	rjmp	.+128    	; 0x34c0 <main+0x16b2>
	else if (__tmp > 65535)
    3440:	6f 81       	ldd	r22, Y+7	; 0x07
    3442:	78 85       	ldd	r23, Y+8	; 0x08
    3444:	89 85       	ldd	r24, Y+9	; 0x09
    3446:	9a 85       	ldd	r25, Y+10	; 0x0a
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	3f ef       	ldi	r19, 0xFF	; 255
    344c:	4f e7       	ldi	r20, 0x7F	; 127
    344e:	57 e4       	ldi	r21, 0x47	; 71
    3450:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3454:	18 16       	cp	r1, r24
    3456:	54 f5       	brge	.+84     	; 0x34ac <main+0x169e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3458:	6b 85       	ldd	r22, Y+11	; 0x0b
    345a:	7c 85       	ldd	r23, Y+12	; 0x0c
    345c:	8d 85       	ldd	r24, Y+13	; 0x0d
    345e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3460:	20 e0       	ldi	r18, 0x00	; 0
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	40 e2       	ldi	r20, 0x20	; 32
    3466:	51 e4       	ldi	r21, 0x41	; 65
    3468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	bc 01       	movw	r22, r24
    3472:	cd 01       	movw	r24, r26
    3474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	9e 83       	std	Y+6, r25	; 0x06
    347e:	8d 83       	std	Y+5, r24	; 0x05
    3480:	0f c0       	rjmp	.+30     	; 0x34a0 <main+0x1692>
    3482:	88 ec       	ldi	r24, 0xC8	; 200
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	9c 83       	std	Y+4, r25	; 0x04
    3488:	8b 83       	std	Y+3, r24	; 0x03
    348a:	8b 81       	ldd	r24, Y+3	; 0x03
    348c:	9c 81       	ldd	r25, Y+4	; 0x04
    348e:	01 97       	sbiw	r24, 0x01	; 1
    3490:	f1 f7       	brne	.-4      	; 0x348e <main+0x1680>
    3492:	9c 83       	std	Y+4, r25	; 0x04
    3494:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3496:	8d 81       	ldd	r24, Y+5	; 0x05
    3498:	9e 81       	ldd	r25, Y+6	; 0x06
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	9e 83       	std	Y+6, r25	; 0x06
    349e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a0:	8d 81       	ldd	r24, Y+5	; 0x05
    34a2:	9e 81       	ldd	r25, Y+6	; 0x06
    34a4:	00 97       	sbiw	r24, 0x00	; 0
    34a6:	69 f7       	brne	.-38     	; 0x3482 <main+0x1674>
    34a8:	0c 94 44 12 	jmp	0x2488	; 0x2488 <main+0x67a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ac:	6f 81       	ldd	r22, Y+7	; 0x07
    34ae:	78 85       	ldd	r23, Y+8	; 0x08
    34b0:	89 85       	ldd	r24, Y+9	; 0x09
    34b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	9e 83       	std	Y+6, r25	; 0x06
    34be:	8d 83       	std	Y+5, r24	; 0x05
    34c0:	8d 81       	ldd	r24, Y+5	; 0x05
    34c2:	9e 81       	ldd	r25, Y+6	; 0x06
    34c4:	9a 83       	std	Y+2, r25	; 0x02
    34c6:	89 83       	std	Y+1, r24	; 0x01
    34c8:	89 81       	ldd	r24, Y+1	; 0x01
    34ca:	9a 81       	ldd	r25, Y+2	; 0x02
    34cc:	01 97       	sbiw	r24, 0x01	; 1
    34ce:	f1 f7       	brne	.-4      	; 0x34cc <main+0x16be>
    34d0:	9a 83       	std	Y+2, r25	; 0x02
    34d2:	89 83       	std	Y+1, r24	; 0x01
    34d4:	0c 94 44 12 	jmp	0x2488	; 0x2488 <main+0x67a>

000034d8 <creat_password>:
		}
	}
}

void creat_password(uint8 *num1)
{
    34d8:	0f 93       	push	r16
    34da:	1f 93       	push	r17
    34dc:	df 93       	push	r29
    34de:	cf 93       	push	r28
    34e0:	cd b7       	in	r28, 0x3d	; 61
    34e2:	de b7       	in	r29, 0x3e	; 62
    34e4:	6f 97       	sbiw	r28, 0x1f	; 31
    34e6:	0f b6       	in	r0, 0x3f	; 63
    34e8:	f8 94       	cli
    34ea:	de bf       	out	0x3e, r29	; 62
    34ec:	0f be       	out	0x3f, r0	; 63
    34ee:	cd bf       	out	0x3d, r28	; 61
    34f0:	9f 8f       	std	Y+31, r25	; 0x1f
    34f2:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 i=0;
    34f4:	1d 8e       	std	Y+29, r1	; 0x1d
//takes the numbers from the keypad
	for (i=0 ; i<6 ; ++i)
    34f6:	1d 8e       	std	Y+29, r1	; 0x1d
    34f8:	8b c0       	rjmp	.+278    	; 0x3610 <creat_password+0x138>
	{
		while ((KEYPAD_getPressedKey() != 13)  &&  (i==5)){};
    34fa:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <KEYPAD_getPressedKey>
    34fe:	8d 30       	cpi	r24, 0x0D	; 13
    3500:	19 f0       	breq	.+6      	; 0x3508 <creat_password+0x30>
    3502:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3504:	85 30       	cpi	r24, 0x05	; 5
    3506:	c9 f3       	breq	.-14     	; 0x34fa <creat_password+0x22>

		num1[i] = KEYPAD_getPressedKey();
    3508:	8d 8d       	ldd	r24, Y+29	; 0x1d
    350a:	28 2f       	mov	r18, r24
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3510:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3512:	8c 01       	movw	r16, r24
    3514:	02 0f       	add	r16, r18
    3516:	13 1f       	adc	r17, r19
    3518:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <KEYPAD_getPressedKey>
    351c:	f8 01       	movw	r30, r16
    351e:	80 83       	st	Z, r24
    3520:	80 e0       	ldi	r24, 0x00	; 0
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	a6 e1       	ldi	r26, 0x16	; 22
    3526:	b4 e4       	ldi	r27, 0x44	; 68
    3528:	89 8f       	std	Y+25, r24	; 0x19
    352a:	9a 8f       	std	Y+26, r25	; 0x1a
    352c:	ab 8f       	std	Y+27, r26	; 0x1b
    352e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3530:	69 8d       	ldd	r22, Y+25	; 0x19
    3532:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3534:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3536:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3538:	20 e0       	ldi	r18, 0x00	; 0
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	4a ef       	ldi	r20, 0xFA	; 250
    353e:	54 e4       	ldi	r21, 0x44	; 68
    3540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3544:	dc 01       	movw	r26, r24
    3546:	cb 01       	movw	r24, r22
    3548:	8d 8b       	std	Y+21, r24	; 0x15
    354a:	9e 8b       	std	Y+22, r25	; 0x16
    354c:	af 8b       	std	Y+23, r26	; 0x17
    354e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3550:	6d 89       	ldd	r22, Y+21	; 0x15
    3552:	7e 89       	ldd	r23, Y+22	; 0x16
    3554:	8f 89       	ldd	r24, Y+23	; 0x17
    3556:	98 8d       	ldd	r25, Y+24	; 0x18
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	30 e0       	ldi	r19, 0x00	; 0
    355c:	40 e8       	ldi	r20, 0x80	; 128
    355e:	5f e3       	ldi	r21, 0x3F	; 63
    3560:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3564:	88 23       	and	r24, r24
    3566:	2c f4       	brge	.+10     	; 0x3572 <creat_password+0x9a>
		__ticks = 1;
    3568:	81 e0       	ldi	r24, 0x01	; 1
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	9c 8b       	std	Y+20, r25	; 0x14
    356e:	8b 8b       	std	Y+19, r24	; 0x13
    3570:	3f c0       	rjmp	.+126    	; 0x35f0 <creat_password+0x118>
	else if (__tmp > 65535)
    3572:	6d 89       	ldd	r22, Y+21	; 0x15
    3574:	7e 89       	ldd	r23, Y+22	; 0x16
    3576:	8f 89       	ldd	r24, Y+23	; 0x17
    3578:	98 8d       	ldd	r25, Y+24	; 0x18
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	3f ef       	ldi	r19, 0xFF	; 255
    357e:	4f e7       	ldi	r20, 0x7F	; 127
    3580:	57 e4       	ldi	r21, 0x47	; 71
    3582:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3586:	18 16       	cp	r1, r24
    3588:	4c f5       	brge	.+82     	; 0x35dc <creat_password+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    358a:	69 8d       	ldd	r22, Y+25	; 0x19
    358c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    358e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3590:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3592:	20 e0       	ldi	r18, 0x00	; 0
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	40 e2       	ldi	r20, 0x20	; 32
    3598:	51 e4       	ldi	r21, 0x41	; 65
    359a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	bc 01       	movw	r22, r24
    35a4:	cd 01       	movw	r24, r26
    35a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	9c 8b       	std	Y+20, r25	; 0x14
    35b0:	8b 8b       	std	Y+19, r24	; 0x13
    35b2:	0f c0       	rjmp	.+30     	; 0x35d2 <creat_password+0xfa>
    35b4:	88 ec       	ldi	r24, 0xC8	; 200
    35b6:	90 e0       	ldi	r25, 0x00	; 0
    35b8:	9a 8b       	std	Y+18, r25	; 0x12
    35ba:	89 8b       	std	Y+17, r24	; 0x11
    35bc:	89 89       	ldd	r24, Y+17	; 0x11
    35be:	9a 89       	ldd	r25, Y+18	; 0x12
    35c0:	01 97       	sbiw	r24, 0x01	; 1
    35c2:	f1 f7       	brne	.-4      	; 0x35c0 <creat_password+0xe8>
    35c4:	9a 8b       	std	Y+18, r25	; 0x12
    35c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c8:	8b 89       	ldd	r24, Y+19	; 0x13
    35ca:	9c 89       	ldd	r25, Y+20	; 0x14
    35cc:	01 97       	sbiw	r24, 0x01	; 1
    35ce:	9c 8b       	std	Y+20, r25	; 0x14
    35d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35d2:	8b 89       	ldd	r24, Y+19	; 0x13
    35d4:	9c 89       	ldd	r25, Y+20	; 0x14
    35d6:	00 97       	sbiw	r24, 0x00	; 0
    35d8:	69 f7       	brne	.-38     	; 0x35b4 <creat_password+0xdc>
    35da:	14 c0       	rjmp	.+40     	; 0x3604 <creat_password+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35dc:	6d 89       	ldd	r22, Y+21	; 0x15
    35de:	7e 89       	ldd	r23, Y+22	; 0x16
    35e0:	8f 89       	ldd	r24, Y+23	; 0x17
    35e2:	98 8d       	ldd	r25, Y+24	; 0x18
    35e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e8:	dc 01       	movw	r26, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	9c 8b       	std	Y+20, r25	; 0x14
    35ee:	8b 8b       	std	Y+19, r24	; 0x13
    35f0:	8b 89       	ldd	r24, Y+19	; 0x13
    35f2:	9c 89       	ldd	r25, Y+20	; 0x14
    35f4:	98 8b       	std	Y+16, r25	; 0x10
    35f6:	8f 87       	std	Y+15, r24	; 0x0f
    35f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    35fa:	98 89       	ldd	r25, Y+16	; 0x10
    35fc:	01 97       	sbiw	r24, 0x01	; 1
    35fe:	f1 f7       	brne	.-4      	; 0x35fc <creat_password+0x124>
    3600:	98 8b       	std	Y+16, r25	; 0x10
    3602:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(600);
		LCD_displayCharacter('*');
    3604:	8a e2       	ldi	r24, 0x2A	; 42
    3606:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <LCD_displayCharacter>

void creat_password(uint8 *num1)
{
	uint8 i=0;
//takes the numbers from the keypad
	for (i=0 ; i<6 ; ++i)
    360a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    360c:	8f 5f       	subi	r24, 0xFF	; 255
    360e:	8d 8f       	std	Y+29, r24	; 0x1d
    3610:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3612:	86 30       	cpi	r24, 0x06	; 6
    3614:	08 f4       	brcc	.+2      	; 0x3618 <creat_password+0x140>
    3616:	71 cf       	rjmp	.-286    	; 0x34fa <creat_password+0x22>
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	aa ef       	ldi	r26, 0xFA	; 250
    361e:	b3 e4       	ldi	r27, 0x43	; 67
    3620:	8b 87       	std	Y+11, r24	; 0x0b
    3622:	9c 87       	std	Y+12, r25	; 0x0c
    3624:	ad 87       	std	Y+13, r26	; 0x0d
    3626:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3628:	6b 85       	ldd	r22, Y+11	; 0x0b
    362a:	7c 85       	ldd	r23, Y+12	; 0x0c
    362c:	8d 85       	ldd	r24, Y+13	; 0x0d
    362e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3630:	20 e0       	ldi	r18, 0x00	; 0
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	4a ef       	ldi	r20, 0xFA	; 250
    3636:	54 e4       	ldi	r21, 0x44	; 68
    3638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363c:	dc 01       	movw	r26, r24
    363e:	cb 01       	movw	r24, r22
    3640:	8f 83       	std	Y+7, r24	; 0x07
    3642:	98 87       	std	Y+8, r25	; 0x08
    3644:	a9 87       	std	Y+9, r26	; 0x09
    3646:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3648:	6f 81       	ldd	r22, Y+7	; 0x07
    364a:	78 85       	ldd	r23, Y+8	; 0x08
    364c:	89 85       	ldd	r24, Y+9	; 0x09
    364e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	40 e8       	ldi	r20, 0x80	; 128
    3656:	5f e3       	ldi	r21, 0x3F	; 63
    3658:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    365c:	88 23       	and	r24, r24
    365e:	2c f4       	brge	.+10     	; 0x366a <creat_password+0x192>
		__ticks = 1;
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	9e 83       	std	Y+6, r25	; 0x06
    3666:	8d 83       	std	Y+5, r24	; 0x05
    3668:	3f c0       	rjmp	.+126    	; 0x36e8 <creat_password+0x210>
	else if (__tmp > 65535)
    366a:	6f 81       	ldd	r22, Y+7	; 0x07
    366c:	78 85       	ldd	r23, Y+8	; 0x08
    366e:	89 85       	ldd	r24, Y+9	; 0x09
    3670:	9a 85       	ldd	r25, Y+10	; 0x0a
    3672:	20 e0       	ldi	r18, 0x00	; 0
    3674:	3f ef       	ldi	r19, 0xFF	; 255
    3676:	4f e7       	ldi	r20, 0x7F	; 127
    3678:	57 e4       	ldi	r21, 0x47	; 71
    367a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    367e:	18 16       	cp	r1, r24
    3680:	4c f5       	brge	.+82     	; 0x36d4 <creat_password+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3682:	6b 85       	ldd	r22, Y+11	; 0x0b
    3684:	7c 85       	ldd	r23, Y+12	; 0x0c
    3686:	8d 85       	ldd	r24, Y+13	; 0x0d
    3688:	9e 85       	ldd	r25, Y+14	; 0x0e
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	40 e2       	ldi	r20, 0x20	; 32
    3690:	51 e4       	ldi	r21, 0x41	; 65
    3692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	bc 01       	movw	r22, r24
    369c:	cd 01       	movw	r24, r26
    369e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a2:	dc 01       	movw	r26, r24
    36a4:	cb 01       	movw	r24, r22
    36a6:	9e 83       	std	Y+6, r25	; 0x06
    36a8:	8d 83       	std	Y+5, r24	; 0x05
    36aa:	0f c0       	rjmp	.+30     	; 0x36ca <creat_password+0x1f2>
    36ac:	88 ec       	ldi	r24, 0xC8	; 200
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	9c 83       	std	Y+4, r25	; 0x04
    36b2:	8b 83       	std	Y+3, r24	; 0x03
    36b4:	8b 81       	ldd	r24, Y+3	; 0x03
    36b6:	9c 81       	ldd	r25, Y+4	; 0x04
    36b8:	01 97       	sbiw	r24, 0x01	; 1
    36ba:	f1 f7       	brne	.-4      	; 0x36b8 <creat_password+0x1e0>
    36bc:	9c 83       	std	Y+4, r25	; 0x04
    36be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c0:	8d 81       	ldd	r24, Y+5	; 0x05
    36c2:	9e 81       	ldd	r25, Y+6	; 0x06
    36c4:	01 97       	sbiw	r24, 0x01	; 1
    36c6:	9e 83       	std	Y+6, r25	; 0x06
    36c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ca:	8d 81       	ldd	r24, Y+5	; 0x05
    36cc:	9e 81       	ldd	r25, Y+6	; 0x06
    36ce:	00 97       	sbiw	r24, 0x00	; 0
    36d0:	69 f7       	brne	.-38     	; 0x36ac <creat_password+0x1d4>
    36d2:	14 c0       	rjmp	.+40     	; 0x36fc <creat_password+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d4:	6f 81       	ldd	r22, Y+7	; 0x07
    36d6:	78 85       	ldd	r23, Y+8	; 0x08
    36d8:	89 85       	ldd	r24, Y+9	; 0x09
    36da:	9a 85       	ldd	r25, Y+10	; 0x0a
    36dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e0:	dc 01       	movw	r26, r24
    36e2:	cb 01       	movw	r24, r22
    36e4:	9e 83       	std	Y+6, r25	; 0x06
    36e6:	8d 83       	std	Y+5, r24	; 0x05
    36e8:	8d 81       	ldd	r24, Y+5	; 0x05
    36ea:	9e 81       	ldd	r25, Y+6	; 0x06
    36ec:	9a 83       	std	Y+2, r25	; 0x02
    36ee:	89 83       	std	Y+1, r24	; 0x01
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	9a 81       	ldd	r25, Y+2	; 0x02
    36f4:	01 97       	sbiw	r24, 0x01	; 1
    36f6:	f1 f7       	brne	.-4      	; 0x36f4 <creat_password+0x21c>
    36f8:	9a 83       	std	Y+2, r25	; 0x02
    36fa:	89 83       	std	Y+1, r24	; 0x01
		num1[i] = KEYPAD_getPressedKey();
		_delay_ms(600);
		LCD_displayCharacter('*');
	}
	_delay_ms(500);
}
    36fc:	6f 96       	adiw	r28, 0x1f	; 31
    36fe:	0f b6       	in	r0, 0x3f	; 63
    3700:	f8 94       	cli
    3702:	de bf       	out	0x3e, r29	; 62
    3704:	0f be       	out	0x3f, r0	; 63
    3706:	cd bf       	out	0x3d, r28	; 61
    3708:	cf 91       	pop	r28
    370a:	df 91       	pop	r29
    370c:	1f 91       	pop	r17
    370e:	0f 91       	pop	r16
    3710:	08 95       	ret

00003712 <send_pass>:

void send_pass(uint8 *number)
{
    3712:	df 93       	push	r29
    3714:	cf 93       	push	r28
    3716:	cd b7       	in	r28, 0x3d	; 61
    3718:	de b7       	in	r29, 0x3e	; 62
    371a:	61 97       	sbiw	r28, 0x11	; 17
    371c:	0f b6       	in	r0, 0x3f	; 63
    371e:	f8 94       	cli
    3720:	de bf       	out	0x3e, r29	; 62
    3722:	0f be       	out	0x3f, r0	; 63
    3724:	cd bf       	out	0x3d, r28	; 61
    3726:	99 8b       	std	Y+17, r25	; 0x11
    3728:	88 8b       	std	Y+16, r24	; 0x10
	//send the password with UART
	uint8 i=0;
    372a:	1f 86       	std	Y+15, r1	; 0x0f
	for (i=0 ; i<5 ; i++)
    372c:	1f 86       	std	Y+15, r1	; 0x0f
    372e:	0e c0       	rjmp	.+28     	; 0x374c <send_pass+0x3a>
	{
		UART_sendByte (number[i]);
    3730:	8f 85       	ldd	r24, Y+15	; 0x0f
    3732:	28 2f       	mov	r18, r24
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	88 89       	ldd	r24, Y+16	; 0x10
    3738:	99 89       	ldd	r25, Y+17	; 0x11
    373a:	fc 01       	movw	r30, r24
    373c:	e2 0f       	add	r30, r18
    373e:	f3 1f       	adc	r31, r19
    3740:	80 81       	ld	r24, Z
    3742:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <UART_sendByte>

void send_pass(uint8 *number)
{
	//send the password with UART
	uint8 i=0;
	for (i=0 ; i<5 ; i++)
    3746:	8f 85       	ldd	r24, Y+15	; 0x0f
    3748:	8f 5f       	subi	r24, 0xFF	; 255
    374a:	8f 87       	std	Y+15, r24	; 0x0f
    374c:	8f 85       	ldd	r24, Y+15	; 0x0f
    374e:	85 30       	cpi	r24, 0x05	; 5
    3750:	78 f3       	brcs	.-34     	; 0x3730 <send_pass+0x1e>
    3752:	80 e0       	ldi	r24, 0x00	; 0
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	a8 e4       	ldi	r26, 0x48	; 72
    3758:	b2 e4       	ldi	r27, 0x42	; 66
    375a:	8b 87       	std	Y+11, r24	; 0x0b
    375c:	9c 87       	std	Y+12, r25	; 0x0c
    375e:	ad 87       	std	Y+13, r26	; 0x0d
    3760:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3762:	6b 85       	ldd	r22, Y+11	; 0x0b
    3764:	7c 85       	ldd	r23, Y+12	; 0x0c
    3766:	8d 85       	ldd	r24, Y+13	; 0x0d
    3768:	9e 85       	ldd	r25, Y+14	; 0x0e
    376a:	20 e0       	ldi	r18, 0x00	; 0
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	4a ef       	ldi	r20, 0xFA	; 250
    3770:	54 e4       	ldi	r21, 0x44	; 68
    3772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3776:	dc 01       	movw	r26, r24
    3778:	cb 01       	movw	r24, r22
    377a:	8f 83       	std	Y+7, r24	; 0x07
    377c:	98 87       	std	Y+8, r25	; 0x08
    377e:	a9 87       	std	Y+9, r26	; 0x09
    3780:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3782:	6f 81       	ldd	r22, Y+7	; 0x07
    3784:	78 85       	ldd	r23, Y+8	; 0x08
    3786:	89 85       	ldd	r24, Y+9	; 0x09
    3788:	9a 85       	ldd	r25, Y+10	; 0x0a
    378a:	20 e0       	ldi	r18, 0x00	; 0
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	40 e8       	ldi	r20, 0x80	; 128
    3790:	5f e3       	ldi	r21, 0x3F	; 63
    3792:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3796:	88 23       	and	r24, r24
    3798:	2c f4       	brge	.+10     	; 0x37a4 <send_pass+0x92>
		__ticks = 1;
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	9e 83       	std	Y+6, r25	; 0x06
    37a0:	8d 83       	std	Y+5, r24	; 0x05
    37a2:	3f c0       	rjmp	.+126    	; 0x3822 <send_pass+0x110>
	else if (__tmp > 65535)
    37a4:	6f 81       	ldd	r22, Y+7	; 0x07
    37a6:	78 85       	ldd	r23, Y+8	; 0x08
    37a8:	89 85       	ldd	r24, Y+9	; 0x09
    37aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ac:	20 e0       	ldi	r18, 0x00	; 0
    37ae:	3f ef       	ldi	r19, 0xFF	; 255
    37b0:	4f e7       	ldi	r20, 0x7F	; 127
    37b2:	57 e4       	ldi	r21, 0x47	; 71
    37b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37b8:	18 16       	cp	r1, r24
    37ba:	4c f5       	brge	.+82     	; 0x380e <send_pass+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    37be:	7c 85       	ldd	r23, Y+12	; 0x0c
    37c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    37c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    37c4:	20 e0       	ldi	r18, 0x00	; 0
    37c6:	30 e0       	ldi	r19, 0x00	; 0
    37c8:	40 e2       	ldi	r20, 0x20	; 32
    37ca:	51 e4       	ldi	r21, 0x41	; 65
    37cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d0:	dc 01       	movw	r26, r24
    37d2:	cb 01       	movw	r24, r22
    37d4:	bc 01       	movw	r22, r24
    37d6:	cd 01       	movw	r24, r26
    37d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37dc:	dc 01       	movw	r26, r24
    37de:	cb 01       	movw	r24, r22
    37e0:	9e 83       	std	Y+6, r25	; 0x06
    37e2:	8d 83       	std	Y+5, r24	; 0x05
    37e4:	0f c0       	rjmp	.+30     	; 0x3804 <send_pass+0xf2>
    37e6:	88 ec       	ldi	r24, 0xC8	; 200
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	9c 83       	std	Y+4, r25	; 0x04
    37ec:	8b 83       	std	Y+3, r24	; 0x03
    37ee:	8b 81       	ldd	r24, Y+3	; 0x03
    37f0:	9c 81       	ldd	r25, Y+4	; 0x04
    37f2:	01 97       	sbiw	r24, 0x01	; 1
    37f4:	f1 f7       	brne	.-4      	; 0x37f2 <send_pass+0xe0>
    37f6:	9c 83       	std	Y+4, r25	; 0x04
    37f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37fa:	8d 81       	ldd	r24, Y+5	; 0x05
    37fc:	9e 81       	ldd	r25, Y+6	; 0x06
    37fe:	01 97       	sbiw	r24, 0x01	; 1
    3800:	9e 83       	std	Y+6, r25	; 0x06
    3802:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3804:	8d 81       	ldd	r24, Y+5	; 0x05
    3806:	9e 81       	ldd	r25, Y+6	; 0x06
    3808:	00 97       	sbiw	r24, 0x00	; 0
    380a:	69 f7       	brne	.-38     	; 0x37e6 <send_pass+0xd4>
    380c:	14 c0       	rjmp	.+40     	; 0x3836 <send_pass+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    380e:	6f 81       	ldd	r22, Y+7	; 0x07
    3810:	78 85       	ldd	r23, Y+8	; 0x08
    3812:	89 85       	ldd	r24, Y+9	; 0x09
    3814:	9a 85       	ldd	r25, Y+10	; 0x0a
    3816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381a:	dc 01       	movw	r26, r24
    381c:	cb 01       	movw	r24, r22
    381e:	9e 83       	std	Y+6, r25	; 0x06
    3820:	8d 83       	std	Y+5, r24	; 0x05
    3822:	8d 81       	ldd	r24, Y+5	; 0x05
    3824:	9e 81       	ldd	r25, Y+6	; 0x06
    3826:	9a 83       	std	Y+2, r25	; 0x02
    3828:	89 83       	std	Y+1, r24	; 0x01
    382a:	89 81       	ldd	r24, Y+1	; 0x01
    382c:	9a 81       	ldd	r25, Y+2	; 0x02
    382e:	01 97       	sbiw	r24, 0x01	; 1
    3830:	f1 f7       	brne	.-4      	; 0x382e <send_pass+0x11c>
    3832:	9a 83       	std	Y+2, r25	; 0x02
    3834:	89 83       	std	Y+1, r24	; 0x01
	{
		UART_sendByte (number[i]);
	}
	_delay_ms(50);
}
    3836:	61 96       	adiw	r28, 0x11	; 17
    3838:	0f b6       	in	r0, 0x3f	; 63
    383a:	f8 94       	cli
    383c:	de bf       	out	0x3e, r29	; 62
    383e:	0f be       	out	0x3f, r0	; 63
    3840:	cd bf       	out	0x3d, r28	; 61
    3842:	cf 91       	pop	r28
    3844:	df 91       	pop	r29
    3846:	08 95       	ret

00003848 <main_options>:

void main_options(void)
{
    3848:	df 93       	push	r29
    384a:	cf 93       	push	r28
    384c:	cd b7       	in	r28, 0x3d	; 61
    384e:	de b7       	in	r29, 0x3e	; 62
	//display on the lcd
	LCD_clearScreen();
    3850:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_clearScreen>
	LCD_displayString("+ : Open Door ");
    3854:	81 ef       	ldi	r24, 0xF1	; 241
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_displayString>
	LCD_moveCursor(1,0);
    385c:	81 e0       	ldi	r24, 0x01	; 1
    385e:	60 e0       	ldi	r22, 0x00	; 0
    3860:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
    3864:	80 e0       	ldi	r24, 0x00	; 0
    3866:	91 e0       	ldi	r25, 0x01	; 1
    3868:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_displayString>
}
    386c:	cf 91       	pop	r28
    386e:	df 91       	pop	r29
    3870:	08 95       	ret

00003872 <main_choice1>:

void main_choice1(void)
{
    3872:	df 93       	push	r29
    3874:	cf 93       	push	r28
    3876:	cd b7       	in	r28, 0x3d	; 61
    3878:	de b7       	in	r29, 0x3e	; 62
	//set the init to start the timer
	Timer1_init(&timer1_Configurations_CTC);
    387a:	82 e5       	ldi	r24, 0x52	; 82
    387c:	91 e0       	ldi	r25, 0x01	; 1
    387e:	0e 94 c2 1c 	call	0x3984	; 0x3984 <Timer1_init>
	LCD_clearScreen();
    3882:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_clearScreen>
	LCD_displayString("Door unlocking");
    3886:	80 e1       	ldi	r24, 0x10	; 16
    3888:	91 e0       	ldi	r25, 0x01	; 1
    388a:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_displayString>

	while(count1<15);
    388e:	80 91 5a 01 	lds	r24, 0x015A
    3892:	8f 30       	cpi	r24, 0x0F	; 15
    3894:	e0 f3       	brcs	.-8      	; 0x388e <main_choice1+0x1c>
	count1=0;
    3896:	10 92 5a 01 	sts	0x015A, r1
	LCD_clearScreen();
    389a:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_clearScreen>
	LCD_displayString("Door opened");
    389e:	8f e1       	ldi	r24, 0x1F	; 31
    38a0:	91 e0       	ldi	r25, 0x01	; 1
    38a2:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_displayString>

	while(count1<3);
    38a6:	80 91 5a 01 	lds	r24, 0x015A
    38aa:	83 30       	cpi	r24, 0x03	; 3
    38ac:	e0 f3       	brcs	.-8      	; 0x38a6 <main_choice1+0x34>
	count1=0;
    38ae:	10 92 5a 01 	sts	0x015A, r1
	LCD_clearScreen();
    38b2:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_clearScreen>
	LCD_displayString("Door locking");
    38b6:	8b e2       	ldi	r24, 0x2B	; 43
    38b8:	91 e0       	ldi	r25, 0x01	; 1
    38ba:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_displayString>

	while(count1<15);
    38be:	80 91 5a 01 	lds	r24, 0x015A
    38c2:	8f 30       	cpi	r24, 0x0F	; 15
    38c4:	e0 f3       	brcs	.-8      	; 0x38be <main_choice1+0x4c>
	count1=0;
    38c6:	10 92 5a 01 	sts	0x015A, r1

	Timer1_deInit();
    38ca:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <Timer1_deInit>

}
    38ce:	cf 91       	pop	r28
    38d0:	df 91       	pop	r29
    38d2:	08 95       	ret

000038d4 <timer_count_CTC>:

void timer_count_CTC(void)
{
    38d4:	df 93       	push	r29
    38d6:	cf 93       	push	r28
    38d8:	cd b7       	in	r28, 0x3d	; 61
    38da:	de b7       	in	r29, 0x3e	; 62
	count1++;
    38dc:	80 91 5a 01 	lds	r24, 0x015A
    38e0:	8f 5f       	subi	r24, 0xFF	; 255
    38e2:	80 93 5a 01 	sts	0x015A, r24
}
    38e6:	cf 91       	pop	r28
    38e8:	df 91       	pop	r29
    38ea:	08 95       	ret

000038ec <unmatched_pass>:

void unmatched_pass(void)
{
    38ec:	df 93       	push	r29
    38ee:	cf 93       	push	r28
    38f0:	cd b7       	in	r28, 0x3d	; 61
    38f2:	de b7       	in	r29, 0x3e	; 62
	Timer1_init(&timer1_Configurations_CTC);
    38f4:	82 e5       	ldi	r24, 0x52	; 82
    38f6:	91 e0       	ldi	r25, 0x01	; 1
    38f8:	0e 94 c2 1c 	call	0x3984	; 0x3984 <Timer1_init>
	LCD_clearScreen();
    38fc:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <LCD_clearScreen>
	LCD_displayString ("ERROOOOOOR");//haramiiiiii
    3900:	88 e3       	ldi	r24, 0x38	; 56
    3902:	91 e0       	ldi	r25, 0x01	; 1
    3904:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <LCD_displayString>

	while (count1 <60);
    3908:	80 91 5a 01 	lds	r24, 0x015A
    390c:	8c 33       	cpi	r24, 0x3C	; 60
    390e:	e0 f3       	brcs	.-8      	; 0x3908 <unmatched_pass+0x1c>
	count1=0;
    3910:	10 92 5a 01 	sts	0x015A, r1
	Timer1_deInit();
    3914:	0e 94 22 1d 	call	0x3a44	; 0x3a44 <Timer1_deInit>
}
    3918:	cf 91       	pop	r28
    391a:	df 91       	pop	r29
    391c:	08 95       	ret

0000391e <__vector_7>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

#if(TIMER1_CTC==1)
ISR(TIMER1_COMPA_vect)
{
    391e:	1f 92       	push	r1
    3920:	0f 92       	push	r0
    3922:	0f b6       	in	r0, 0x3f	; 63
    3924:	0f 92       	push	r0
    3926:	11 24       	eor	r1, r1
    3928:	2f 93       	push	r18
    392a:	3f 93       	push	r19
    392c:	4f 93       	push	r20
    392e:	5f 93       	push	r21
    3930:	6f 93       	push	r22
    3932:	7f 93       	push	r23
    3934:	8f 93       	push	r24
    3936:	9f 93       	push	r25
    3938:	af 93       	push	r26
    393a:	bf 93       	push	r27
    393c:	ef 93       	push	r30
    393e:	ff 93       	push	r31
    3940:	df 93       	push	r29
    3942:	cf 93       	push	r28
    3944:	cd b7       	in	r28, 0x3d	; 61
    3946:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3948:	80 91 58 01 	lds	r24, 0x0158
    394c:	90 91 59 01 	lds	r25, 0x0159
    3950:	00 97       	sbiw	r24, 0x00	; 0
    3952:	29 f0       	breq	.+10     	; 0x395e <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3954:	e0 91 58 01 	lds	r30, 0x0158
    3958:	f0 91 59 01 	lds	r31, 0x0159
    395c:	09 95       	icall
	}
}
    395e:	cf 91       	pop	r28
    3960:	df 91       	pop	r29
    3962:	ff 91       	pop	r31
    3964:	ef 91       	pop	r30
    3966:	bf 91       	pop	r27
    3968:	af 91       	pop	r26
    396a:	9f 91       	pop	r25
    396c:	8f 91       	pop	r24
    396e:	7f 91       	pop	r23
    3970:	6f 91       	pop	r22
    3972:	5f 91       	pop	r21
    3974:	4f 91       	pop	r20
    3976:	3f 91       	pop	r19
    3978:	2f 91       	pop	r18
    397a:	0f 90       	pop	r0
    397c:	0f be       	out	0x3f, r0	; 63
    397e:	0f 90       	pop	r0
    3980:	1f 90       	pop	r1
    3982:	18 95       	reti

00003984 <Timer1_init>:
 *Description
⮚ Function to initialize the Timer driver
Inputs: pointer to the configuration structure with type
Timer1_ConfigType
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    3984:	df 93       	push	r29
    3986:	cf 93       	push	r28
    3988:	00 d0       	rcall	.+0      	; 0x398a <Timer1_init+0x6>
    398a:	cd b7       	in	r28, 0x3d	; 61
    398c:	de b7       	in	r29, 0x3e	; 62
    398e:	9a 83       	std	Y+2, r25	; 0x02
    3990:	89 83       	std	Y+1, r24	; 0x01

	/*FOC1A/FOC1B bits are only active when the WGM13:0 bits specifies a non-PWM mode
	 */
	SET_BIT(TCCR1A,FOC1A); /* for non-PWM mode */
    3992:	af e4       	ldi	r26, 0x4F	; 79
    3994:	b0 e0       	ldi	r27, 0x00	; 0
    3996:	ef e4       	ldi	r30, 0x4F	; 79
    3998:	f0 e0       	ldi	r31, 0x00	; 0
    399a:	80 81       	ld	r24, Z
    399c:	88 60       	ori	r24, 0x08	; 8
    399e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
    39a0:	af e4       	ldi	r26, 0x4F	; 79
    39a2:	b0 e0       	ldi	r27, 0x00	; 0
    39a4:	ef e4       	ldi	r30, 0x4F	; 79
    39a6:	f0 e0       	ldi	r31, 0x00	; 0
    39a8:	80 81       	ld	r24, Z
    39aa:	84 60       	ori	r24, 0x04	; 4
    39ac:	8c 93       	st	X, r24
 * TCNT1 take the initial value
 * OCR1A and OCR1B IS THE COMPARE VALUE IN THE COMAPRE REGISTER
 * For TIMSK We have 2 compare match interrupt and 1 for the overflow
 */

	TCCR1B=(Config_Ptr->prescaler);
    39ae:	ae e4       	ldi	r26, 0x4E	; 78
    39b0:	b0 e0       	ldi	r27, 0x00	; 0
    39b2:	e9 81       	ldd	r30, Y+1	; 0x01
    39b4:	fa 81       	ldd	r31, Y+2	; 0x02
    39b6:	84 81       	ldd	r24, Z+4	; 0x04
    39b8:	8c 93       	st	X, r24
	TCNT1=(Config_Ptr->initial_value);
    39ba:	ac e4       	ldi	r26, 0x4C	; 76
    39bc:	b0 e0       	ldi	r27, 0x00	; 0
    39be:	e9 81       	ldd	r30, Y+1	; 0x01
    39c0:	fa 81       	ldd	r31, Y+2	; 0x02
    39c2:	80 81       	ld	r24, Z
    39c4:	91 81       	ldd	r25, Z+1	; 0x01
    39c6:	11 96       	adiw	r26, 0x01	; 1
    39c8:	9c 93       	st	X, r25
    39ca:	8e 93       	st	-X, r24

	if( (Config_Ptr -> mode) == NORMAL )
    39cc:	e9 81       	ldd	r30, Y+1	; 0x01
    39ce:	fa 81       	ldd	r31, Y+2	; 0x02
    39d0:	85 81       	ldd	r24, Z+5	; 0x05
    39d2:	88 23       	and	r24, r24
    39d4:	79 f4       	brne	.+30     	; 0x39f4 <Timer1_init+0x70>
	{
		/* Enable interrupts for overflow mode */
		SET_BIT(TIMSK,TOIE1);
    39d6:	a9 e5       	ldi	r26, 0x59	; 89
    39d8:	b0 e0       	ldi	r27, 0x00	; 0
    39da:	e9 e5       	ldi	r30, 0x59	; 89
    39dc:	f0 e0       	ldi	r31, 0x00	; 0
    39de:	80 81       	ld	r24, Z
    39e0:	84 60       	ori	r24, 0x04	; 4
    39e2:	8c 93       	st	X, r24
		/* Enable overflow flag */
		SET_BIT(TIFR,TOV1);
    39e4:	a8 e5       	ldi	r26, 0x58	; 88
    39e6:	b0 e0       	ldi	r27, 0x00	; 0
    39e8:	e8 e5       	ldi	r30, 0x58	; 88
    39ea:	f0 e0       	ldi	r31, 0x00	; 0
    39ec:	80 81       	ld	r24, Z
    39ee:	84 60       	ori	r24, 0x04	; 4
    39f0:	8c 93       	st	X, r24
    39f2:	23 c0       	rjmp	.+70     	; 0x3a3a <Timer1_init+0xb6>
	}
	else if ( (Config_Ptr -> mode) == COMPARE )
    39f4:	e9 81       	ldd	r30, Y+1	; 0x01
    39f6:	fa 81       	ldd	r31, Y+2	; 0x02
    39f8:	85 81       	ldd	r24, Z+5	; 0x05
    39fa:	81 30       	cpi	r24, 0x01	; 1
    39fc:	f1 f4       	brne	.+60     	; 0x3a3a <Timer1_init+0xb6>
	{
		SET_BIT(TCCR1B,WGM12);
    39fe:	ae e4       	ldi	r26, 0x4E	; 78
    3a00:	b0 e0       	ldi	r27, 0x00	; 0
    3a02:	ee e4       	ldi	r30, 0x4E	; 78
    3a04:	f0 e0       	ldi	r31, 0x00	; 0
    3a06:	80 81       	ld	r24, Z
    3a08:	88 60       	ori	r24, 0x08	; 8
    3a0a:	8c 93       	st	X, r24
		OCR1A = Config_Ptr ->compare_value;
    3a0c:	aa e4       	ldi	r26, 0x4A	; 74
    3a0e:	b0 e0       	ldi	r27, 0x00	; 0
    3a10:	e9 81       	ldd	r30, Y+1	; 0x01
    3a12:	fa 81       	ldd	r31, Y+2	; 0x02
    3a14:	82 81       	ldd	r24, Z+2	; 0x02
    3a16:	93 81       	ldd	r25, Z+3	; 0x03
    3a18:	11 96       	adiw	r26, 0x01	; 1
    3a1a:	9c 93       	st	X, r25
    3a1c:	8e 93       	st	-X, r24
		SET_BIT(TIMSK,OCIE1A); /* enable interrupts for CTC mode */
    3a1e:	a9 e5       	ldi	r26, 0x59	; 89
    3a20:	b0 e0       	ldi	r27, 0x00	; 0
    3a22:	e9 e5       	ldi	r30, 0x59	; 89
    3a24:	f0 e0       	ldi	r31, 0x00	; 0
    3a26:	80 81       	ld	r24, Z
    3a28:	80 61       	ori	r24, 0x10	; 16
    3a2a:	8c 93       	st	X, r24
		SET_BIT(TIFR,OCF1A); /* enable CTC flag */
    3a2c:	a8 e5       	ldi	r26, 0x58	; 88
    3a2e:	b0 e0       	ldi	r27, 0x00	; 0
    3a30:	e8 e5       	ldi	r30, 0x58	; 88
    3a32:	f0 e0       	ldi	r31, 0x00	; 0
    3a34:	80 81       	ld	r24, Z
    3a36:	80 61       	ori	r24, 0x10	; 16
    3a38:	8c 93       	st	X, r24
	}
	/*
	 * don't forget the global interrupt*/


}
    3a3a:	0f 90       	pop	r0
    3a3c:	0f 90       	pop	r0
    3a3e:	cf 91       	pop	r28
    3a40:	df 91       	pop	r29
    3a42:	08 95       	ret

00003a44 <Timer1_deInit>:
/*Timer1_deInit
 * ● Description
⮚ Function to disable the Timer1.
 */
void Timer1_deInit(void){
    3a44:	df 93       	push	r29
    3a46:	cf 93       	push	r28
    3a48:	cd b7       	in	r28, 0x3d	; 61
    3a4a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * To stop the TIMER
	 */
	TCCR1B&=~(1<<CS12)&~(1<<CS10)&~(1<<CS11);
    3a4c:	ae e4       	ldi	r26, 0x4E	; 78
    3a4e:	b0 e0       	ldi	r27, 0x00	; 0
    3a50:	ee e4       	ldi	r30, 0x4E	; 78
    3a52:	f0 e0       	ldi	r31, 0x00	; 0
    3a54:	80 81       	ld	r24, Z
    3a56:	88 7f       	andi	r24, 0xF8	; 248
    3a58:	8c 93       	st	X, r24
}
    3a5a:	cf 91       	pop	r28
    3a5c:	df 91       	pop	r29
    3a5e:	08 95       	ret

00003a60 <Timer1_setCallBack>:
/*Timer1_setCallBack
 *Description
⮚ Function to set the Call Back function address.
Inputs: pointer to Call Back function.
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
    3a60:	df 93       	push	r29
    3a62:	cf 93       	push	r28
    3a64:	00 d0       	rcall	.+0      	; 0x3a66 <Timer1_setCallBack+0x6>
    3a66:	cd b7       	in	r28, 0x3d	; 61
    3a68:	de b7       	in	r29, 0x3e	; 62
    3a6a:	9a 83       	std	Y+2, r25	; 0x02
    3a6c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
		g_callBackPtr = a_ptr;
    3a6e:	89 81       	ldd	r24, Y+1	; 0x01
    3a70:	9a 81       	ldd	r25, Y+2	; 0x02
    3a72:	90 93 59 01 	sts	0x0159, r25
    3a76:	80 93 58 01 	sts	0x0158, r24
}
    3a7a:	0f 90       	pop	r0
    3a7c:	0f 90       	pop	r0
    3a7e:	cf 91       	pop	r28
    3a80:	df 91       	pop	r29
    3a82:	08 95       	ret

00003a84 <UART_init>:
#include "uart.h"
#include "gpio.h"
#include<avr/io.h>
#include"common_macros.h"

void UART_init(const UART_ConfigType *Config_Ptr){
    3a84:	df 93       	push	r29
    3a86:	cf 93       	push	r28
    3a88:	00 d0       	rcall	.+0      	; 0x3a8a <UART_init+0x6>
    3a8a:	00 d0       	rcall	.+0      	; 0x3a8c <UART_init+0x8>
    3a8c:	cd b7       	in	r28, 0x3d	; 61
    3a8e:	de b7       	in	r29, 0x3e	; 62
    3a90:	9c 83       	std	Y+4, r25	; 0x04
    3a92:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3a94:	1a 82       	std	Y+2, r1	; 0x02
    3a96:	19 82       	std	Y+1, r1	; 0x01
	UCSRA|=(1<<U2X);//for the double trasmission speed
    3a98:	ab e2       	ldi	r26, 0x2B	; 43
    3a9a:	b0 e0       	ldi	r27, 0x00	; 0
    3a9c:	eb e2       	ldi	r30, 0x2B	; 43
    3a9e:	f0 e0       	ldi	r31, 0x00	; 0
    3aa0:	80 81       	ld	r24, Z
    3aa2:	82 60       	ori	r24, 0x02	; 2
    3aa4:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3aa6:	ea e2       	ldi	r30, 0x2A	; 42
    3aa8:	f0 e0       	ldi	r31, 0x00	; 0
    3aaa:	88 e1       	ldi	r24, 0x18	; 24
    3aac:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC |= (1<<URSEL) ;
    3aae:	a0 e4       	ldi	r26, 0x40	; 64
    3ab0:	b0 e0       	ldi	r27, 0x00	; 0
    3ab2:	e0 e4       	ldi	r30, 0x40	; 64
    3ab4:	f0 e0       	ldi	r31, 0x00	; 0
    3ab6:	80 81       	ld	r24, Z
    3ab8:	80 68       	ori	r24, 0x80	; 128
    3aba:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xCF)|((Config_Ptr->parity)<<4);
    3abc:	a0 e4       	ldi	r26, 0x40	; 64
    3abe:	b0 e0       	ldi	r27, 0x00	; 0
    3ac0:	e0 e4       	ldi	r30, 0x40	; 64
    3ac2:	f0 e0       	ldi	r31, 0x00	; 0
    3ac4:	80 81       	ld	r24, Z
    3ac6:	28 2f       	mov	r18, r24
    3ac8:	2f 7c       	andi	r18, 0xCF	; 207
    3aca:	eb 81       	ldd	r30, Y+3	; 0x03
    3acc:	fc 81       	ldd	r31, Y+4	; 0x04
    3ace:	81 81       	ldd	r24, Z+1	; 0x01
    3ad0:	88 2f       	mov	r24, r24
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	82 95       	swap	r24
    3ad6:	92 95       	swap	r25
    3ad8:	90 7f       	andi	r25, 0xF0	; 240
    3ada:	98 27       	eor	r25, r24
    3adc:	80 7f       	andi	r24, 0xF0	; 240
    3ade:	98 27       	eor	r25, r24
    3ae0:	82 2b       	or	r24, r18
    3ae2:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xF8)|((Config_Ptr->bit_data)<<1);
    3ae4:	a0 e4       	ldi	r26, 0x40	; 64
    3ae6:	b0 e0       	ldi	r27, 0x00	; 0
    3ae8:	e0 e4       	ldi	r30, 0x40	; 64
    3aea:	f0 e0       	ldi	r31, 0x00	; 0
    3aec:	80 81       	ld	r24, Z
    3aee:	28 2f       	mov	r18, r24
    3af0:	28 7f       	andi	r18, 0xF8	; 248
    3af2:	eb 81       	ldd	r30, Y+3	; 0x03
    3af4:	fc 81       	ldd	r31, Y+4	; 0x04
    3af6:	80 81       	ld	r24, Z
    3af8:	88 2f       	mov	r24, r24
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	88 0f       	add	r24, r24
    3afe:	99 1f       	adc	r25, r25
    3b00:	82 2b       	or	r24, r18
    3b02:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xF7)|((Config_Ptr->stop_bit)<<3);
    3b04:	a0 e4       	ldi	r26, 0x40	; 64
    3b06:	b0 e0       	ldi	r27, 0x00	; 0
    3b08:	e0 e4       	ldi	r30, 0x40	; 64
    3b0a:	f0 e0       	ldi	r31, 0x00	; 0
    3b0c:	80 81       	ld	r24, Z
    3b0e:	28 2f       	mov	r18, r24
    3b10:	27 7f       	andi	r18, 0xF7	; 247
    3b12:	eb 81       	ldd	r30, Y+3	; 0x03
    3b14:	fc 81       	ldd	r31, Y+4	; 0x04
    3b16:	82 81       	ldd	r24, Z+2	; 0x02
    3b18:	88 2f       	mov	r24, r24
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	88 0f       	add	r24, r24
    3b1e:	99 1f       	adc	r25, r25
    3b20:	88 0f       	add	r24, r24
    3b22:	99 1f       	adc	r25, r25
    3b24:	88 0f       	add	r24, r24
    3b26:	99 1f       	adc	r25, r25
    3b28:	82 2b       	or	r24, r18
    3b2a:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    3b2c:	eb 81       	ldd	r30, Y+3	; 0x03
    3b2e:	fc 81       	ldd	r31, Y+4	; 0x04
    3b30:	83 81       	ldd	r24, Z+3	; 0x03
    3b32:	94 81       	ldd	r25, Z+4	; 0x04
    3b34:	a5 81       	ldd	r26, Z+5	; 0x05
    3b36:	b6 81       	ldd	r27, Z+6	; 0x06
    3b38:	88 0f       	add	r24, r24
    3b3a:	99 1f       	adc	r25, r25
    3b3c:	aa 1f       	adc	r26, r26
    3b3e:	bb 1f       	adc	r27, r27
    3b40:	88 0f       	add	r24, r24
    3b42:	99 1f       	adc	r25, r25
    3b44:	aa 1f       	adc	r26, r26
    3b46:	bb 1f       	adc	r27, r27
    3b48:	88 0f       	add	r24, r24
    3b4a:	99 1f       	adc	r25, r25
    3b4c:	aa 1f       	adc	r26, r26
    3b4e:	bb 1f       	adc	r27, r27
    3b50:	9c 01       	movw	r18, r24
    3b52:	ad 01       	movw	r20, r26
    3b54:	80 e0       	ldi	r24, 0x00	; 0
    3b56:	92 e1       	ldi	r25, 0x12	; 18
    3b58:	aa e7       	ldi	r26, 0x7A	; 122
    3b5a:	b0 e0       	ldi	r27, 0x00	; 0
    3b5c:	bc 01       	movw	r22, r24
    3b5e:	cd 01       	movw	r24, r26
    3b60:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <__udivmodsi4>
    3b64:	da 01       	movw	r26, r20
    3b66:	c9 01       	movw	r24, r18
    3b68:	01 97       	sbiw	r24, 0x01	; 1
    3b6a:	9a 83       	std	Y+2, r25	; 0x02
    3b6c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3b6e:	e0 e4       	ldi	r30, 0x40	; 64
    3b70:	f0 e0       	ldi	r31, 0x00	; 0
    3b72:	89 81       	ldd	r24, Y+1	; 0x01
    3b74:	9a 81       	ldd	r25, Y+2	; 0x02
    3b76:	89 2f       	mov	r24, r25
    3b78:	99 27       	eor	r25, r25
    3b7a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3b7c:	e9 e2       	ldi	r30, 0x29	; 41
    3b7e:	f0 e0       	ldi	r31, 0x00	; 0
    3b80:	89 81       	ldd	r24, Y+1	; 0x01
    3b82:	80 83       	st	Z, r24

}
    3b84:	0f 90       	pop	r0
    3b86:	0f 90       	pop	r0
    3b88:	0f 90       	pop	r0
    3b8a:	0f 90       	pop	r0
    3b8c:	cf 91       	pop	r28
    3b8e:	df 91       	pop	r29
    3b90:	08 95       	ret

00003b92 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data){
    3b92:	df 93       	push	r29
    3b94:	cf 93       	push	r28
    3b96:	0f 92       	push	r0
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
    3b9c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3b9e:	eb e2       	ldi	r30, 0x2B	; 43
    3ba0:	f0 e0       	ldi	r31, 0x00	; 0
    3ba2:	80 81       	ld	r24, Z
    3ba4:	88 2f       	mov	r24, r24
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	80 72       	andi	r24, 0x20	; 32
    3baa:	90 70       	andi	r25, 0x00	; 0
    3bac:	00 97       	sbiw	r24, 0x00	; 0
    3bae:	b9 f3       	breq	.-18     	; 0x3b9e <UART_sendByte+0xc>
	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR=data;
    3bb0:	ec e2       	ldi	r30, 0x2C	; 44
    3bb2:	f0 e0       	ldi	r31, 0x00	; 0
    3bb4:	89 81       	ldd	r24, Y+1	; 0x01
    3bb6:	80 83       	st	Z, r24
}
    3bb8:	0f 90       	pop	r0
    3bba:	cf 91       	pop	r28
    3bbc:	df 91       	pop	r29
    3bbe:	08 95       	ret

00003bc0 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void){
    3bc0:	df 93       	push	r29
    3bc2:	cf 93       	push	r28
    3bc4:	cd b7       	in	r28, 0x3d	; 61
    3bc6:	de b7       	in	r29, 0x3e	; 62
	/*
	 *RXC the flag is set then the byte is recieved
	 */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3bc8:	eb e2       	ldi	r30, 0x2B	; 43
    3bca:	f0 e0       	ldi	r31, 0x00	; 0
    3bcc:	80 81       	ld	r24, Z
    3bce:	88 23       	and	r24, r24
    3bd0:	dc f7       	brge	.-10     	; 0x3bc8 <UART_recieveByte+0x8>
	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3bd2:	ec e2       	ldi	r30, 0x2C	; 44
    3bd4:	f0 e0       	ldi	r31, 0x00	; 0
    3bd6:	80 81       	ld	r24, Z
}
    3bd8:	cf 91       	pop	r28
    3bda:	df 91       	pop	r29
    3bdc:	08 95       	ret

00003bde <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str){
    3bde:	df 93       	push	r29
    3be0:	cf 93       	push	r28
    3be2:	00 d0       	rcall	.+0      	; 0x3be4 <UART_sendString+0x6>
    3be4:	cd b7       	in	r28, 0x3d	; 61
    3be6:	de b7       	in	r29, 0x3e	; 62
    3be8:	9a 83       	std	Y+2, r25	; 0x02
    3bea:	89 83       	std	Y+1, r24	; 0x01
    3bec:	0a c0       	rjmp	.+20     	; 0x3c02 <UART_sendString+0x24>
	while(*Str != '\0')
	{
		UART_sendByte(*Str);
    3bee:	e9 81       	ldd	r30, Y+1	; 0x01
    3bf0:	fa 81       	ldd	r31, Y+2	; 0x02
    3bf2:	80 81       	ld	r24, Z
    3bf4:	0e 94 c9 1d 	call	0x3b92	; 0x3b92 <UART_sendByte>
		Str++;
    3bf8:	89 81       	ldd	r24, Y+1	; 0x01
    3bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    3bfc:	01 96       	adiw	r24, 0x01	; 1
    3bfe:	9a 83       	std	Y+2, r25	; 0x02
    3c00:	89 83       	std	Y+1, r24	; 0x01
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str){
	while(*Str != '\0')
    3c02:	e9 81       	ldd	r30, Y+1	; 0x01
    3c04:	fa 81       	ldd	r31, Y+2	; 0x02
    3c06:	80 81       	ld	r24, Z
    3c08:	88 23       	and	r24, r24
    3c0a:	89 f7       	brne	.-30     	; 0x3bee <UART_sendString+0x10>
	{
		UART_sendByte(*Str);
		Str++;
	}
}
    3c0c:	0f 90       	pop	r0
    3c0e:	0f 90       	pop	r0
    3c10:	cf 91       	pop	r28
    3c12:	df 91       	pop	r29
    3c14:	08 95       	ret

00003c16 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str){
    3c16:	0f 93       	push	r16
    3c18:	1f 93       	push	r17
    3c1a:	df 93       	push	r29
    3c1c:	cf 93       	push	r28
    3c1e:	00 d0       	rcall	.+0      	; 0x3c20 <UART_receiveString+0xa>
    3c20:	0f 92       	push	r0
    3c22:	cd b7       	in	r28, 0x3d	; 61
    3c24:	de b7       	in	r29, 0x3e	; 62
    3c26:	9b 83       	std	Y+3, r25	; 0x03
    3c28:	8a 83       	std	Y+2, r24	; 0x02
	// Receive until #
	uint8 i=0;
    3c2a:	19 82       	std	Y+1, r1	; 0x01
	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3c2c:	89 81       	ldd	r24, Y+1	; 0x01
    3c2e:	28 2f       	mov	r18, r24
    3c30:	30 e0       	ldi	r19, 0x00	; 0
    3c32:	8a 81       	ldd	r24, Y+2	; 0x02
    3c34:	9b 81       	ldd	r25, Y+3	; 0x03
    3c36:	8c 01       	movw	r16, r24
    3c38:	02 0f       	add	r16, r18
    3c3a:	13 1f       	adc	r17, r19
    3c3c:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <UART_recieveByte>
    3c40:	f8 01       	movw	r30, r16
    3c42:	80 83       	st	Z, r24
    3c44:	0f c0       	rjmp	.+30     	; 0x3c64 <UART_receiveString+0x4e>
	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3c46:	89 81       	ldd	r24, Y+1	; 0x01
    3c48:	8f 5f       	subi	r24, 0xFF	; 255
    3c4a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3c4c:	89 81       	ldd	r24, Y+1	; 0x01
    3c4e:	28 2f       	mov	r18, r24
    3c50:	30 e0       	ldi	r19, 0x00	; 0
    3c52:	8a 81       	ldd	r24, Y+2	; 0x02
    3c54:	9b 81       	ldd	r25, Y+3	; 0x03
    3c56:	8c 01       	movw	r16, r24
    3c58:	02 0f       	add	r16, r18
    3c5a:	13 1f       	adc	r17, r19
    3c5c:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <UART_recieveByte>
    3c60:	f8 01       	movw	r30, r16
    3c62:	80 83       	st	Z, r24
	// Receive until #
	uint8 i=0;
	/* Receive the first byte */
	Str[i] = UART_recieveByte();
	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3c64:	89 81       	ldd	r24, Y+1	; 0x01
    3c66:	28 2f       	mov	r18, r24
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c6c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c6e:	fc 01       	movw	r30, r24
    3c70:	e2 0f       	add	r30, r18
    3c72:	f3 1f       	adc	r31, r19
    3c74:	80 81       	ld	r24, Z
    3c76:	83 32       	cpi	r24, 0x23	; 35
    3c78:	31 f7       	brne	.-52     	; 0x3c46 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3c7a:	89 81       	ldd	r24, Y+1	; 0x01
    3c7c:	28 2f       	mov	r18, r24
    3c7e:	30 e0       	ldi	r19, 0x00	; 0
    3c80:	8a 81       	ldd	r24, Y+2	; 0x02
    3c82:	9b 81       	ldd	r25, Y+3	; 0x03
    3c84:	fc 01       	movw	r30, r24
    3c86:	e2 0f       	add	r30, r18
    3c88:	f3 1f       	adc	r31, r19
    3c8a:	10 82       	st	Z, r1
}
    3c8c:	0f 90       	pop	r0
    3c8e:	0f 90       	pop	r0
    3c90:	0f 90       	pop	r0
    3c92:	cf 91       	pop	r28
    3c94:	df 91       	pop	r29
    3c96:	1f 91       	pop	r17
    3c98:	0f 91       	pop	r16
    3c9a:	08 95       	ret

00003c9c <__udivmodsi4>:
    3c9c:	a1 e2       	ldi	r26, 0x21	; 33
    3c9e:	1a 2e       	mov	r1, r26
    3ca0:	aa 1b       	sub	r26, r26
    3ca2:	bb 1b       	sub	r27, r27
    3ca4:	fd 01       	movw	r30, r26
    3ca6:	0d c0       	rjmp	.+26     	; 0x3cc2 <__udivmodsi4_ep>

00003ca8 <__udivmodsi4_loop>:
    3ca8:	aa 1f       	adc	r26, r26
    3caa:	bb 1f       	adc	r27, r27
    3cac:	ee 1f       	adc	r30, r30
    3cae:	ff 1f       	adc	r31, r31
    3cb0:	a2 17       	cp	r26, r18
    3cb2:	b3 07       	cpc	r27, r19
    3cb4:	e4 07       	cpc	r30, r20
    3cb6:	f5 07       	cpc	r31, r21
    3cb8:	20 f0       	brcs	.+8      	; 0x3cc2 <__udivmodsi4_ep>
    3cba:	a2 1b       	sub	r26, r18
    3cbc:	b3 0b       	sbc	r27, r19
    3cbe:	e4 0b       	sbc	r30, r20
    3cc0:	f5 0b       	sbc	r31, r21

00003cc2 <__udivmodsi4_ep>:
    3cc2:	66 1f       	adc	r22, r22
    3cc4:	77 1f       	adc	r23, r23
    3cc6:	88 1f       	adc	r24, r24
    3cc8:	99 1f       	adc	r25, r25
    3cca:	1a 94       	dec	r1
    3ccc:	69 f7       	brne	.-38     	; 0x3ca8 <__udivmodsi4_loop>
    3cce:	60 95       	com	r22
    3cd0:	70 95       	com	r23
    3cd2:	80 95       	com	r24
    3cd4:	90 95       	com	r25
    3cd6:	9b 01       	movw	r18, r22
    3cd8:	ac 01       	movw	r20, r24
    3cda:	bd 01       	movw	r22, r26
    3cdc:	cf 01       	movw	r24, r30
    3cde:	08 95       	ret

00003ce0 <__prologue_saves__>:
    3ce0:	2f 92       	push	r2
    3ce2:	3f 92       	push	r3
    3ce4:	4f 92       	push	r4
    3ce6:	5f 92       	push	r5
    3ce8:	6f 92       	push	r6
    3cea:	7f 92       	push	r7
    3cec:	8f 92       	push	r8
    3cee:	9f 92       	push	r9
    3cf0:	af 92       	push	r10
    3cf2:	bf 92       	push	r11
    3cf4:	cf 92       	push	r12
    3cf6:	df 92       	push	r13
    3cf8:	ef 92       	push	r14
    3cfa:	ff 92       	push	r15
    3cfc:	0f 93       	push	r16
    3cfe:	1f 93       	push	r17
    3d00:	cf 93       	push	r28
    3d02:	df 93       	push	r29
    3d04:	cd b7       	in	r28, 0x3d	; 61
    3d06:	de b7       	in	r29, 0x3e	; 62
    3d08:	ca 1b       	sub	r28, r26
    3d0a:	db 0b       	sbc	r29, r27
    3d0c:	0f b6       	in	r0, 0x3f	; 63
    3d0e:	f8 94       	cli
    3d10:	de bf       	out	0x3e, r29	; 62
    3d12:	0f be       	out	0x3f, r0	; 63
    3d14:	cd bf       	out	0x3d, r28	; 61
    3d16:	09 94       	ijmp

00003d18 <__epilogue_restores__>:
    3d18:	2a 88       	ldd	r2, Y+18	; 0x12
    3d1a:	39 88       	ldd	r3, Y+17	; 0x11
    3d1c:	48 88       	ldd	r4, Y+16	; 0x10
    3d1e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d20:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d22:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d24:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d26:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d28:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d2a:	b9 84       	ldd	r11, Y+9	; 0x09
    3d2c:	c8 84       	ldd	r12, Y+8	; 0x08
    3d2e:	df 80       	ldd	r13, Y+7	; 0x07
    3d30:	ee 80       	ldd	r14, Y+6	; 0x06
    3d32:	fd 80       	ldd	r15, Y+5	; 0x05
    3d34:	0c 81       	ldd	r16, Y+4	; 0x04
    3d36:	1b 81       	ldd	r17, Y+3	; 0x03
    3d38:	aa 81       	ldd	r26, Y+2	; 0x02
    3d3a:	b9 81       	ldd	r27, Y+1	; 0x01
    3d3c:	ce 0f       	add	r28, r30
    3d3e:	d1 1d       	adc	r29, r1
    3d40:	0f b6       	in	r0, 0x3f	; 63
    3d42:	f8 94       	cli
    3d44:	de bf       	out	0x3e, r29	; 62
    3d46:	0f be       	out	0x3f, r0	; 63
    3d48:	cd bf       	out	0x3d, r28	; 61
    3d4a:	ed 01       	movw	r28, r26
    3d4c:	08 95       	ret

00003d4e <itoa>:
    3d4e:	fb 01       	movw	r30, r22
    3d50:	9f 01       	movw	r18, r30
    3d52:	e8 94       	clt
    3d54:	42 30       	cpi	r20, 0x02	; 2
    3d56:	c4 f0       	brlt	.+48     	; 0x3d88 <itoa+0x3a>
    3d58:	45 32       	cpi	r20, 0x25	; 37
    3d5a:	b4 f4       	brge	.+44     	; 0x3d88 <itoa+0x3a>
    3d5c:	4a 30       	cpi	r20, 0x0A	; 10
    3d5e:	29 f4       	brne	.+10     	; 0x3d6a <itoa+0x1c>
    3d60:	97 fb       	bst	r25, 7
    3d62:	1e f4       	brtc	.+6      	; 0x3d6a <itoa+0x1c>
    3d64:	90 95       	com	r25
    3d66:	81 95       	neg	r24
    3d68:	9f 4f       	sbci	r25, 0xFF	; 255
    3d6a:	64 2f       	mov	r22, r20
    3d6c:	77 27       	eor	r23, r23
    3d6e:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <__udivmodhi4>
    3d72:	80 5d       	subi	r24, 0xD0	; 208
    3d74:	8a 33       	cpi	r24, 0x3A	; 58
    3d76:	0c f0       	brlt	.+2      	; 0x3d7a <itoa+0x2c>
    3d78:	89 5d       	subi	r24, 0xD9	; 217
    3d7a:	81 93       	st	Z+, r24
    3d7c:	cb 01       	movw	r24, r22
    3d7e:	00 97       	sbiw	r24, 0x00	; 0
    3d80:	a1 f7       	brne	.-24     	; 0x3d6a <itoa+0x1c>
    3d82:	16 f4       	brtc	.+4      	; 0x3d88 <itoa+0x3a>
    3d84:	5d e2       	ldi	r21, 0x2D	; 45
    3d86:	51 93       	st	Z+, r21
    3d88:	10 82       	st	Z, r1
    3d8a:	c9 01       	movw	r24, r18
    3d8c:	0c 94 c8 1e 	jmp	0x3d90	; 0x3d90 <strrev>

00003d90 <strrev>:
    3d90:	dc 01       	movw	r26, r24
    3d92:	fc 01       	movw	r30, r24
    3d94:	67 2f       	mov	r22, r23
    3d96:	71 91       	ld	r23, Z+
    3d98:	77 23       	and	r23, r23
    3d9a:	e1 f7       	brne	.-8      	; 0x3d94 <strrev+0x4>
    3d9c:	32 97       	sbiw	r30, 0x02	; 2
    3d9e:	04 c0       	rjmp	.+8      	; 0x3da8 <strrev+0x18>
    3da0:	7c 91       	ld	r23, X
    3da2:	6d 93       	st	X+, r22
    3da4:	70 83       	st	Z, r23
    3da6:	62 91       	ld	r22, -Z
    3da8:	ae 17       	cp	r26, r30
    3daa:	bf 07       	cpc	r27, r31
    3dac:	c8 f3       	brcs	.-14     	; 0x3da0 <strrev+0x10>
    3dae:	08 95       	ret

00003db0 <__udivmodhi4>:
    3db0:	aa 1b       	sub	r26, r26
    3db2:	bb 1b       	sub	r27, r27
    3db4:	51 e1       	ldi	r21, 0x11	; 17
    3db6:	07 c0       	rjmp	.+14     	; 0x3dc6 <__udivmodhi4_ep>

00003db8 <__udivmodhi4_loop>:
    3db8:	aa 1f       	adc	r26, r26
    3dba:	bb 1f       	adc	r27, r27
    3dbc:	a6 17       	cp	r26, r22
    3dbe:	b7 07       	cpc	r27, r23
    3dc0:	10 f0       	brcs	.+4      	; 0x3dc6 <__udivmodhi4_ep>
    3dc2:	a6 1b       	sub	r26, r22
    3dc4:	b7 0b       	sbc	r27, r23

00003dc6 <__udivmodhi4_ep>:
    3dc6:	88 1f       	adc	r24, r24
    3dc8:	99 1f       	adc	r25, r25
    3dca:	5a 95       	dec	r21
    3dcc:	a9 f7       	brne	.-22     	; 0x3db8 <__udivmodhi4_loop>
    3dce:	80 95       	com	r24
    3dd0:	90 95       	com	r25
    3dd2:	bc 01       	movw	r22, r24
    3dd4:	cd 01       	movw	r24, r26
    3dd6:	08 95       	ret

00003dd8 <_exit>:
    3dd8:	f8 94       	cli

00003dda <__stop_program>:
    3dda:	ff cf       	rjmp	.-2      	; 0x3dda <__stop_program>
