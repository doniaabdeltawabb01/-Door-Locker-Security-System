
final_project_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002702  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002702  00002796  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800078  00800078  000027ae  2**0
                  ALLOC
  3 .stab         00002934  00000000  00000000  000027b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012d9  00000000  00000000  000050e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000063bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000064fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000666d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000082b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000091a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a33d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ab0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 09 0a 	call	0x1412	; 0x1412 <main>
      8a:	0c 94 7f 13 	jmp	0x26fe	; 0x26fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 54 13 	jmp	0x26a8	; 0x26a8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DcMotor_Init>:
#include"DC_Motor.h"
#include<avr/io.h>
#include"gpio.h"
#include"pwm.h"

void DcMotor_Init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	//set up the motor pins direction
	GPIO_setupPinDirection(MOTOR_PORT_ID,MOTOR_PIN1_ID,PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	65 e0       	ldi	r22, 0x05	; 5
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 c0 06 	call	0xd80	; 0xd80 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID,MOTOR_PIN2_ID,PIN_OUTPUT);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	64 e0       	ldi	r22, 0x04	; 4
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 c0 06 	call	0xd80	; 0xd80 <GPIO_setupPinDirection>
	/*Stop the motor at first*/
	GPIO_writePin (MOTOR_PORT_ID,MOTOR_PIN1_ID,LOGIC_LOW);
     b62:	82 e0       	ldi	r24, 0x02	; 2
     b64:	65 e0       	ldi	r22, 0x05	; 5
     b66:	40 e0       	ldi	r20, 0x00	; 0
     b68:	0e 94 ab 07 	call	0xf56	; 0xf56 <GPIO_writePin>
	GPIO_writePin (MOTOR_PORT_ID,MOTOR_PIN2_ID,LOGIC_LOW);
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	64 e0       	ldi	r22, 0x04	; 4
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	0e 94 ab 07 	call	0xf56	; 0xf56 <GPIO_writePin>

}
     b76:	cf 91       	pop	r28
     b78:	df 91       	pop	r29
     b7a:	08 95       	ret

00000b7c <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
     b7c:	df 93       	push	r29
     b7e:	cf 93       	push	r28
     b80:	00 d0       	rcall	.+0      	; 0xb82 <DcMotor_Rotate+0x6>
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	89 83       	std	Y+1, r24	; 0x01
     b88:	6a 83       	std	Y+2, r22	; 0x02

	if (state == STOP)
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	88 23       	and	r24, r24
     b8e:	59 f4       	brne	.+22     	; 0xba6 <DcMotor_Rotate+0x2a>
	{
		/*Stop the motor*/
		GPIO_writePin (MOTOR_PORT_ID,MOTOR_PIN1_ID,LOGIC_LOW);
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	65 e0       	ldi	r22, 0x05	; 5
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	0e 94 ab 07 	call	0xf56	; 0xf56 <GPIO_writePin>
		GPIO_writePin (MOTOR_PORT_ID,MOTOR_PIN2_ID,LOGIC_LOW);
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	64 e0       	ldi	r22, 0x04	; 4
     b9e:	40 e0       	ldi	r20, 0x00	; 0
     ba0:	0e 94 ab 07 	call	0xf56	; 0xf56 <GPIO_writePin>
     ba4:	1b c0       	rjmp	.+54     	; 0xbdc <DcMotor_Rotate+0x60>
	}

	else if (state == CW)
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	82 30       	cpi	r24, 0x02	; 2
     baa:	59 f4       	brne	.+22     	; 0xbc2 <DcMotor_Rotate+0x46>
	{
		/*Rotate Clockwise*/
		GPIO_writePin (MOTOR_PORT_ID,MOTOR_PIN1_ID,LOGIC_LOW);
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	65 e0       	ldi	r22, 0x05	; 5
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	0e 94 ab 07 	call	0xf56	; 0xf56 <GPIO_writePin>
		GPIO_writePin (MOTOR_PORT_ID,MOTOR_PIN2_ID,LOGIC_HIGH);
     bb6:	82 e0       	ldi	r24, 0x02	; 2
     bb8:	64 e0       	ldi	r22, 0x04	; 4
     bba:	41 e0       	ldi	r20, 0x01	; 1
     bbc:	0e 94 ab 07 	call	0xf56	; 0xf56 <GPIO_writePin>
     bc0:	0d c0       	rjmp	.+26     	; 0xbdc <DcMotor_Rotate+0x60>
	}

	else if (state == A_CW)
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	51 f4       	brne	.+20     	; 0xbdc <DcMotor_Rotate+0x60>
	{
		/*Rotate AntiClockwise*/
		GPIO_writePin (MOTOR_PORT_ID,MOTOR_PIN1_ID,LOGIC_HIGH);
     bc8:	82 e0       	ldi	r24, 0x02	; 2
     bca:	65 e0       	ldi	r22, 0x05	; 5
     bcc:	41 e0       	ldi	r20, 0x01	; 1
     bce:	0e 94 ab 07 	call	0xf56	; 0xf56 <GPIO_writePin>
		GPIO_writePin (MOTOR_PORT_ID,MOTOR_PIN2_ID,LOGIC_LOW);
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	64 e0       	ldi	r22, 0x04	; 4
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	0e 94 ab 07 	call	0xf56	; 0xf56 <GPIO_writePin>
	}
	PWM_Timer0_Start(speed);//set the speed by the timer
     bdc:	8a 81       	ldd	r24, Y+2	; 0x02
     bde:	0e 94 bd 10 	call	0x217a	; 0x217a <PWM_Timer0_Start>


}
     be2:	0f 90       	pop	r0
     be4:	0f 90       	pop	r0
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	08 95       	ret

00000bec <Buzzer_init>:
/*
 * ⮚ Setup the direction for the buzzer pin as output pin through the
GPIO driver.
⮚ Turn off the buzzer through the GPIO.
 */
 void Buzzer_init(){
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
	 /*
	  * SET THE pin as output
	  */
	 GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	41 e0       	ldi	r20, 0x01	; 1
     bfa:	0e 94 c0 06 	call	0xd80	; 0xd80 <GPIO_setupPinDirection>
	 /*
	  * TURN OFF the buzzer
	  */
	 GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	40 e0       	ldi	r20, 0x00	; 0
     c04:	0e 94 ab 07 	call	0xf56	; 0xf56 <GPIO_writePin>

 }
     c08:	cf 91       	pop	r28
     c0a:	df 91       	pop	r29
     c0c:	08 95       	ret

00000c0e <Buzzer_on>:
 void Buzzer_on(void){
     c0e:	df 93       	push	r29
     c10:	cf 93       	push	r28
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
	 /*
	  * TURN ON the buzzer
	  */
	 GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	41 e0       	ldi	r20, 0x01	; 1
     c1c:	0e 94 ab 07 	call	0xf56	; 0xf56 <GPIO_writePin>

 }
     c20:	cf 91       	pop	r28
     c22:	df 91       	pop	r29
     c24:	08 95       	ret

00000c26 <Buzzer_off>:
 void Buzzer_off(void){
     c26:	df 93       	push	r29
     c28:	cf 93       	push	r28
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
	 /*
	  * TURN OFF the buzzer
	  */
	 	 GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	40 e0       	ldi	r20, 0x00	; 0
     c34:	0e 94 ab 07 	call	0xf56	; 0xf56 <GPIO_writePin>

 }
     c38:	cf 91       	pop	r28
     c3a:	df 91       	pop	r29
     c3c:	08 95       	ret

00000c3e <EEPROM_writeByte>:

#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	00 d0       	rcall	.+0      	; 0xc44 <EEPROM_writeByte+0x6>
     c44:	00 d0       	rcall	.+0      	; 0xc46 <EEPROM_writeByte+0x8>
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
     c4a:	9a 83       	std	Y+2, r25	; 0x02
     c4c:	89 83       	std	Y+1, r24	; 0x01
     c4e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     c50:	0e 94 b3 11 	call	0x2366	; 0x2366 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     c54:	0e 94 0b 12 	call	0x2416	; 0x2416 <TWI_getStatus>
     c58:	88 30       	cpi	r24, 0x08	; 8
     c5a:	11 f0       	breq	.+4      	; 0xc60 <EEPROM_writeByte+0x22>
        return ERROR;
     c5c:	1c 82       	std	Y+4, r1	; 0x04
     c5e:	28 c0       	rjmp	.+80     	; 0xcb0 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	9a 81       	ldd	r25, Y+2	; 0x02
     c64:	80 70       	andi	r24, 0x00	; 0
     c66:	97 70       	andi	r25, 0x07	; 7
     c68:	88 0f       	add	r24, r24
     c6a:	89 2f       	mov	r24, r25
     c6c:	88 1f       	adc	r24, r24
     c6e:	99 0b       	sbc	r25, r25
     c70:	91 95       	neg	r25
     c72:	80 6a       	ori	r24, 0xA0	; 160
     c74:	0e 94 ce 11 	call	0x239c	; 0x239c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     c78:	0e 94 0b 12 	call	0x2416	; 0x2416 <TWI_getStatus>
     c7c:	88 31       	cpi	r24, 0x18	; 24
     c7e:	11 f0       	breq	.+4      	; 0xc84 <EEPROM_writeByte+0x46>
        return ERROR; 
     c80:	1c 82       	std	Y+4, r1	; 0x04
     c82:	16 c0       	rjmp	.+44     	; 0xcb0 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	0e 94 ce 11 	call	0x239c	; 0x239c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     c8a:	0e 94 0b 12 	call	0x2416	; 0x2416 <TWI_getStatus>
     c8e:	88 32       	cpi	r24, 0x28	; 40
     c90:	11 f0       	breq	.+4      	; 0xc96 <EEPROM_writeByte+0x58>
        return ERROR;
     c92:	1c 82       	std	Y+4, r1	; 0x04
     c94:	0d c0       	rjmp	.+26     	; 0xcb0 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     c96:	8b 81       	ldd	r24, Y+3	; 0x03
     c98:	0e 94 ce 11 	call	0x239c	; 0x239c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     c9c:	0e 94 0b 12 	call	0x2416	; 0x2416 <TWI_getStatus>
     ca0:	88 32       	cpi	r24, 0x28	; 40
     ca2:	11 f0       	breq	.+4      	; 0xca8 <EEPROM_writeByte+0x6a>
        return ERROR;
     ca4:	1c 82       	std	Y+4, r1	; 0x04
     ca6:	04 c0       	rjmp	.+8      	; 0xcb0 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     ca8:	0e 94 c3 11 	call	0x2386	; 0x2386 <TWI_stop>
	
    return SUCCESS;
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	8c 83       	std	Y+4, r24	; 0x04
     cb0:	8c 81       	ldd	r24, Y+4	; 0x04
}
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	cf 91       	pop	r28
     cbc:	df 91       	pop	r29
     cbe:	08 95       	ret

00000cc0 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <EEPROM_readByte+0x6>
     cc6:	00 d0       	rcall	.+0      	; 0xcc8 <EEPROM_readByte+0x8>
     cc8:	0f 92       	push	r0
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	9a 83       	std	Y+2, r25	; 0x02
     cd0:	89 83       	std	Y+1, r24	; 0x01
     cd2:	7c 83       	std	Y+4, r23	; 0x04
     cd4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     cd6:	0e 94 b3 11 	call	0x2366	; 0x2366 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     cda:	0e 94 0b 12 	call	0x2416	; 0x2416 <TWI_getStatus>
     cde:	88 30       	cpi	r24, 0x08	; 8
     ce0:	11 f0       	breq	.+4      	; 0xce6 <EEPROM_readByte+0x26>
        return ERROR;
     ce2:	1d 82       	std	Y+5, r1	; 0x05
     ce4:	44 c0       	rjmp	.+136    	; 0xd6e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	9a 81       	ldd	r25, Y+2	; 0x02
     cea:	80 70       	andi	r24, 0x00	; 0
     cec:	97 70       	andi	r25, 0x07	; 7
     cee:	88 0f       	add	r24, r24
     cf0:	89 2f       	mov	r24, r25
     cf2:	88 1f       	adc	r24, r24
     cf4:	99 0b       	sbc	r25, r25
     cf6:	91 95       	neg	r25
     cf8:	80 6a       	ori	r24, 0xA0	; 160
     cfa:	0e 94 ce 11 	call	0x239c	; 0x239c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     cfe:	0e 94 0b 12 	call	0x2416	; 0x2416 <TWI_getStatus>
     d02:	88 31       	cpi	r24, 0x18	; 24
     d04:	11 f0       	breq	.+4      	; 0xd0a <EEPROM_readByte+0x4a>
        return ERROR;
     d06:	1d 82       	std	Y+5, r1	; 0x05
     d08:	32 c0       	rjmp	.+100    	; 0xd6e <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	0e 94 ce 11 	call	0x239c	; 0x239c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     d10:	0e 94 0b 12 	call	0x2416	; 0x2416 <TWI_getStatus>
     d14:	88 32       	cpi	r24, 0x28	; 40
     d16:	11 f0       	breq	.+4      	; 0xd1c <EEPROM_readByte+0x5c>
        return ERROR;
     d18:	1d 82       	std	Y+5, r1	; 0x05
     d1a:	29 c0       	rjmp	.+82     	; 0xd6e <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     d1c:	0e 94 b3 11 	call	0x2366	; 0x2366 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     d20:	0e 94 0b 12 	call	0x2416	; 0x2416 <TWI_getStatus>
     d24:	80 31       	cpi	r24, 0x10	; 16
     d26:	11 f0       	breq	.+4      	; 0xd2c <EEPROM_readByte+0x6c>
        return ERROR;
     d28:	1d 82       	std	Y+5, r1	; 0x05
     d2a:	21 c0       	rjmp	.+66     	; 0xd6e <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	9a 81       	ldd	r25, Y+2	; 0x02
     d30:	80 70       	andi	r24, 0x00	; 0
     d32:	97 70       	andi	r25, 0x07	; 7
     d34:	88 0f       	add	r24, r24
     d36:	89 2f       	mov	r24, r25
     d38:	88 1f       	adc	r24, r24
     d3a:	99 0b       	sbc	r25, r25
     d3c:	91 95       	neg	r25
     d3e:	81 6a       	ori	r24, 0xA1	; 161
     d40:	0e 94 ce 11 	call	0x239c	; 0x239c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     d44:	0e 94 0b 12 	call	0x2416	; 0x2416 <TWI_getStatus>
     d48:	80 34       	cpi	r24, 0x40	; 64
     d4a:	11 f0       	breq	.+4      	; 0xd50 <EEPROM_readByte+0x90>
        return ERROR;
     d4c:	1d 82       	std	Y+5, r1	; 0x05
     d4e:	0f c0       	rjmp	.+30     	; 0xd6e <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     d50:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <TWI_readByteWithNACK>
     d54:	eb 81       	ldd	r30, Y+3	; 0x03
     d56:	fc 81       	ldd	r31, Y+4	; 0x04
     d58:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     d5a:	0e 94 0b 12 	call	0x2416	; 0x2416 <TWI_getStatus>
     d5e:	88 35       	cpi	r24, 0x58	; 88
     d60:	11 f0       	breq	.+4      	; 0xd66 <EEPROM_readByte+0xa6>
        return ERROR;
     d62:	1d 82       	std	Y+5, r1	; 0x05
     d64:	04 c0       	rjmp	.+8      	; 0xd6e <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     d66:	0e 94 c3 11 	call	0x2386	; 0x2386 <TWI_stop>

    return SUCCESS;
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	8d 83       	std	Y+5, r24	; 0x05
     d6e:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	00 d0       	rcall	.+0      	; 0xd86 <GPIO_setupPinDirection+0x6>
     d86:	00 d0       	rcall	.+0      	; 0xd88 <GPIO_setupPinDirection+0x8>
     d88:	0f 92       	push	r0
     d8a:	cd b7       	in	r28, 0x3d	; 61
     d8c:	de b7       	in	r29, 0x3e	; 62
     d8e:	89 83       	std	Y+1, r24	; 0x01
     d90:	6a 83       	std	Y+2, r22	; 0x02
     d92:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	88 30       	cpi	r24, 0x08	; 8
     d98:	08 f0       	brcs	.+2      	; 0xd9c <GPIO_setupPinDirection+0x1c>
     d9a:	d5 c0       	rjmp	.+426    	; 0xf46 <GPIO_setupPinDirection+0x1c6>
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	84 30       	cpi	r24, 0x04	; 4
     da0:	08 f0       	brcs	.+2      	; 0xda4 <GPIO_setupPinDirection+0x24>
     da2:	d1 c0       	rjmp	.+418    	; 0xf46 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	3d 83       	std	Y+5, r19	; 0x05
     dac:	2c 83       	std	Y+4, r18	; 0x04
     dae:	8c 81       	ldd	r24, Y+4	; 0x04
     db0:	9d 81       	ldd	r25, Y+5	; 0x05
     db2:	81 30       	cpi	r24, 0x01	; 1
     db4:	91 05       	cpc	r25, r1
     db6:	09 f4       	brne	.+2      	; 0xdba <GPIO_setupPinDirection+0x3a>
     db8:	43 c0       	rjmp	.+134    	; 0xe40 <GPIO_setupPinDirection+0xc0>
     dba:	2c 81       	ldd	r18, Y+4	; 0x04
     dbc:	3d 81       	ldd	r19, Y+5	; 0x05
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	2c f4       	brge	.+10     	; 0xdce <GPIO_setupPinDirection+0x4e>
     dc4:	8c 81       	ldd	r24, Y+4	; 0x04
     dc6:	9d 81       	ldd	r25, Y+5	; 0x05
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	71 f0       	breq	.+28     	; 0xde8 <GPIO_setupPinDirection+0x68>
     dcc:	bc c0       	rjmp	.+376    	; 0xf46 <GPIO_setupPinDirection+0x1c6>
     dce:	2c 81       	ldd	r18, Y+4	; 0x04
     dd0:	3d 81       	ldd	r19, Y+5	; 0x05
     dd2:	22 30       	cpi	r18, 0x02	; 2
     dd4:	31 05       	cpc	r19, r1
     dd6:	09 f4       	brne	.+2      	; 0xdda <GPIO_setupPinDirection+0x5a>
     dd8:	5f c0       	rjmp	.+190    	; 0xe98 <GPIO_setupPinDirection+0x118>
     dda:	8c 81       	ldd	r24, Y+4	; 0x04
     ddc:	9d 81       	ldd	r25, Y+5	; 0x05
     dde:	83 30       	cpi	r24, 0x03	; 3
     de0:	91 05       	cpc	r25, r1
     de2:	09 f4       	brne	.+2      	; 0xde6 <GPIO_setupPinDirection+0x66>
     de4:	85 c0       	rjmp	.+266    	; 0xef0 <GPIO_setupPinDirection+0x170>
     de6:	af c0       	rjmp	.+350    	; 0xf46 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     de8:	8b 81       	ldd	r24, Y+3	; 0x03
     dea:	81 30       	cpi	r24, 0x01	; 1
     dec:	a1 f4       	brne	.+40     	; 0xe16 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     dee:	aa e3       	ldi	r26, 0x3A	; 58
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	ea e3       	ldi	r30, 0x3A	; 58
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	48 2f       	mov	r20, r24
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 2e       	mov	r0, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <GPIO_setupPinDirection+0x8c>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <GPIO_setupPinDirection+0x88>
     e10:	84 2b       	or	r24, r20
     e12:	8c 93       	st	X, r24
     e14:	98 c0       	rjmp	.+304    	; 0xf46 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     e16:	aa e3       	ldi	r26, 0x3A	; 58
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	ea e3       	ldi	r30, 0x3A	; 58
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <GPIO_setupPinDirection+0xb4>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <GPIO_setupPinDirection+0xb0>
     e38:	80 95       	com	r24
     e3a:	84 23       	and	r24, r20
     e3c:	8c 93       	st	X, r24
     e3e:	83 c0       	rjmp	.+262    	; 0xf46 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	81 30       	cpi	r24, 0x01	; 1
     e44:	a1 f4       	brne	.+40     	; 0xe6e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     e46:	a7 e3       	ldi	r26, 0x37	; 55
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e7 e3       	ldi	r30, 0x37	; 55
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <GPIO_setupPinDirection+0xe4>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <GPIO_setupPinDirection+0xe0>
     e68:	84 2b       	or	r24, r20
     e6a:	8c 93       	st	X, r24
     e6c:	6c c0       	rjmp	.+216    	; 0xf46 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     e6e:	a7 e3       	ldi	r26, 0x37	; 55
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e7 e3       	ldi	r30, 0x37	; 55
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	48 2f       	mov	r20, r24
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	02 2e       	mov	r0, r18
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <GPIO_setupPinDirection+0x10c>
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	0a 94       	dec	r0
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <GPIO_setupPinDirection+0x108>
     e90:	80 95       	com	r24
     e92:	84 23       	and	r24, r20
     e94:	8c 93       	st	X, r24
     e96:	57 c0       	rjmp	.+174    	; 0xf46 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	81 30       	cpi	r24, 0x01	; 1
     e9c:	a1 f4       	brne	.+40     	; 0xec6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     e9e:	a4 e3       	ldi	r26, 0x34	; 52
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e4 e3       	ldi	r30, 0x34	; 52
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 2e       	mov	r0, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <GPIO_setupPinDirection+0x13c>
     eb8:	88 0f       	add	r24, r24
     eba:	99 1f       	adc	r25, r25
     ebc:	0a 94       	dec	r0
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <GPIO_setupPinDirection+0x138>
     ec0:	84 2b       	or	r24, r20
     ec2:	8c 93       	st	X, r24
     ec4:	40 c0       	rjmp	.+128    	; 0xf46 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     ec6:	a4 e3       	ldi	r26, 0x34	; 52
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e4 e3       	ldi	r30, 0x34	; 52
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	02 2e       	mov	r0, r18
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <GPIO_setupPinDirection+0x164>
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	0a 94       	dec	r0
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <GPIO_setupPinDirection+0x160>
     ee8:	80 95       	com	r24
     eea:	84 23       	and	r24, r20
     eec:	8c 93       	st	X, r24
     eee:	2b c0       	rjmp	.+86     	; 0xf46 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	a1 f4       	brne	.+40     	; 0xf1e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     ef6:	a1 e3       	ldi	r26, 0x31	; 49
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e1 e3       	ldi	r30, 0x31	; 49
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	48 2f       	mov	r20, r24
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	02 2e       	mov	r0, r18
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <GPIO_setupPinDirection+0x194>
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	0a 94       	dec	r0
     f16:	e2 f7       	brpl	.-8      	; 0xf10 <GPIO_setupPinDirection+0x190>
     f18:	84 2b       	or	r24, r20
     f1a:	8c 93       	st	X, r24
     f1c:	14 c0       	rjmp	.+40     	; 0xf46 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     f1e:	a1 e3       	ldi	r26, 0x31	; 49
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e1 e3       	ldi	r30, 0x31	; 49
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 2e       	mov	r0, r18
     f36:	02 c0       	rjmp	.+4      	; 0xf3c <GPIO_setupPinDirection+0x1bc>
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	0a 94       	dec	r0
     f3e:	e2 f7       	brpl	.-8      	; 0xf38 <GPIO_setupPinDirection+0x1b8>
     f40:	80 95       	com	r24
     f42:	84 23       	and	r24, r20
     f44:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	0f 90       	pop	r0
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <GPIO_writePin+0x6>
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <GPIO_writePin+0x8>
     f5e:	0f 92       	push	r0
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	89 83       	std	Y+1, r24	; 0x01
     f66:	6a 83       	std	Y+2, r22	; 0x02
     f68:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	88 30       	cpi	r24, 0x08	; 8
     f6e:	08 f0       	brcs	.+2      	; 0xf72 <GPIO_writePin+0x1c>
     f70:	d5 c0       	rjmp	.+426    	; 0x111c <GPIO_writePin+0x1c6>
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	84 30       	cpi	r24, 0x04	; 4
     f76:	08 f0       	brcs	.+2      	; 0xf7a <GPIO_writePin+0x24>
     f78:	d1 c0       	rjmp	.+418    	; 0x111c <GPIO_writePin+0x1c6>
			/* Do Nothing */
		}
		else
		{
			//switch for the ports
			switch(port_num){
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	3d 83       	std	Y+5, r19	; 0x05
     f82:	2c 83       	std	Y+4, r18	; 0x04
     f84:	8c 81       	ldd	r24, Y+4	; 0x04
     f86:	9d 81       	ldd	r25, Y+5	; 0x05
     f88:	81 30       	cpi	r24, 0x01	; 1
     f8a:	91 05       	cpc	r25, r1
     f8c:	09 f4       	brne	.+2      	; 0xf90 <GPIO_writePin+0x3a>
     f8e:	43 c0       	rjmp	.+134    	; 0x1016 <GPIO_writePin+0xc0>
     f90:	2c 81       	ldd	r18, Y+4	; 0x04
     f92:	3d 81       	ldd	r19, Y+5	; 0x05
     f94:	22 30       	cpi	r18, 0x02	; 2
     f96:	31 05       	cpc	r19, r1
     f98:	2c f4       	brge	.+10     	; 0xfa4 <GPIO_writePin+0x4e>
     f9a:	8c 81       	ldd	r24, Y+4	; 0x04
     f9c:	9d 81       	ldd	r25, Y+5	; 0x05
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	71 f0       	breq	.+28     	; 0xfbe <GPIO_writePin+0x68>
     fa2:	bc c0       	rjmp	.+376    	; 0x111c <GPIO_writePin+0x1c6>
     fa4:	2c 81       	ldd	r18, Y+4	; 0x04
     fa6:	3d 81       	ldd	r19, Y+5	; 0x05
     fa8:	22 30       	cpi	r18, 0x02	; 2
     faa:	31 05       	cpc	r19, r1
     fac:	09 f4       	brne	.+2      	; 0xfb0 <GPIO_writePin+0x5a>
     fae:	5f c0       	rjmp	.+190    	; 0x106e <GPIO_writePin+0x118>
     fb0:	8c 81       	ldd	r24, Y+4	; 0x04
     fb2:	9d 81       	ldd	r25, Y+5	; 0x05
     fb4:	83 30       	cpi	r24, 0x03	; 3
     fb6:	91 05       	cpc	r25, r1
     fb8:	09 f4       	brne	.+2      	; 0xfbc <GPIO_writePin+0x66>
     fba:	85 c0       	rjmp	.+266    	; 0x10c6 <GPIO_writePin+0x170>
     fbc:	af c0       	rjmp	.+350    	; 0x111c <GPIO_writePin+0x1c6>
			//porta
			case PORTA_ID:
				if(value==LOGIC_HIGH){
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	a1 f4       	brne	.+40     	; 0xfec <GPIO_writePin+0x96>
					SET_BIT(PORTA,pin_num);
     fc4:	ab e3       	ldi	r26, 0x3B	; 59
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	eb e3       	ldi	r30, 0x3B	; 59
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <GPIO_writePin+0x8c>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <GPIO_writePin+0x88>
     fe6:	84 2b       	or	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	98 c0       	rjmp	.+304    	; 0x111c <GPIO_writePin+0x1c6>
				}
				else{CLEAR_BIT(PORTA,pin_num);}
     fec:	ab e3       	ldi	r26, 0x3B	; 59
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	eb e3       	ldi	r30, 0x3B	; 59
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <GPIO_writePin+0xb4>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <GPIO_writePin+0xb0>
    100e:	80 95       	com	r24
    1010:	84 23       	and	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	83 c0       	rjmp	.+262    	; 0x111c <GPIO_writePin+0x1c6>
				break;
				//portB
			case PORTB_ID:
				if(value==LOGIC_HIGH){
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	a1 f4       	brne	.+40     	; 0x1044 <GPIO_writePin+0xee>
					SET_BIT(PORTB,pin_num);
    101c:	a8 e3       	ldi	r26, 0x38	; 56
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e8 e3       	ldi	r30, 0x38	; 56
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	48 2f       	mov	r20, r24
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	02 2e       	mov	r0, r18
    1034:	02 c0       	rjmp	.+4      	; 0x103a <GPIO_writePin+0xe4>
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	0a 94       	dec	r0
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <GPIO_writePin+0xe0>
    103e:	84 2b       	or	r24, r20
    1040:	8c 93       	st	X, r24
    1042:	6c c0       	rjmp	.+216    	; 0x111c <GPIO_writePin+0x1c6>
				}
				else{CLEAR_BIT(PORTB,pin_num);}
    1044:	a8 e3       	ldi	r26, 0x38	; 56
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e8 e3       	ldi	r30, 0x38	; 56
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 2e       	mov	r0, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <GPIO_writePin+0x10c>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	0a 94       	dec	r0
    1064:	e2 f7       	brpl	.-8      	; 0x105e <GPIO_writePin+0x108>
    1066:	80 95       	com	r24
    1068:	84 23       	and	r24, r20
    106a:	8c 93       	st	X, r24
    106c:	57 c0       	rjmp	.+174    	; 0x111c <GPIO_writePin+0x1c6>
				break;
				//PORTC
			case PORTC_ID:
				if(value==LOGIC_HIGH){
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	a1 f4       	brne	.+40     	; 0x109c <GPIO_writePin+0x146>
					SET_BIT(PORTC,pin_num);
    1074:	a5 e3       	ldi	r26, 0x35	; 53
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e5 e3       	ldi	r30, 0x35	; 53
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <GPIO_writePin+0x13c>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <GPIO_writePin+0x138>
    1096:	84 2b       	or	r24, r20
    1098:	8c 93       	st	X, r24
    109a:	40 c0       	rjmp	.+128    	; 0x111c <GPIO_writePin+0x1c6>
				}
				else{CLEAR_BIT(PORTC,pin_num);}
    109c:	a5 e3       	ldi	r26, 0x35	; 53
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e5 e3       	ldi	r30, 0x35	; 53
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 2e       	mov	r0, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <GPIO_writePin+0x164>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <GPIO_writePin+0x160>
    10be:	80 95       	com	r24
    10c0:	84 23       	and	r24, r20
    10c2:	8c 93       	st	X, r24
    10c4:	2b c0       	rjmp	.+86     	; 0x111c <GPIO_writePin+0x1c6>
				break;
				//PORTD
			case PORTD_ID:
				if(value==LOGIC_HIGH){
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	a1 f4       	brne	.+40     	; 0x10f4 <GPIO_writePin+0x19e>
					SET_BIT(PORTD,pin_num);
    10cc:	a2 e3       	ldi	r26, 0x32	; 50
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e2 e3       	ldi	r30, 0x32	; 50
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <GPIO_writePin+0x194>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <GPIO_writePin+0x190>
    10ee:	84 2b       	or	r24, r20
    10f0:	8c 93       	st	X, r24
    10f2:	14 c0       	rjmp	.+40     	; 0x111c <GPIO_writePin+0x1c6>
				}
				else{CLEAR_BIT(PORTD,pin_num);}
    10f4:	a2 e3       	ldi	r26, 0x32	; 50
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e2 e3       	ldi	r30, 0x32	; 50
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <GPIO_writePin+0x1bc>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <GPIO_writePin+0x1b8>
    1116:	80 95       	com	r24
    1118:	84 23       	and	r24, r20
    111a:	8c 93       	st	X, r24
				break;

			}
		}
}
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	00 d0       	rcall	.+0      	; 0x1132 <GPIO_readPin+0x6>
    1132:	00 d0       	rcall	.+0      	; 0x1134 <GPIO_readPin+0x8>
    1134:	00 d0       	rcall	.+0      	; 0x1136 <GPIO_readPin+0xa>
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	89 83       	std	Y+1, r24	; 0x01
    113c:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	88 30       	cpi	r24, 0x08	; 8
    1142:	18 f4       	brcc	.+6      	; 0x114a <GPIO_readPin+0x1e>
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	84 30       	cpi	r24, 0x04	; 4
    1148:	10 f0       	brcs	.+4      	; 0x114e <GPIO_readPin+0x22>
			{
				/* return low*/
		return LOGIC_LOW;
    114a:	1d 82       	std	Y+5, r1	; 0x05
    114c:	82 c0       	rjmp	.+260    	; 0x1252 <GPIO_readPin+0x126>
			}
	else{
		//switch for pins
		switch(port_num){
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	4b 81       	ldd	r20, Y+3	; 0x03
    115a:	5c 81       	ldd	r21, Y+4	; 0x04
    115c:	41 30       	cpi	r20, 0x01	; 1
    115e:	51 05       	cpc	r21, r1
    1160:	79 f1       	breq	.+94     	; 0x11c0 <GPIO_readPin+0x94>
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	82 30       	cpi	r24, 0x02	; 2
    1168:	91 05       	cpc	r25, r1
    116a:	34 f4       	brge	.+12     	; 0x1178 <GPIO_readPin+0x4c>
    116c:	2b 81       	ldd	r18, Y+3	; 0x03
    116e:	3c 81       	ldd	r19, Y+4	; 0x04
    1170:	21 15       	cp	r18, r1
    1172:	31 05       	cpc	r19, r1
    1174:	69 f0       	breq	.+26     	; 0x1190 <GPIO_readPin+0x64>
    1176:	6c c0       	rjmp	.+216    	; 0x1250 <GPIO_readPin+0x124>
    1178:	4b 81       	ldd	r20, Y+3	; 0x03
    117a:	5c 81       	ldd	r21, Y+4	; 0x04
    117c:	42 30       	cpi	r20, 0x02	; 2
    117e:	51 05       	cpc	r21, r1
    1180:	b9 f1       	breq	.+110    	; 0x11f0 <GPIO_readPin+0xc4>
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	9c 81       	ldd	r25, Y+4	; 0x04
    1186:	83 30       	cpi	r24, 0x03	; 3
    1188:	91 05       	cpc	r25, r1
    118a:	09 f4       	brne	.+2      	; 0x118e <GPIO_readPin+0x62>
    118c:	49 c0       	rjmp	.+146    	; 0x1220 <GPIO_readPin+0xf4>
    118e:	60 c0       	rjmp	.+192    	; 0x1250 <GPIO_readPin+0x124>
		//PINA
			case PORTA_ID:
				if(BIT_IS_SET(PINA,pin_num)){
    1190:	e9 e3       	ldi	r30, 0x39	; 57
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	88 2f       	mov	r24, r24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	a9 01       	movw	r20, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <GPIO_readPin+0x7c>
    11a4:	55 95       	asr	r21
    11a6:	47 95       	ror	r20
    11a8:	8a 95       	dec	r24
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <GPIO_readPin+0x78>
    11ac:	ca 01       	movw	r24, r20
    11ae:	81 70       	andi	r24, 0x01	; 1
    11b0:	90 70       	andi	r25, 0x00	; 0
    11b2:	88 23       	and	r24, r24
    11b4:	19 f0       	breq	.+6      	; 0x11bc <GPIO_readPin+0x90>
					return LOGIC_HIGH;
    11b6:	51 e0       	ldi	r21, 0x01	; 1
    11b8:	5d 83       	std	Y+5, r21	; 0x05
    11ba:	4b c0       	rjmp	.+150    	; 0x1252 <GPIO_readPin+0x126>
				}
				else{return LOGIC_LOW;}
    11bc:	1d 82       	std	Y+5, r1	; 0x05
    11be:	49 c0       	rjmp	.+146    	; 0x1252 <GPIO_readPin+0x126>
				break;
				//PINB
			case PORTB_ID:
				if(BIT_IS_SET(PINB,pin_num)){
    11c0:	e6 e3       	ldi	r30, 0x36	; 54
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	a9 01       	movw	r20, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <GPIO_readPin+0xac>
    11d4:	55 95       	asr	r21
    11d6:	47 95       	ror	r20
    11d8:	8a 95       	dec	r24
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <GPIO_readPin+0xa8>
    11dc:	ca 01       	movw	r24, r20
    11de:	81 70       	andi	r24, 0x01	; 1
    11e0:	90 70       	andi	r25, 0x00	; 0
    11e2:	88 23       	and	r24, r24
    11e4:	19 f0       	breq	.+6      	; 0x11ec <GPIO_readPin+0xc0>
					return LOGIC_HIGH;
    11e6:	51 e0       	ldi	r21, 0x01	; 1
    11e8:	5d 83       	std	Y+5, r21	; 0x05
    11ea:	33 c0       	rjmp	.+102    	; 0x1252 <GPIO_readPin+0x126>
				}
				else{return LOGIC_LOW;}
    11ec:	1d 82       	std	Y+5, r1	; 0x05
    11ee:	31 c0       	rjmp	.+98     	; 0x1252 <GPIO_readPin+0x126>
				break;
				//PINC
			case PORTC_ID:
				if(BIT_IS_SET(PINC,pin_num)){
    11f0:	e3 e3       	ldi	r30, 0x33	; 51
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	88 2f       	mov	r24, r24
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	a9 01       	movw	r20, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <GPIO_readPin+0xdc>
    1204:	55 95       	asr	r21
    1206:	47 95       	ror	r20
    1208:	8a 95       	dec	r24
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <GPIO_readPin+0xd8>
    120c:	ca 01       	movw	r24, r20
    120e:	81 70       	andi	r24, 0x01	; 1
    1210:	90 70       	andi	r25, 0x00	; 0
    1212:	88 23       	and	r24, r24
    1214:	19 f0       	breq	.+6      	; 0x121c <GPIO_readPin+0xf0>
					return LOGIC_HIGH;
    1216:	51 e0       	ldi	r21, 0x01	; 1
    1218:	5d 83       	std	Y+5, r21	; 0x05
    121a:	1b c0       	rjmp	.+54     	; 0x1252 <GPIO_readPin+0x126>
				}
				else{return LOGIC_LOW;}
    121c:	1d 82       	std	Y+5, r1	; 0x05
    121e:	19 c0       	rjmp	.+50     	; 0x1252 <GPIO_readPin+0x126>
				break;
				//PIND
			case PORTD_ID:
				if(BIT_IS_SET(PIND,pin_num)){
    1220:	e0 e3       	ldi	r30, 0x30	; 48
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	8a 81       	ldd	r24, Y+2	; 0x02
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	a9 01       	movw	r20, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <GPIO_readPin+0x10c>
    1234:	55 95       	asr	r21
    1236:	47 95       	ror	r20
    1238:	8a 95       	dec	r24
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <GPIO_readPin+0x108>
    123c:	ca 01       	movw	r24, r20
    123e:	81 70       	andi	r24, 0x01	; 1
    1240:	90 70       	andi	r25, 0x00	; 0
    1242:	88 23       	and	r24, r24
    1244:	19 f0       	breq	.+6      	; 0x124c <GPIO_readPin+0x120>
					return LOGIC_HIGH;
    1246:	51 e0       	ldi	r21, 0x01	; 1
    1248:	5d 83       	std	Y+5, r21	; 0x05
    124a:	03 c0       	rjmp	.+6      	; 0x1252 <GPIO_readPin+0x126>
				}
				else{return LOGIC_LOW;}
    124c:	1d 82       	std	Y+5, r1	; 0x05
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <GPIO_readPin+0x126>
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <GPIO_readPin+0x12a>
				break;
		}
	}

}
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
    1254:	8e 83       	std	Y+6, r24	; 0x06
    1256:	8e 81       	ldd	r24, Y+6	; 0x06
    1258:	26 96       	adiw	r28, 0x06	; 6
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	00 d0       	rcall	.+0      	; 0x1270 <GPIO_setupPortDirection+0x6>
    1270:	00 d0       	rcall	.+0      	; 0x1272 <GPIO_setupPortDirection+0x8>
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	89 83       	std	Y+1, r24	; 0x01
    1278:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	84 30       	cpi	r24, 0x04	; 4
    127e:	90 f5       	brcc	.+100    	; 0x12e4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	3c 83       	std	Y+4, r19	; 0x04
    1288:	2b 83       	std	Y+3, r18	; 0x03
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	9c 81       	ldd	r25, Y+4	; 0x04
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	91 05       	cpc	r25, r1
    1292:	d1 f0       	breq	.+52     	; 0x12c8 <GPIO_setupPortDirection+0x5e>
    1294:	2b 81       	ldd	r18, Y+3	; 0x03
    1296:	3c 81       	ldd	r19, Y+4	; 0x04
    1298:	22 30       	cpi	r18, 0x02	; 2
    129a:	31 05       	cpc	r19, r1
    129c:	2c f4       	brge	.+10     	; 0x12a8 <GPIO_setupPortDirection+0x3e>
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	9c 81       	ldd	r25, Y+4	; 0x04
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	61 f0       	breq	.+24     	; 0x12be <GPIO_setupPortDirection+0x54>
    12a6:	1e c0       	rjmp	.+60     	; 0x12e4 <GPIO_setupPortDirection+0x7a>
    12a8:	2b 81       	ldd	r18, Y+3	; 0x03
    12aa:	3c 81       	ldd	r19, Y+4	; 0x04
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 05       	cpc	r19, r1
    12b0:	81 f0       	breq	.+32     	; 0x12d2 <GPIO_setupPortDirection+0x68>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	83 30       	cpi	r24, 0x03	; 3
    12b8:	91 05       	cpc	r25, r1
    12ba:	81 f0       	breq	.+32     	; 0x12dc <GPIO_setupPortDirection+0x72>
    12bc:	13 c0       	rjmp	.+38     	; 0x12e4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    12be:	ea e3       	ldi	r30, 0x3A	; 58
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	80 83       	st	Z, r24
    12c6:	0e c0       	rjmp	.+28     	; 0x12e4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    12c8:	e7 e3       	ldi	r30, 0x37	; 55
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	80 83       	st	Z, r24
    12d0:	09 c0       	rjmp	.+18     	; 0x12e4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    12d2:	e4 e3       	ldi	r30, 0x34	; 52
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	80 83       	st	Z, r24
    12da:	04 c0       	rjmp	.+8      	; 0x12e4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    12dc:	e1 e3       	ldi	r30, 0x31	; 49
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	80 83       	st	Z, r24
			break;
		}
	}
}
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <GPIO_writePort+0x6>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <GPIO_writePort+0x8>
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num >= NUM_OF_PORTS)
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	84 30       	cpi	r24, 0x04	; 4
    1306:	90 f5       	brcc	.+100    	; 0x136c <GPIO_writePort+0x7a>
				/* Do Nothing */
			}
			else
			{
				//SWTICH PORT
				switch(port_num){
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	3c 83       	std	Y+4, r19	; 0x04
    1310:	2b 83       	std	Y+3, r18	; 0x03
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	91 05       	cpc	r25, r1
    131a:	d1 f0       	breq	.+52     	; 0x1350 <GPIO_writePort+0x5e>
    131c:	2b 81       	ldd	r18, Y+3	; 0x03
    131e:	3c 81       	ldd	r19, Y+4	; 0x04
    1320:	22 30       	cpi	r18, 0x02	; 2
    1322:	31 05       	cpc	r19, r1
    1324:	2c f4       	brge	.+10     	; 0x1330 <GPIO_writePort+0x3e>
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	61 f0       	breq	.+24     	; 0x1346 <GPIO_writePort+0x54>
    132e:	1e c0       	rjmp	.+60     	; 0x136c <GPIO_writePort+0x7a>
    1330:	2b 81       	ldd	r18, Y+3	; 0x03
    1332:	3c 81       	ldd	r19, Y+4	; 0x04
    1334:	22 30       	cpi	r18, 0x02	; 2
    1336:	31 05       	cpc	r19, r1
    1338:	81 f0       	breq	.+32     	; 0x135a <GPIO_writePort+0x68>
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	9c 81       	ldd	r25, Y+4	; 0x04
    133e:	83 30       	cpi	r24, 0x03	; 3
    1340:	91 05       	cpc	r25, r1
    1342:	81 f0       	breq	.+32     	; 0x1364 <GPIO_writePort+0x72>
    1344:	13 c0       	rjmp	.+38     	; 0x136c <GPIO_writePort+0x7a>
//PORTA
				case PORTA_ID:

					PORTA=value;
    1346:	eb e3       	ldi	r30, 0x3B	; 59
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	8a 81       	ldd	r24, Y+2	; 0x02
    134c:	80 83       	st	Z, r24
    134e:	0e c0       	rjmp	.+28     	; 0x136c <GPIO_writePort+0x7a>
					break;
					//PORTB
				case PORTB_ID:
					PORTB=value;
    1350:	e8 e3       	ldi	r30, 0x38	; 56
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	80 83       	st	Z, r24
    1358:	09 c0       	rjmp	.+18     	; 0x136c <GPIO_writePort+0x7a>
					break;
					//PORTC
				case PORTC_ID:
					PORTC=value;
    135a:	e5 e3       	ldi	r30, 0x35	; 53
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	80 83       	st	Z, r24
    1362:	04 c0       	rjmp	.+8      	; 0x136c <GPIO_writePort+0x7a>
					break;
					//PORTD
				case PORTD_ID:
					PORTD=value;
    1364:	e2 e3       	ldi	r30, 0x32	; 50
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	80 83       	st	Z, r24
					break;
				}
				}


}
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	00 d0       	rcall	.+0      	; 0x1380 <GPIO_readPort+0x6>
    1380:	00 d0       	rcall	.+0      	; 0x1382 <GPIO_readPort+0x8>
    1382:	0f 92       	push	r0
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	84 30       	cpi	r24, 0x04	; 4
    138e:	10 f0       	brcs	.+4      	; 0x1394 <GPIO_readPort+0x1a>
				{
					return 0;
    1390:	1c 82       	std	Y+4, r1	; 0x04
    1392:	34 c0       	rjmp	.+104    	; 0x13fc <GPIO_readPort+0x82>
				}
				else
				{
					//SWTICH PORT
					switch(port_num){
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	3b 83       	std	Y+3, r19	; 0x03
    139c:	2a 83       	std	Y+2, r18	; 0x02
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	9b 81       	ldd	r25, Y+3	; 0x03
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	91 05       	cpc	r25, r1
    13a6:	d1 f0       	breq	.+52     	; 0x13dc <GPIO_readPort+0x62>
    13a8:	2a 81       	ldd	r18, Y+2	; 0x02
    13aa:	3b 81       	ldd	r19, Y+3	; 0x03
    13ac:	22 30       	cpi	r18, 0x02	; 2
    13ae:	31 05       	cpc	r19, r1
    13b0:	2c f4       	brge	.+10     	; 0x13bc <GPIO_readPort+0x42>
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	9b 81       	ldd	r25, Y+3	; 0x03
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	61 f0       	breq	.+24     	; 0x13d2 <GPIO_readPort+0x58>
    13ba:	1f c0       	rjmp	.+62     	; 0x13fa <GPIO_readPort+0x80>
    13bc:	2a 81       	ldd	r18, Y+2	; 0x02
    13be:	3b 81       	ldd	r19, Y+3	; 0x03
    13c0:	22 30       	cpi	r18, 0x02	; 2
    13c2:	31 05       	cpc	r19, r1
    13c4:	81 f0       	breq	.+32     	; 0x13e6 <GPIO_readPort+0x6c>
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ca:	83 30       	cpi	r24, 0x03	; 3
    13cc:	91 05       	cpc	r25, r1
    13ce:	81 f0       	breq	.+32     	; 0x13f0 <GPIO_readPort+0x76>
    13d0:	14 c0       	rjmp	.+40     	; 0x13fa <GPIO_readPort+0x80>
	//PORTA
					case PORTA_ID:
						return PINA;
    13d2:	e9 e3       	ldi	r30, 0x39	; 57
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	90 81       	ld	r25, Z
    13d8:	9c 83       	std	Y+4, r25	; 0x04
    13da:	10 c0       	rjmp	.+32     	; 0x13fc <GPIO_readPort+0x82>
						break;
						//PORTB
					case PORTB_ID:
						return PINB;
    13dc:	e6 e3       	ldi	r30, 0x36	; 54
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	20 81       	ld	r18, Z
    13e2:	2c 83       	std	Y+4, r18	; 0x04
    13e4:	0b c0       	rjmp	.+22     	; 0x13fc <GPIO_readPort+0x82>
						break;
						//PORTC
					case PORTC_ID:
						return PINC;
    13e6:	e3 e3       	ldi	r30, 0x33	; 51
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	30 81       	ld	r19, Z
    13ec:	3c 83       	std	Y+4, r19	; 0x04
    13ee:	06 c0       	rjmp	.+12     	; 0x13fc <GPIO_readPort+0x82>
						break;
						//PORTD
					case PORTD_ID:
						return PIND;
    13f0:	e0 e3       	ldi	r30, 0x30	; 48
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	8c 83       	std	Y+4, r24	; 0x04
    13f8:	01 c0       	rjmp	.+2      	; 0x13fc <GPIO_readPort+0x82>
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <GPIO_readPort+0x86>
						break;
					}
					}


}
    13fc:	9c 81       	ldd	r25, Y+4	; 0x04
    13fe:	9d 83       	std	Y+5, r25	; 0x05
    1400:	8d 81       	ldd	r24, Y+5	; 0x05
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <main>:
UART_ConfigType UART_Configurations={BIT_8,DISABLED,STOP_BIT1,9600};
TWI_ConfigType TWI_Configurations={ADDRESS,BIT_RATE};
Timer1_ConfigType timer1_Configurations_CTC={0,7812,PRESCALER1024, COMPARE};

int main(void)
{
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	c5 56       	subi	r28, 0x65	; 101
    1420:	d0 40       	sbci	r29, 0x00	; 0
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7);//Global interrupt enable
    142c:	af e5       	ldi	r26, 0x5F	; 95
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	ef e5       	ldi	r30, 0x5F	; 95
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	80 68       	ori	r24, 0x80	; 128
    1438:	8c 93       	st	X, r24

	/* Initialize the TWI/I2C Driver */
	TWI_init(&TWI_Configurations);
    143a:	8f e6       	ldi	r24, 0x6F	; 111
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	0e 94 8a 11 	call	0x2314	; 0x2314 <TWI_init>
	Buzzer_init();
    1442:	0e 94 f6 05 	call	0xbec	; 0xbec <Buzzer_init>
	DcMotor_Init();
    1446:	0e 94 a3 05 	call	0xb46	; 0xb46 <DcMotor_Init>
	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_init(&UART_Configurations);
    144a:	88 e6       	ldi	r24, 0x68	; 104
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 1a 12 	call	0x2434	; 0x2434 <UART_init>

	uint8 num1[5]={0},num2[5]={0},verifed=0,command=0;
    1452:	ce 01       	movw	r24, r28
    1454:	89 5a       	subi	r24, 0xA9	; 169
    1456:	9f 4f       	sbci	r25, 0xFF	; 255
    1458:	25 e0       	ldi	r18, 0x05	; 5
    145a:	fc 01       	movw	r30, r24
    145c:	df 01       	movw	r26, r30
    145e:	82 2f       	mov	r24, r18
    1460:	1d 92       	st	X+, r1
    1462:	8a 95       	dec	r24
    1464:	e9 f7       	brne	.-6      	; 0x1460 <main+0x4e>
    1466:	ce 01       	movw	r24, r28
    1468:	84 5a       	subi	r24, 0xA4	; 164
    146a:	9f 4f       	sbci	r25, 0xFF	; 255
    146c:	25 e0       	ldi	r18, 0x05	; 5
    146e:	fc 01       	movw	r30, r24
    1470:	df 01       	movw	r26, r30
    1472:	82 2f       	mov	r24, r18
    1474:	1d 92       	st	X+, r1
    1476:	8a 95       	dec	r24
    1478:	e9 f7       	brne	.-6      	; 0x1474 <main+0x62>
    147a:	fe 01       	movw	r30, r28
    147c:	ea 5a       	subi	r30, 0xAA	; 170
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	10 82       	st	Z, r1
    1482:	fe 01       	movw	r30, r28
    1484:	eb 5a       	subi	r30, 0xAB	; 171
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	10 82       	st	Z, r1

	Timer1_setCallBack(timer_count_CTC);
    148a:	83 e6       	ldi	r24, 0x63	; 99
    148c:	9f e0       	ldi	r25, 0x0F	; 15
    148e:	0e 94 78 11 	call	0x22f0	; 0x22f0 <Timer1_setCallBack>
    1492:	d1 c0       	rjmp	.+418    	; 0x1636 <main+0x224>

	while(verifed==0)
	{
		recive_pass(num1);//Receive the 1st pass
    1494:	ce 01       	movw	r24, r28
    1496:	89 5a       	subi	r24, 0xA9	; 169
    1498:	9f 4f       	sbci	r25, 0xFF	; 255
    149a:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <recive_pass>
		recive_pass(num2);//Receive the 1st pass
    149e:	ce 01       	movw	r24, r28
    14a0:	84 5a       	subi	r24, 0xA4	; 164
    14a2:	9f 4f       	sbci	r25, 0xFF	; 255
    14a4:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <recive_pass>
		verifed=check_numbers(num1,num2);//compare the 2 pass
    14a8:	ce 01       	movw	r24, r28
    14aa:	89 5a       	subi	r24, 0xA9	; 169
    14ac:	9f 4f       	sbci	r25, 0xFF	; 255
    14ae:	9e 01       	movw	r18, r28
    14b0:	24 5a       	subi	r18, 0xA4	; 164
    14b2:	3f 4f       	sbci	r19, 0xFF	; 255
    14b4:	b9 01       	movw	r22, r18
    14b6:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <check_numbers>
    14ba:	fe 01       	movw	r30, r28
    14bc:	ea 5a       	subi	r30, 0xAA	; 170
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	80 83       	st	Z, r24
		UART_sendByte(verifed);//send the 2 pass are matched or not
    14c2:	fe 01       	movw	r30, r28
    14c4:	ea 5a       	subi	r30, 0xAA	; 170
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	80 81       	ld	r24, Z
    14ca:	0e 94 a1 12 	call	0x2542	; 0x2542 <UART_sendByte>
    14ce:	fe 01       	movw	r30, r28
    14d0:	ef 5a       	subi	r30, 0xAF	; 175
    14d2:	ff 4f       	sbci	r31, 0xFF	; 255
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	aa ef       	ldi	r26, 0xFA	; 250
    14da:	b3 e4       	ldi	r27, 0x43	; 67
    14dc:	80 83       	st	Z, r24
    14de:	91 83       	std	Z+1, r25	; 0x01
    14e0:	a2 83       	std	Z+2, r26	; 0x02
    14e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14e4:	8e 01       	movw	r16, r28
    14e6:	03 5b       	subi	r16, 0xB3	; 179
    14e8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ea:	fe 01       	movw	r30, r28
    14ec:	ef 5a       	subi	r30, 0xAF	; 175
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	60 81       	ld	r22, Z
    14f2:	71 81       	ldd	r23, Z+1	; 0x01
    14f4:	82 81       	ldd	r24, Z+2	; 0x02
    14f6:	93 81       	ldd	r25, Z+3	; 0x03
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	4a ef       	ldi	r20, 0xFA	; 250
    14fe:	54 e4       	ldi	r21, 0x44	; 68
    1500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	f8 01       	movw	r30, r16
    150a:	80 83       	st	Z, r24
    150c:	91 83       	std	Z+1, r25	; 0x01
    150e:	a2 83       	std	Z+2, r26	; 0x02
    1510:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1512:	fe 01       	movw	r30, r28
    1514:	e3 5b       	subi	r30, 0xB3	; 179
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	60 81       	ld	r22, Z
    151a:	71 81       	ldd	r23, Z+1	; 0x01
    151c:	82 81       	ldd	r24, Z+2	; 0x02
    151e:	93 81       	ldd	r25, Z+3	; 0x03
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	40 e8       	ldi	r20, 0x80	; 128
    1526:	5f e3       	ldi	r21, 0x3F	; 63
    1528:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    152c:	88 23       	and	r24, r24
    152e:	44 f4       	brge	.+16     	; 0x1540 <main+0x12e>
		__ticks = 1;
    1530:	fe 01       	movw	r30, r28
    1532:	e5 5b       	subi	r30, 0xB5	; 181
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	91 83       	std	Z+1, r25	; 0x01
    153c:	80 83       	st	Z, r24
    153e:	64 c0       	rjmp	.+200    	; 0x1608 <main+0x1f6>
	else if (__tmp > 65535)
    1540:	fe 01       	movw	r30, r28
    1542:	e3 5b       	subi	r30, 0xB3	; 179
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	60 81       	ld	r22, Z
    1548:	71 81       	ldd	r23, Z+1	; 0x01
    154a:	82 81       	ldd	r24, Z+2	; 0x02
    154c:	93 81       	ldd	r25, Z+3	; 0x03
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	3f ef       	ldi	r19, 0xFF	; 255
    1552:	4f e7       	ldi	r20, 0x7F	; 127
    1554:	57 e4       	ldi	r21, 0x47	; 71
    1556:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    155a:	18 16       	cp	r1, r24
    155c:	0c f0       	brlt	.+2      	; 0x1560 <main+0x14e>
    155e:	43 c0       	rjmp	.+134    	; 0x15e6 <main+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1560:	fe 01       	movw	r30, r28
    1562:	ef 5a       	subi	r30, 0xAF	; 175
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	60 81       	ld	r22, Z
    1568:	71 81       	ldd	r23, Z+1	; 0x01
    156a:	82 81       	ldd	r24, Z+2	; 0x02
    156c:	93 81       	ldd	r25, Z+3	; 0x03
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e2       	ldi	r20, 0x20	; 32
    1574:	51 e4       	ldi	r21, 0x41	; 65
    1576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	8e 01       	movw	r16, r28
    1580:	05 5b       	subi	r16, 0xB5	; 181
    1582:	1f 4f       	sbci	r17, 0xFF	; 255
    1584:	bc 01       	movw	r22, r24
    1586:	cd 01       	movw	r24, r26
    1588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	f8 01       	movw	r30, r16
    1592:	91 83       	std	Z+1, r25	; 0x01
    1594:	80 83       	st	Z, r24
    1596:	1f c0       	rjmp	.+62     	; 0x15d6 <main+0x1c4>
    1598:	fe 01       	movw	r30, r28
    159a:	e7 5b       	subi	r30, 0xB7	; 183
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	88 ec       	ldi	r24, 0xC8	; 200
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	91 83       	std	Z+1, r25	; 0x01
    15a4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15a6:	fe 01       	movw	r30, r28
    15a8:	e7 5b       	subi	r30, 0xB7	; 183
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	80 81       	ld	r24, Z
    15ae:	91 81       	ldd	r25, Z+1	; 0x01
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <main+0x19e>
    15b4:	fe 01       	movw	r30, r28
    15b6:	e7 5b       	subi	r30, 0xB7	; 183
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15be:	de 01       	movw	r26, r28
    15c0:	a5 5b       	subi	r26, 0xB5	; 181
    15c2:	bf 4f       	sbci	r27, 0xFF	; 255
    15c4:	fe 01       	movw	r30, r28
    15c6:	e5 5b       	subi	r30, 0xB5	; 181
    15c8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ca:	80 81       	ld	r24, Z
    15cc:	91 81       	ldd	r25, Z+1	; 0x01
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	11 96       	adiw	r26, 0x01	; 1
    15d2:	9c 93       	st	X, r25
    15d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d6:	fe 01       	movw	r30, r28
    15d8:	e5 5b       	subi	r30, 0xB5	; 181
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	80 81       	ld	r24, Z
    15de:	91 81       	ldd	r25, Z+1	; 0x01
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	d1 f6       	brne	.-76     	; 0x1598 <main+0x186>
    15e4:	28 c0       	rjmp	.+80     	; 0x1636 <main+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e6:	8e 01       	movw	r16, r28
    15e8:	05 5b       	subi	r16, 0xB5	; 181
    15ea:	1f 4f       	sbci	r17, 0xFF	; 255
    15ec:	fe 01       	movw	r30, r28
    15ee:	e3 5b       	subi	r30, 0xB3	; 179
    15f0:	ff 4f       	sbci	r31, 0xFF	; 255
    15f2:	60 81       	ld	r22, Z
    15f4:	71 81       	ldd	r23, Z+1	; 0x01
    15f6:	82 81       	ldd	r24, Z+2	; 0x02
    15f8:	93 81       	ldd	r25, Z+3	; 0x03
    15fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	f8 01       	movw	r30, r16
    1604:	91 83       	std	Z+1, r25	; 0x01
    1606:	80 83       	st	Z, r24
    1608:	de 01       	movw	r26, r28
    160a:	a9 5b       	subi	r26, 0xB9	; 185
    160c:	bf 4f       	sbci	r27, 0xFF	; 255
    160e:	fe 01       	movw	r30, r28
    1610:	e5 5b       	subi	r30, 0xB5	; 181
    1612:	ff 4f       	sbci	r31, 0xFF	; 255
    1614:	80 81       	ld	r24, Z
    1616:	91 81       	ldd	r25, Z+1	; 0x01
    1618:	11 96       	adiw	r26, 0x01	; 1
    161a:	9c 93       	st	X, r25
    161c:	8e 93       	st	-X, r24
    161e:	fe 01       	movw	r30, r28
    1620:	e9 5b       	subi	r30, 0xB9	; 185
    1622:	ff 4f       	sbci	r31, 0xFF	; 255
    1624:	80 81       	ld	r24, Z
    1626:	91 81       	ldd	r25, Z+1	; 0x01
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <main+0x216>
    162c:	fe 01       	movw	r30, r28
    162e:	e9 5b       	subi	r30, 0xB9	; 185
    1630:	ff 4f       	sbci	r31, 0xFF	; 255
    1632:	91 83       	std	Z+1, r25	; 0x01
    1634:	80 83       	st	Z, r24

	uint8 num1[5]={0},num2[5]={0},verifed=0,command=0;

	Timer1_setCallBack(timer_count_CTC);

	while(verifed==0)
    1636:	fe 01       	movw	r30, r28
    1638:	ea 5a       	subi	r30, 0xAA	; 170
    163a:	ff 4f       	sbci	r31, 0xFF	; 255
    163c:	80 81       	ld	r24, Z
    163e:	88 23       	and	r24, r24
    1640:	09 f4       	brne	.+2      	; 0x1644 <main+0x232>
    1642:	28 cf       	rjmp	.-432    	; 0x1494 <main+0x82>
		verifed=check_numbers(num1,num2);//compare the 2 pass
		UART_sendByte(verifed);//send the 2 pass are matched or not
		_delay_ms(500);
	}
//if matched it will be saved in eeprom
	store_eeprom(num1);
    1644:	ce 01       	movw	r24, r28
    1646:	89 5a       	subi	r24, 0xA9	; 169
    1648:	9f 4f       	sbci	r25, 0xFF	; 255
    164a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <store_eeprom>

	while(1)
	{
		//main options
		uint8 pass[5]={0};
    164e:	ce 01       	movw	r24, r28
    1650:	8f 59       	subi	r24, 0x9F	; 159
    1652:	9f 4f       	sbci	r25, 0xFF	; 255
    1654:	25 e0       	ldi	r18, 0x05	; 5
    1656:	fc 01       	movw	r30, r24
    1658:	df 01       	movw	r26, r30
    165a:	82 2f       	mov	r24, r18
    165c:	1d 92       	st	X+, r1
    165e:	8a 95       	dec	r24
    1660:	e9 f7       	brne	.-6      	; 0x165c <main+0x24a>
		command = UART_recieveByte();//receive option 1 or 2
    1662:	0e 94 b8 12 	call	0x2570	; 0x2570 <UART_recieveByte>
    1666:	fe 01       	movw	r30, r28
    1668:	eb 5a       	subi	r30, 0xAB	; 171
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	80 83       	st	Z, r24
    166e:	fe 01       	movw	r30, r28
    1670:	ed 5b       	subi	r30, 0xBD	; 189
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	aa ef       	ldi	r26, 0xFA	; 250
    167a:	b3 e4       	ldi	r27, 0x43	; 67
    167c:	80 83       	st	Z, r24
    167e:	91 83       	std	Z+1, r25	; 0x01
    1680:	a2 83       	std	Z+2, r26	; 0x02
    1682:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1684:	8e 01       	movw	r16, r28
    1686:	01 5c       	subi	r16, 0xC1	; 193
    1688:	1f 4f       	sbci	r17, 0xFF	; 255
    168a:	fe 01       	movw	r30, r28
    168c:	ed 5b       	subi	r30, 0xBD	; 189
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	60 81       	ld	r22, Z
    1692:	71 81       	ldd	r23, Z+1	; 0x01
    1694:	82 81       	ldd	r24, Z+2	; 0x02
    1696:	93 81       	ldd	r25, Z+3	; 0x03
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	4a ef       	ldi	r20, 0xFA	; 250
    169e:	54 e4       	ldi	r21, 0x44	; 68
    16a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	f8 01       	movw	r30, r16
    16aa:	80 83       	st	Z, r24
    16ac:	91 83       	std	Z+1, r25	; 0x01
    16ae:	a2 83       	std	Z+2, r26	; 0x02
    16b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16b2:	fe 01       	movw	r30, r28
    16b4:	ff 96       	adiw	r30, 0x3f	; 63
    16b6:	60 81       	ld	r22, Z
    16b8:	71 81       	ldd	r23, Z+1	; 0x01
    16ba:	82 81       	ldd	r24, Z+2	; 0x02
    16bc:	93 81       	ldd	r25, Z+3	; 0x03
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	40 e8       	ldi	r20, 0x80	; 128
    16c4:	5f e3       	ldi	r21, 0x3F	; 63
    16c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ca:	88 23       	and	r24, r24
    16cc:	2c f4       	brge	.+10     	; 0x16d8 <main+0x2c6>
		__ticks = 1;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	9e af       	std	Y+62, r25	; 0x3e
    16d4:	8d af       	std	Y+61, r24	; 0x3d
    16d6:	46 c0       	rjmp	.+140    	; 0x1764 <main+0x352>
	else if (__tmp > 65535)
    16d8:	fe 01       	movw	r30, r28
    16da:	ff 96       	adiw	r30, 0x3f	; 63
    16dc:	60 81       	ld	r22, Z
    16de:	71 81       	ldd	r23, Z+1	; 0x01
    16e0:	82 81       	ldd	r24, Z+2	; 0x02
    16e2:	93 81       	ldd	r25, Z+3	; 0x03
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	3f ef       	ldi	r19, 0xFF	; 255
    16e8:	4f e7       	ldi	r20, 0x7F	; 127
    16ea:	57 e4       	ldi	r21, 0x47	; 71
    16ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16f0:	18 16       	cp	r1, r24
    16f2:	64 f5       	brge	.+88     	; 0x174c <main+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f4:	fe 01       	movw	r30, r28
    16f6:	ed 5b       	subi	r30, 0xBD	; 189
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	60 81       	ld	r22, Z
    16fc:	71 81       	ldd	r23, Z+1	; 0x01
    16fe:	82 81       	ldd	r24, Z+2	; 0x02
    1700:	93 81       	ldd	r25, Z+3	; 0x03
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e2       	ldi	r20, 0x20	; 32
    1708:	51 e4       	ldi	r21, 0x41	; 65
    170a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	bc 01       	movw	r22, r24
    1714:	cd 01       	movw	r24, r26
    1716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	9e af       	std	Y+62, r25	; 0x3e
    1720:	8d af       	std	Y+61, r24	; 0x3d
    1722:	0f c0       	rjmp	.+30     	; 0x1742 <main+0x330>
    1724:	88 ec       	ldi	r24, 0xC8	; 200
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	9c af       	std	Y+60, r25	; 0x3c
    172a:	8b af       	std	Y+59, r24	; 0x3b
    172c:	8b ad       	ldd	r24, Y+59	; 0x3b
    172e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	f1 f7       	brne	.-4      	; 0x1730 <main+0x31e>
    1734:	9c af       	std	Y+60, r25	; 0x3c
    1736:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1738:	8d ad       	ldd	r24, Y+61	; 0x3d
    173a:	9e ad       	ldd	r25, Y+62	; 0x3e
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	9e af       	std	Y+62, r25	; 0x3e
    1740:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1742:	8d ad       	ldd	r24, Y+61	; 0x3d
    1744:	9e ad       	ldd	r25, Y+62	; 0x3e
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	69 f7       	brne	.-38     	; 0x1724 <main+0x312>
    174a:	16 c0       	rjmp	.+44     	; 0x1778 <main+0x366>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174c:	fe 01       	movw	r30, r28
    174e:	ff 96       	adiw	r30, 0x3f	; 63
    1750:	60 81       	ld	r22, Z
    1752:	71 81       	ldd	r23, Z+1	; 0x01
    1754:	82 81       	ldd	r24, Z+2	; 0x02
    1756:	93 81       	ldd	r25, Z+3	; 0x03
    1758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	9e af       	std	Y+62, r25	; 0x3e
    1762:	8d af       	std	Y+61, r24	; 0x3d
    1764:	8d ad       	ldd	r24, Y+61	; 0x3d
    1766:	9e ad       	ldd	r25, Y+62	; 0x3e
    1768:	9a af       	std	Y+58, r25	; 0x3a
    176a:	89 af       	std	Y+57, r24	; 0x39
    176c:	89 ad       	ldd	r24, Y+57	; 0x39
    176e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <main+0x35e>
    1774:	9a af       	std	Y+58, r25	; 0x3a
    1776:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(500);

		//read the saved password from eeprom
		read_eeprom(pass);
    1778:	ce 01       	movw	r24, r28
    177a:	8f 59       	subi	r24, 0x9F	; 159
    177c:	9f 4f       	sbci	r25, 0xFF	; 255
    177e:	0e 94 19 10 	call	0x2032	; 0x2032 <read_eeprom>
		//option 1
		if (command == '+')
    1782:	fe 01       	movw	r30, r28
    1784:	eb 5a       	subi	r30, 0xAB	; 171
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	80 81       	ld	r24, Z
    178a:	8b 32       	cpi	r24, 0x2B	; 43
    178c:	09 f0       	breq	.+2      	; 0x1790 <main+0x37e>
    178e:	91 c1       	rjmp	.+802    	; 0x1ab2 <main+0x6a0>
		{
			recive_pass(num1);//receive the entered pass
    1790:	ce 01       	movw	r24, r28
    1792:	89 5a       	subi	r24, 0xA9	; 169
    1794:	9f 4f       	sbci	r25, 0xFF	; 255
    1796:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <recive_pass>
			verifed = 0;
    179a:	fe 01       	movw	r30, r28
    179c:	ea 5a       	subi	r30, 0xAA	; 170
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	10 82       	st	Z, r1
			verifed=check_numbers(num1,pass);//compare it with saved one
    17a2:	ce 01       	movw	r24, r28
    17a4:	89 5a       	subi	r24, 0xA9	; 169
    17a6:	9f 4f       	sbci	r25, 0xFF	; 255
    17a8:	9e 01       	movw	r18, r28
    17aa:	2f 59       	subi	r18, 0x9F	; 159
    17ac:	3f 4f       	sbci	r19, 0xFF	; 255
    17ae:	b9 01       	movw	r22, r18
    17b0:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <check_numbers>
    17b4:	fe 01       	movw	r30, r28
    17b6:	ea 5a       	subi	r30, 0xAA	; 170
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	80 83       	st	Z, r24

			if (verifed)
    17bc:	fe 01       	movw	r30, r28
    17be:	ea 5a       	subi	r30, 0xAA	; 170
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	80 81       	ld	r24, Z
    17c4:	88 23       	and	r24, r24
    17c6:	09 f4       	brne	.+2      	; 0x17ca <main+0x3b8>
    17c8:	7a c0       	rjmp	.+244    	; 0x18be <main+0x4ac>
			{
				//if the 2 passwords are matched
				falsecounter=0;
    17ca:	10 92 7c 00 	sts	0x007C, r1
				UART_sendByte(1);
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	0e 94 a1 12 	call	0x2542	; 0x2542 <UART_sendByte>
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	aa ef       	ldi	r26, 0xFA	; 250
    17da:	b3 e4       	ldi	r27, 0x43	; 67
    17dc:	8d ab       	std	Y+53, r24	; 0x35
    17de:	9e ab       	std	Y+54, r25	; 0x36
    17e0:	af ab       	std	Y+55, r26	; 0x37
    17e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e4:	6d a9       	ldd	r22, Y+53	; 0x35
    17e6:	7e a9       	ldd	r23, Y+54	; 0x36
    17e8:	8f a9       	ldd	r24, Y+55	; 0x37
    17ea:	98 ad       	ldd	r25, Y+56	; 0x38
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	4a ef       	ldi	r20, 0xFA	; 250
    17f2:	54 e4       	ldi	r21, 0x44	; 68
    17f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	89 ab       	std	Y+49, r24	; 0x31
    17fe:	9a ab       	std	Y+50, r25	; 0x32
    1800:	ab ab       	std	Y+51, r26	; 0x33
    1802:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1804:	69 a9       	ldd	r22, Y+49	; 0x31
    1806:	7a a9       	ldd	r23, Y+50	; 0x32
    1808:	8b a9       	ldd	r24, Y+51	; 0x33
    180a:	9c a9       	ldd	r25, Y+52	; 0x34
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e8       	ldi	r20, 0x80	; 128
    1812:	5f e3       	ldi	r21, 0x3F	; 63
    1814:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1818:	88 23       	and	r24, r24
    181a:	2c f4       	brge	.+10     	; 0x1826 <main+0x414>
		__ticks = 1;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	98 ab       	std	Y+48, r25	; 0x30
    1822:	8f a7       	std	Y+47, r24	; 0x2f
    1824:	3f c0       	rjmp	.+126    	; 0x18a4 <main+0x492>
	else if (__tmp > 65535)
    1826:	69 a9       	ldd	r22, Y+49	; 0x31
    1828:	7a a9       	ldd	r23, Y+50	; 0x32
    182a:	8b a9       	ldd	r24, Y+51	; 0x33
    182c:	9c a9       	ldd	r25, Y+52	; 0x34
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	3f ef       	ldi	r19, 0xFF	; 255
    1832:	4f e7       	ldi	r20, 0x7F	; 127
    1834:	57 e4       	ldi	r21, 0x47	; 71
    1836:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    183a:	18 16       	cp	r1, r24
    183c:	4c f5       	brge	.+82     	; 0x1890 <main+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183e:	6d a9       	ldd	r22, Y+53	; 0x35
    1840:	7e a9       	ldd	r23, Y+54	; 0x36
    1842:	8f a9       	ldd	r24, Y+55	; 0x37
    1844:	98 ad       	ldd	r25, Y+56	; 0x38
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e2       	ldi	r20, 0x20	; 32
    184c:	51 e4       	ldi	r21, 0x41	; 65
    184e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	bc 01       	movw	r22, r24
    1858:	cd 01       	movw	r24, r26
    185a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	98 ab       	std	Y+48, r25	; 0x30
    1864:	8f a7       	std	Y+47, r24	; 0x2f
    1866:	0f c0       	rjmp	.+30     	; 0x1886 <main+0x474>
    1868:	88 ec       	ldi	r24, 0xC8	; 200
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9e a7       	std	Y+46, r25	; 0x2e
    186e:	8d a7       	std	Y+45, r24	; 0x2d
    1870:	8d a5       	ldd	r24, Y+45	; 0x2d
    1872:	9e a5       	ldd	r25, Y+46	; 0x2e
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <main+0x462>
    1878:	9e a7       	std	Y+46, r25	; 0x2e
    187a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187c:	8f a5       	ldd	r24, Y+47	; 0x2f
    187e:	98 a9       	ldd	r25, Y+48	; 0x30
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	98 ab       	std	Y+48, r25	; 0x30
    1884:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1886:	8f a5       	ldd	r24, Y+47	; 0x2f
    1888:	98 a9       	ldd	r25, Y+48	; 0x30
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	69 f7       	brne	.-38     	; 0x1868 <main+0x456>
    188e:	14 c0       	rjmp	.+40     	; 0x18b8 <main+0x4a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1890:	69 a9       	ldd	r22, Y+49	; 0x31
    1892:	7a a9       	ldd	r23, Y+50	; 0x32
    1894:	8b a9       	ldd	r24, Y+51	; 0x33
    1896:	9c a9       	ldd	r25, Y+52	; 0x34
    1898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	98 ab       	std	Y+48, r25	; 0x30
    18a2:	8f a7       	std	Y+47, r24	; 0x2f
    18a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    18a6:	98 a9       	ldd	r25, Y+48	; 0x30
    18a8:	9c a7       	std	Y+44, r25	; 0x2c
    18aa:	8b a7       	std	Y+43, r24	; 0x2b
    18ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    18ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <main+0x49e>
    18b4:	9c a7       	std	Y+44, r25	; 0x2c
    18b6:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(500);
				rotate_motor();//open door
    18b8:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <rotate_motor>
    18bc:	c8 ce       	rjmp	.-624    	; 0x164e <main+0x23c>
			}

			else
			{
				//if 2 passwords unmatched
				UART_sendByte(0);
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	0e 94 a1 12 	call	0x2542	; 0x2542 <UART_sendByte>
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	aa ef       	ldi	r26, 0xFA	; 250
    18ca:	b3 e4       	ldi	r27, 0x43	; 67
    18cc:	8f a3       	std	Y+39, r24	; 0x27
    18ce:	98 a7       	std	Y+40, r25	; 0x28
    18d0:	a9 a7       	std	Y+41, r26	; 0x29
    18d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d4:	6f a1       	ldd	r22, Y+39	; 0x27
    18d6:	78 a5       	ldd	r23, Y+40	; 0x28
    18d8:	89 a5       	ldd	r24, Y+41	; 0x29
    18da:	9a a5       	ldd	r25, Y+42	; 0x2a
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	4a ef       	ldi	r20, 0xFA	; 250
    18e2:	54 e4       	ldi	r21, 0x44	; 68
    18e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	8b a3       	std	Y+35, r24	; 0x23
    18ee:	9c a3       	std	Y+36, r25	; 0x24
    18f0:	ad a3       	std	Y+37, r26	; 0x25
    18f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18f4:	6b a1       	ldd	r22, Y+35	; 0x23
    18f6:	7c a1       	ldd	r23, Y+36	; 0x24
    18f8:	8d a1       	ldd	r24, Y+37	; 0x25
    18fa:	9e a1       	ldd	r25, Y+38	; 0x26
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e8       	ldi	r20, 0x80	; 128
    1902:	5f e3       	ldi	r21, 0x3F	; 63
    1904:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1908:	88 23       	and	r24, r24
    190a:	2c f4       	brge	.+10     	; 0x1916 <main+0x504>
		__ticks = 1;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	9a a3       	std	Y+34, r25	; 0x22
    1912:	89 a3       	std	Y+33, r24	; 0x21
    1914:	3f c0       	rjmp	.+126    	; 0x1994 <main+0x582>
	else if (__tmp > 65535)
    1916:	6b a1       	ldd	r22, Y+35	; 0x23
    1918:	7c a1       	ldd	r23, Y+36	; 0x24
    191a:	8d a1       	ldd	r24, Y+37	; 0x25
    191c:	9e a1       	ldd	r25, Y+38	; 0x26
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	3f ef       	ldi	r19, 0xFF	; 255
    1922:	4f e7       	ldi	r20, 0x7F	; 127
    1924:	57 e4       	ldi	r21, 0x47	; 71
    1926:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    192a:	18 16       	cp	r1, r24
    192c:	4c f5       	brge	.+82     	; 0x1980 <main+0x56e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192e:	6f a1       	ldd	r22, Y+39	; 0x27
    1930:	78 a5       	ldd	r23, Y+40	; 0x28
    1932:	89 a5       	ldd	r24, Y+41	; 0x29
    1934:	9a a5       	ldd	r25, Y+42	; 0x2a
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e2       	ldi	r20, 0x20	; 32
    193c:	51 e4       	ldi	r21, 0x41	; 65
    193e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	bc 01       	movw	r22, r24
    1948:	cd 01       	movw	r24, r26
    194a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	9a a3       	std	Y+34, r25	; 0x22
    1954:	89 a3       	std	Y+33, r24	; 0x21
    1956:	0f c0       	rjmp	.+30     	; 0x1976 <main+0x564>
    1958:	88 ec       	ldi	r24, 0xC8	; 200
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	98 a3       	std	Y+32, r25	; 0x20
    195e:	8f 8f       	std	Y+31, r24	; 0x1f
    1960:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1962:	98 a1       	ldd	r25, Y+32	; 0x20
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	f1 f7       	brne	.-4      	; 0x1964 <main+0x552>
    1968:	98 a3       	std	Y+32, r25	; 0x20
    196a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196c:	89 a1       	ldd	r24, Y+33	; 0x21
    196e:	9a a1       	ldd	r25, Y+34	; 0x22
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	9a a3       	std	Y+34, r25	; 0x22
    1974:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1976:	89 a1       	ldd	r24, Y+33	; 0x21
    1978:	9a a1       	ldd	r25, Y+34	; 0x22
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	69 f7       	brne	.-38     	; 0x1958 <main+0x546>
    197e:	14 c0       	rjmp	.+40     	; 0x19a8 <main+0x596>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1980:	6b a1       	ldd	r22, Y+35	; 0x23
    1982:	7c a1       	ldd	r23, Y+36	; 0x24
    1984:	8d a1       	ldd	r24, Y+37	; 0x25
    1986:	9e a1       	ldd	r25, Y+38	; 0x26
    1988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	9a a3       	std	Y+34, r25	; 0x22
    1992:	89 a3       	std	Y+33, r24	; 0x21
    1994:	89 a1       	ldd	r24, Y+33	; 0x21
    1996:	9a a1       	ldd	r25, Y+34	; 0x22
    1998:	9e 8f       	std	Y+30, r25	; 0x1e
    199a:	8d 8f       	std	Y+29, r24	; 0x1d
    199c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    199e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <main+0x58e>
    19a4:	9e 8f       	std	Y+30, r25	; 0x1e
    19a6:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
				falsecounter++;
    19a8:	80 91 7c 00 	lds	r24, 0x007C
    19ac:	8f 5f       	subi	r24, 0xFF	; 255
    19ae:	80 93 7c 00 	sts	0x007C, r24
				UART_sendByte(falsecounter);//send the counter to HMI
    19b2:	80 91 7c 00 	lds	r24, 0x007C
    19b6:	0e 94 a1 12 	call	0x2542	; 0x2542 <UART_sendByte>
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	aa ef       	ldi	r26, 0xFA	; 250
    19c0:	b3 e4       	ldi	r27, 0x43	; 67
    19c2:	89 8f       	std	Y+25, r24	; 0x19
    19c4:	9a 8f       	std	Y+26, r25	; 0x1a
    19c6:	ab 8f       	std	Y+27, r26	; 0x1b
    19c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ca:	69 8d       	ldd	r22, Y+25	; 0x19
    19cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	4a ef       	ldi	r20, 0xFA	; 250
    19d8:	54 e4       	ldi	r21, 0x44	; 68
    19da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	8d 8b       	std	Y+21, r24	; 0x15
    19e4:	9e 8b       	std	Y+22, r25	; 0x16
    19e6:	af 8b       	std	Y+23, r26	; 0x17
    19e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19ea:	6d 89       	ldd	r22, Y+21	; 0x15
    19ec:	7e 89       	ldd	r23, Y+22	; 0x16
    19ee:	8f 89       	ldd	r24, Y+23	; 0x17
    19f0:	98 8d       	ldd	r25, Y+24	; 0x18
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e8       	ldi	r20, 0x80	; 128
    19f8:	5f e3       	ldi	r21, 0x3F	; 63
    19fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19fe:	88 23       	and	r24, r24
    1a00:	2c f4       	brge	.+10     	; 0x1a0c <main+0x5fa>
		__ticks = 1;
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	9c 8b       	std	Y+20, r25	; 0x14
    1a08:	8b 8b       	std	Y+19, r24	; 0x13
    1a0a:	3f c0       	rjmp	.+126    	; 0x1a8a <main+0x678>
	else if (__tmp > 65535)
    1a0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a10:	8f 89       	ldd	r24, Y+23	; 0x17
    1a12:	98 8d       	ldd	r25, Y+24	; 0x18
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	3f ef       	ldi	r19, 0xFF	; 255
    1a18:	4f e7       	ldi	r20, 0x7F	; 127
    1a1a:	57 e4       	ldi	r21, 0x47	; 71
    1a1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a20:	18 16       	cp	r1, r24
    1a22:	4c f5       	brge	.+82     	; 0x1a76 <main+0x664>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a24:	69 8d       	ldd	r22, Y+25	; 0x19
    1a26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	40 e2       	ldi	r20, 0x20	; 32
    1a32:	51 e4       	ldi	r21, 0x41	; 65
    1a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	bc 01       	movw	r22, r24
    1a3e:	cd 01       	movw	r24, r26
    1a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	9c 8b       	std	Y+20, r25	; 0x14
    1a4a:	8b 8b       	std	Y+19, r24	; 0x13
    1a4c:	0f c0       	rjmp	.+30     	; 0x1a6c <main+0x65a>
    1a4e:	88 ec       	ldi	r24, 0xC8	; 200
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	9a 8b       	std	Y+18, r25	; 0x12
    1a54:	89 8b       	std	Y+17, r24	; 0x11
    1a56:	89 89       	ldd	r24, Y+17	; 0x11
    1a58:	9a 89       	ldd	r25, Y+18	; 0x12
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <main+0x648>
    1a5e:	9a 8b       	std	Y+18, r25	; 0x12
    1a60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a62:	8b 89       	ldd	r24, Y+19	; 0x13
    1a64:	9c 89       	ldd	r25, Y+20	; 0x14
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	9c 8b       	std	Y+20, r25	; 0x14
    1a6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	69 f7       	brne	.-38     	; 0x1a4e <main+0x63c>
    1a74:	14 c0       	rjmp	.+40     	; 0x1a9e <main+0x68c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a76:	6d 89       	ldd	r22, Y+21	; 0x15
    1a78:	7e 89       	ldd	r23, Y+22	; 0x16
    1a7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	9c 8b       	std	Y+20, r25	; 0x14
    1a88:	8b 8b       	std	Y+19, r24	; 0x13
    1a8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8e:	98 8b       	std	Y+16, r25	; 0x10
    1a90:	8f 87       	std	Y+15, r24	; 0x0f
    1a92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a94:	98 89       	ldd	r25, Y+16	; 0x10
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <main+0x684>
    1a9a:	98 8b       	std	Y+16, r25	; 0x10
    1a9c:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(500);
				if (falsecounter >= 3)
    1a9e:	80 91 7c 00 	lds	r24, 0x007C
    1aa2:	83 30       	cpi	r24, 0x03	; 3
    1aa4:	08 f4       	brcc	.+2      	; 0x1aa8 <main+0x696>
    1aa6:	d3 cd       	rjmp	.-1114   	; 0x164e <main+0x23c>
				{
					//If the two passwords are not matched for the third consecutive time,
					falsecounter=0;
    1aa8:	10 92 7c 00 	sts	0x007C, r1
					unmatched_pass();//buzzer on
    1aac:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <unmatched_pass>
    1ab0:	ce cd       	rjmp	.-1124   	; 0x164e <main+0x23c>
				}
			}
		}
		//option 2
		else if(command=='-'){
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	eb 5a       	subi	r30, 0xAB	; 171
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	80 81       	ld	r24, Z
    1aba:	8d 32       	cpi	r24, 0x2D	; 45
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <main+0x6ae>
    1abe:	c7 cd       	rjmp	.-1138   	; 0x164e <main+0x23c>

			recive_pass(num1);//receive the pass from HMI
    1ac0:	ce 01       	movw	r24, r28
    1ac2:	89 5a       	subi	r24, 0xA9	; 169
    1ac4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac6:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <recive_pass>
			verifed = 0;
    1aca:	fe 01       	movw	r30, r28
    1acc:	ea 5a       	subi	r30, 0xAA	; 170
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	10 82       	st	Z, r1
			verifed=check_numbers(num1,pass);//compare it with saved
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	89 5a       	subi	r24, 0xA9	; 169
    1ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad8:	9e 01       	movw	r18, r28
    1ada:	2f 59       	subi	r18, 0x9F	; 159
    1adc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ade:	b9 01       	movw	r22, r18
    1ae0:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <check_numbers>
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	ea 5a       	subi	r30, 0xAA	; 170
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	80 83       	st	Z, r24
			UART_sendByte(verifed);
    1aec:	fe 01       	movw	r30, r28
    1aee:	ea 5a       	subi	r30, 0xAA	; 170
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	80 81       	ld	r24, Z
    1af4:	0e 94 a1 12 	call	0x2542	; 0x2542 <UART_sendByte>
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	aa ef       	ldi	r26, 0xFA	; 250
    1afe:	b3 e4       	ldi	r27, 0x43	; 67
    1b00:	8b 87       	std	Y+11, r24	; 0x0b
    1b02:	9c 87       	std	Y+12, r25	; 0x0c
    1b04:	ad 87       	std	Y+13, r26	; 0x0d
    1b06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	4a ef       	ldi	r20, 0xFA	; 250
    1b16:	54 e4       	ldi	r21, 0x44	; 68
    1b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	8f 83       	std	Y+7, r24	; 0x07
    1b22:	98 87       	std	Y+8, r25	; 0x08
    1b24:	a9 87       	std	Y+9, r26	; 0x09
    1b26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b28:	6f 81       	ldd	r22, Y+7	; 0x07
    1b2a:	78 85       	ldd	r23, Y+8	; 0x08
    1b2c:	89 85       	ldd	r24, Y+9	; 0x09
    1b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e8       	ldi	r20, 0x80	; 128
    1b36:	5f e3       	ldi	r21, 0x3F	; 63
    1b38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b3c:	88 23       	and	r24, r24
    1b3e:	2c f4       	brge	.+10     	; 0x1b4a <main+0x738>
		__ticks = 1;
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	9e 83       	std	Y+6, r25	; 0x06
    1b46:	8d 83       	std	Y+5, r24	; 0x05
    1b48:	3f c0       	rjmp	.+126    	; 0x1bc8 <main+0x7b6>
	else if (__tmp > 65535)
    1b4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4c:	78 85       	ldd	r23, Y+8	; 0x08
    1b4e:	89 85       	ldd	r24, Y+9	; 0x09
    1b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	3f ef       	ldi	r19, 0xFF	; 255
    1b56:	4f e7       	ldi	r20, 0x7F	; 127
    1b58:	57 e4       	ldi	r21, 0x47	; 71
    1b5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b5e:	18 16       	cp	r1, r24
    1b60:	4c f5       	brge	.+82     	; 0x1bb4 <main+0x7a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e2       	ldi	r20, 0x20	; 32
    1b70:	51 e4       	ldi	r21, 0x41	; 65
    1b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	bc 01       	movw	r22, r24
    1b7c:	cd 01       	movw	r24, r26
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	9e 83       	std	Y+6, r25	; 0x06
    1b88:	8d 83       	std	Y+5, r24	; 0x05
    1b8a:	0f c0       	rjmp	.+30     	; 0x1baa <main+0x798>
    1b8c:	88 ec       	ldi	r24, 0xC8	; 200
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	9c 83       	std	Y+4, r25	; 0x04
    1b92:	8b 83       	std	Y+3, r24	; 0x03
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	9c 81       	ldd	r25, Y+4	; 0x04
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <main+0x786>
    1b9c:	9c 83       	std	Y+4, r25	; 0x04
    1b9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	9e 83       	std	Y+6, r25	; 0x06
    1ba8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1baa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bac:	9e 81       	ldd	r25, Y+6	; 0x06
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	69 f7       	brne	.-38     	; 0x1b8c <main+0x77a>
    1bb2:	14 c0       	rjmp	.+40     	; 0x1bdc <main+0x7ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb6:	78 85       	ldd	r23, Y+8	; 0x08
    1bb8:	89 85       	ldd	r24, Y+9	; 0x09
    1bba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	9e 83       	std	Y+6, r25	; 0x06
    1bc6:	8d 83       	std	Y+5, r24	; 0x05
    1bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bca:	9e 81       	ldd	r25, Y+6	; 0x06
    1bcc:	9a 83       	std	Y+2, r25	; 0x02
    1bce:	89 83       	std	Y+1, r24	; 0x01
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <main+0x7c2>
    1bd8:	9a 83       	std	Y+2, r25	; 0x02
    1bda:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			if(verifed)
    1bdc:	fe 01       	movw	r30, r28
    1bde:	ea 5a       	subi	r30, 0xAA	; 170
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	80 81       	ld	r24, Z
    1be4:	88 23       	and	r24, r24
    1be6:	61 f1       	breq	.+88     	; 0x1c40 <main+0x82e>
			{
				//change password
				falsecounter=0;
    1be8:	10 92 7c 00 	sts	0x007C, r1
				recive_pass(num1);//take 1st pass
    1bec:	ce 01       	movw	r24, r28
    1bee:	89 5a       	subi	r24, 0xA9	; 169
    1bf0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf2:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <recive_pass>
				recive_pass(num2);//take 2nd pass
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	84 5a       	subi	r24, 0xA4	; 164
    1bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfc:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <recive_pass>
				verifed=check_numbers(num1,num2);//check password matched
    1c00:	ce 01       	movw	r24, r28
    1c02:	89 5a       	subi	r24, 0xA9	; 169
    1c04:	9f 4f       	sbci	r25, 0xFF	; 255
    1c06:	9e 01       	movw	r18, r28
    1c08:	24 5a       	subi	r18, 0xA4	; 164
    1c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0c:	b9 01       	movw	r22, r18
    1c0e:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <check_numbers>
    1c12:	fe 01       	movw	r30, r28
    1c14:	ea 5a       	subi	r30, 0xAA	; 170
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	80 83       	st	Z, r24
				UART_sendByte(verifed);
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	ea 5a       	subi	r30, 0xAA	; 170
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	80 81       	ld	r24, Z
    1c22:	0e 94 a1 12 	call	0x2542	; 0x2542 <UART_sendByte>

				if(verifed)
    1c26:	fe 01       	movw	r30, r28
    1c28:	ea 5a       	subi	r30, 0xAA	; 170
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	80 81       	ld	r24, Z
    1c2e:	88 23       	and	r24, r24
    1c30:	09 f4       	brne	.+2      	; 0x1c34 <main+0x822>
    1c32:	0d cd       	rjmp	.-1510   	; 0x164e <main+0x23c>
				{
					//if matched save it to eeprom
					store_eeprom(num1);
    1c34:	ce 01       	movw	r24, r28
    1c36:	89 5a       	subi	r24, 0xA9	; 169
    1c38:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3a:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <store_eeprom>
    1c3e:	07 cd       	rjmp	.-1522   	; 0x164e <main+0x23c>
				}
			}
			else
			{
				//if the 2 passwords unmatched
				falsecounter++;
    1c40:	80 91 7c 00 	lds	r24, 0x007C
    1c44:	8f 5f       	subi	r24, 0xFF	; 255
    1c46:	80 93 7c 00 	sts	0x007C, r24
				UART_sendByte(falsecounter);//send the counter to HMI
    1c4a:	80 91 7c 00 	lds	r24, 0x007C
    1c4e:	0e 94 a1 12 	call	0x2542	; 0x2542 <UART_sendByte>
				if (falsecounter >= 3)
    1c52:	80 91 7c 00 	lds	r24, 0x007C
    1c56:	83 30       	cpi	r24, 0x03	; 3
    1c58:	08 f4       	brcc	.+2      	; 0x1c5c <main+0x84a>
    1c5a:	f9 cc       	rjmp	.-1550   	; 0x164e <main+0x23c>
				{
					unmatched_pass();//buzzer on
    1c5c:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <unmatched_pass>
					falsecounter=0;
    1c60:	10 92 7c 00 	sts	0x007C, r1
    1c64:	f4 cc       	rjmp	.-1560   	; 0x164e <main+0x23c>

00001c66 <recive_pass>:




void recive_pass(uint8 *num)
{
    1c66:	0f 93       	push	r16
    1c68:	1f 93       	push	r17
    1c6a:	df 93       	push	r29
    1c6c:	cf 93       	push	r28
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	61 97       	sbiw	r28, 0x11	; 17
    1c74:	0f b6       	in	r0, 0x3f	; 63
    1c76:	f8 94       	cli
    1c78:	de bf       	out	0x3e, r29	; 62
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	cd bf       	out	0x3d, r28	; 61
    1c7e:	99 8b       	std	Y+17, r25	; 0x11
    1c80:	88 8b       	std	Y+16, r24	; 0x10
	//recive the password by UART
	uint8 i=0;
    1c82:	1f 86       	std	Y+15, r1	; 0x0f

	for (i=0 ; i<5 ; i++)
    1c84:	1f 86       	std	Y+15, r1	; 0x0f
    1c86:	0f c0       	rjmp	.+30     	; 0x1ca6 <recive_pass+0x40>
	{
		num[i]=UART_recieveByte();
    1c88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	88 89       	ldd	r24, Y+16	; 0x10
    1c90:	99 89       	ldd	r25, Y+17	; 0x11
    1c92:	8c 01       	movw	r16, r24
    1c94:	02 0f       	add	r16, r18
    1c96:	13 1f       	adc	r17, r19
    1c98:	0e 94 b8 12 	call	0x2570	; 0x2570 <UART_recieveByte>
    1c9c:	f8 01       	movw	r30, r16
    1c9e:	80 83       	st	Z, r24
void recive_pass(uint8 *num)
{
	//recive the password by UART
	uint8 i=0;

	for (i=0 ; i<5 ; i++)
    1ca0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca2:	8f 5f       	subi	r24, 0xFF	; 255
    1ca4:	8f 87       	std	Y+15, r24	; 0x0f
    1ca6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ca8:	85 30       	cpi	r24, 0x05	; 5
    1caa:	70 f3       	brcs	.-36     	; 0x1c88 <recive_pass+0x22>
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	a8 e4       	ldi	r26, 0x48	; 72
    1cb2:	b3 e4       	ldi	r27, 0x43	; 67
    1cb4:	8b 87       	std	Y+11, r24	; 0x0b
    1cb6:	9c 87       	std	Y+12, r25	; 0x0c
    1cb8:	ad 87       	std	Y+13, r26	; 0x0d
    1cba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cbc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	4a ef       	ldi	r20, 0xFA	; 250
    1cca:	54 e4       	ldi	r21, 0x44	; 68
    1ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	8f 83       	std	Y+7, r24	; 0x07
    1cd6:	98 87       	std	Y+8, r25	; 0x08
    1cd8:	a9 87       	std	Y+9, r26	; 0x09
    1cda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cdc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cde:	78 85       	ldd	r23, Y+8	; 0x08
    1ce0:	89 85       	ldd	r24, Y+9	; 0x09
    1ce2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e8       	ldi	r20, 0x80	; 128
    1cea:	5f e3       	ldi	r21, 0x3F	; 63
    1cec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cf0:	88 23       	and	r24, r24
    1cf2:	2c f4       	brge	.+10     	; 0x1cfe <recive_pass+0x98>
		__ticks = 1;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	9e 83       	std	Y+6, r25	; 0x06
    1cfa:	8d 83       	std	Y+5, r24	; 0x05
    1cfc:	3f c0       	rjmp	.+126    	; 0x1d7c <recive_pass+0x116>
	else if (__tmp > 65535)
    1cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1d00:	78 85       	ldd	r23, Y+8	; 0x08
    1d02:	89 85       	ldd	r24, Y+9	; 0x09
    1d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	3f ef       	ldi	r19, 0xFF	; 255
    1d0a:	4f e7       	ldi	r20, 0x7F	; 127
    1d0c:	57 e4       	ldi	r21, 0x47	; 71
    1d0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d12:	18 16       	cp	r1, r24
    1d14:	4c f5       	brge	.+82     	; 0x1d68 <recive_pass+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e2       	ldi	r20, 0x20	; 32
    1d24:	51 e4       	ldi	r21, 0x41	; 65
    1d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	bc 01       	movw	r22, r24
    1d30:	cd 01       	movw	r24, r26
    1d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	0f c0       	rjmp	.+30     	; 0x1d5e <recive_pass+0xf8>
    1d40:	88 ec       	ldi	r24, 0xC8	; 200
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	9c 83       	std	Y+4, r25	; 0x04
    1d46:	8b 83       	std	Y+3, r24	; 0x03
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <recive_pass+0xe6>
    1d50:	9c 83       	std	Y+4, r25	; 0x04
    1d52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d54:	8d 81       	ldd	r24, Y+5	; 0x05
    1d56:	9e 81       	ldd	r25, Y+6	; 0x06
    1d58:	01 97       	sbiw	r24, 0x01	; 1
    1d5a:	9e 83       	std	Y+6, r25	; 0x06
    1d5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	69 f7       	brne	.-38     	; 0x1d40 <recive_pass+0xda>
    1d66:	14 c0       	rjmp	.+40     	; 0x1d90 <recive_pass+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d68:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6a:	78 85       	ldd	r23, Y+8	; 0x08
    1d6c:	89 85       	ldd	r24, Y+9	; 0x09
    1d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	9e 83       	std	Y+6, r25	; 0x06
    1d7a:	8d 83       	std	Y+5, r24	; 0x05
    1d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d80:	9a 83       	std	Y+2, r25	; 0x02
    1d82:	89 83       	std	Y+1, r24	; 0x01
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	9a 81       	ldd	r25, Y+2	; 0x02
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <recive_pass+0x122>
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	89 83       	std	Y+1, r24	; 0x01
	{
		num[i]=UART_recieveByte();

	}
	_delay_ms(200);
}
    1d90:	61 96       	adiw	r28, 0x11	; 17
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	1f 91       	pop	r17
    1da2:	0f 91       	pop	r16
    1da4:	08 95       	ret

00001da6 <check_numbers>:
uint8 check_numbers(uint8 *array1,uint8 *array2)
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <check_numbers+0x6>
    1dac:	00 d0       	rcall	.+0      	; 0x1dae <check_numbers+0x8>
    1dae:	00 d0       	rcall	.+0      	; 0x1db0 <check_numbers+0xa>
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	9b 83       	std	Y+3, r25	; 0x03
    1db6:	8a 83       	std	Y+2, r24	; 0x02
    1db8:	7d 83       	std	Y+5, r23	; 0x05
    1dba:	6c 83       	std	Y+4, r22	; 0x04
	//check if the 2 passwords are the same
	uint8 i=0;
    1dbc:	19 82       	std	Y+1, r1	; 0x01
	for (i=0 ; i<5 ; i++)
    1dbe:	19 82       	std	Y+1, r1	; 0x01
    1dc0:	19 c0       	rjmp	.+50     	; 0x1df4 <check_numbers+0x4e>
	{
		if (array1[i] != array2[i])
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	9b 81       	ldd	r25, Y+3	; 0x03
    1dcc:	fc 01       	movw	r30, r24
    1dce:	e2 0f       	add	r30, r18
    1dd0:	f3 1f       	adc	r31, r19
    1dd2:	40 81       	ld	r20, Z
    1dd4:	89 81       	ldd	r24, Y+1	; 0x01
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	8c 81       	ldd	r24, Y+4	; 0x04
    1ddc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dde:	fc 01       	movw	r30, r24
    1de0:	e2 0f       	add	r30, r18
    1de2:	f3 1f       	adc	r31, r19
    1de4:	80 81       	ld	r24, Z
    1de6:	48 17       	cp	r20, r24
    1de8:	11 f0       	breq	.+4      	; 0x1dee <check_numbers+0x48>
		{
			return 0;
    1dea:	1e 82       	std	Y+6, r1	; 0x06
    1dec:	08 c0       	rjmp	.+16     	; 0x1dfe <check_numbers+0x58>
}
uint8 check_numbers(uint8 *array1,uint8 *array2)
{
	//check if the 2 passwords are the same
	uint8 i=0;
	for (i=0 ; i<5 ; i++)
    1dee:	89 81       	ldd	r24, Y+1	; 0x01
    1df0:	8f 5f       	subi	r24, 0xFF	; 255
    1df2:	89 83       	std	Y+1, r24	; 0x01
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	85 30       	cpi	r24, 0x05	; 5
    1df8:	20 f3       	brcs	.-56     	; 0x1dc2 <check_numbers+0x1c>
		if (array1[i] != array2[i])
		{
			return 0;
		}
	}
	return 1;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	8e 83       	std	Y+6, r24	; 0x06
    1dfe:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1e00:	26 96       	adiw	r28, 0x06	; 6
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	cd bf       	out	0x3d, r28	; 61
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	08 95       	ret

00001e12 <rotate_motor>:


void rotate_motor(void)
{
    1e12:	df 93       	push	r29
    1e14:	cf 93       	push	r28
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
	//open the door
	Timer1_init(&timer1_Configurations_CTC);//timer on
    1e1a:	81 e7       	ldi	r24, 0x71	; 113
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	0e 94 0a 11 	call	0x2214	; 0x2214 <Timer1_init>
	DcMotor_Rotate(CW, SPEED_FULL );
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	6e ef       	ldi	r22, 0xFE	; 254
    1e26:	0e 94 be 05 	call	0xb7c	; 0xb7c <DcMotor_Rotate>
	while(count1<15);
    1e2a:	80 91 7a 00 	lds	r24, 0x007A
    1e2e:	90 91 7b 00 	lds	r25, 0x007B
    1e32:	8f 30       	cpi	r24, 0x0F	; 15
    1e34:	91 05       	cpc	r25, r1
    1e36:	c8 f3       	brcs	.-14     	; 0x1e2a <rotate_motor+0x18>
	count1=0;
    1e38:	10 92 7b 00 	sts	0x007B, r1
    1e3c:	10 92 7a 00 	sts	0x007A, r1
	DcMotor_Rotate(STOP,SPEED_OFF);
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	60 e0       	ldi	r22, 0x00	; 0
    1e44:	0e 94 be 05 	call	0xb7c	; 0xb7c <DcMotor_Rotate>
	while(count1<3);
    1e48:	80 91 7a 00 	lds	r24, 0x007A
    1e4c:	90 91 7b 00 	lds	r25, 0x007B
    1e50:	83 30       	cpi	r24, 0x03	; 3
    1e52:	91 05       	cpc	r25, r1
    1e54:	c8 f3       	brcs	.-14     	; 0x1e48 <rotate_motor+0x36>
	count1=0;
    1e56:	10 92 7b 00 	sts	0x007B, r1
    1e5a:	10 92 7a 00 	sts	0x007A, r1
	DcMotor_Rotate(A_CW, SPEED_FULL );
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	6e ef       	ldi	r22, 0xFE	; 254
    1e62:	0e 94 be 05 	call	0xb7c	; 0xb7c <DcMotor_Rotate>
	while(count1<15);
    1e66:	80 91 7a 00 	lds	r24, 0x007A
    1e6a:	90 91 7b 00 	lds	r25, 0x007B
    1e6e:	8f 30       	cpi	r24, 0x0F	; 15
    1e70:	91 05       	cpc	r25, r1
    1e72:	c8 f3       	brcs	.-14     	; 0x1e66 <rotate_motor+0x54>
	count1=0;
    1e74:	10 92 7b 00 	sts	0x007B, r1
    1e78:	10 92 7a 00 	sts	0x007A, r1
	DcMotor_Rotate(STOP,SPEED_OFF);
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	60 e0       	ldi	r22, 0x00	; 0
    1e80:	0e 94 be 05 	call	0xb7c	; 0xb7c <DcMotor_Rotate>
	Timer1_deInit();
    1e84:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <Timer1_deInit>
}
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <unmatched_pass>:


void unmatched_pass(void)
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	cd b7       	in	r28, 0x3d	; 61
    1e94:	de b7       	in	r29, 0x3e	; 62
	Timer1_init(&timer1_Configurations_CTC);//timer on
    1e96:	81 e7       	ldi	r24, 0x71	; 113
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	0e 94 0a 11 	call	0x2214	; 0x2214 <Timer1_init>
	Buzzer_on();
    1e9e:	0e 94 07 06 	call	0xc0e	; 0xc0e <Buzzer_on>
	while (count1 <60);
    1ea2:	80 91 7a 00 	lds	r24, 0x007A
    1ea6:	90 91 7b 00 	lds	r25, 0x007B
    1eaa:	8c 33       	cpi	r24, 0x3C	; 60
    1eac:	91 05       	cpc	r25, r1
    1eae:	c8 f3       	brcs	.-14     	; 0x1ea2 <unmatched_pass+0x14>
	Buzzer_off();
    1eb0:	0e 94 13 06 	call	0xc26	; 0xc26 <Buzzer_off>
	count1=0;
    1eb4:	10 92 7b 00 	sts	0x007B, r1
    1eb8:	10 92 7a 00 	sts	0x007A, r1
	Timer1_deInit();//timer off
    1ebc:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <Timer1_deInit>
}
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <timer_count_CTC>:


void timer_count_CTC(void)
{
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
	count1++;
    1ece:	80 91 7a 00 	lds	r24, 0x007A
    1ed2:	90 91 7b 00 	lds	r25, 0x007B
    1ed6:	01 96       	adiw	r24, 0x01	; 1
    1ed8:	90 93 7b 00 	sts	0x007B, r25
    1edc:	80 93 7a 00 	sts	0x007A, r24
}
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	08 95       	ret

00001ee6 <store_eeprom>:

void store_eeprom (uint8 *arr)
{
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	62 97       	sbiw	r28, 0x12	; 18
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	de bf       	out	0x3e, r29	; 62
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	cd bf       	out	0x3d, r28	; 61
    1efa:	9a 8b       	std	Y+18, r25	; 0x12
    1efc:	89 8b       	std	Y+17, r24	; 0x11
	for(int j=0;j<5;j++)
    1efe:	18 8a       	std	Y+16, r1	; 0x10
    1f00:	1f 86       	std	Y+15, r1	; 0x0f
    1f02:	88 c0       	rjmp	.+272    	; 0x2014 <store_eeprom+0x12e>
	{
		EEPROM_writeByte(0X0211 + j,arr[j]);
    1f04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f06:	98 89       	ldd	r25, Y+16	; 0x10
    1f08:	8f 5e       	subi	r24, 0xEF	; 239
    1f0a:	9d 4f       	sbci	r25, 0xFD	; 253
    1f0c:	ac 01       	movw	r20, r24
    1f0e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1f10:	38 89       	ldd	r19, Y+16	; 0x10
    1f12:	89 89       	ldd	r24, Y+17	; 0x11
    1f14:	9a 89       	ldd	r25, Y+18	; 0x12
    1f16:	fc 01       	movw	r30, r24
    1f18:	e2 0f       	add	r30, r18
    1f1a:	f3 1f       	adc	r31, r19
    1f1c:	20 81       	ld	r18, Z
    1f1e:	ca 01       	movw	r24, r20
    1f20:	62 2f       	mov	r22, r18
    1f22:	0e 94 1f 06 	call	0xc3e	; 0xc3e <EEPROM_writeByte>
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	a8 ec       	ldi	r26, 0xC8	; 200
    1f2c:	b2 e4       	ldi	r27, 0x42	; 66
    1f2e:	8b 87       	std	Y+11, r24	; 0x0b
    1f30:	9c 87       	std	Y+12, r25	; 0x0c
    1f32:	ad 87       	std	Y+13, r26	; 0x0d
    1f34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	4a ef       	ldi	r20, 0xFA	; 250
    1f44:	54 e4       	ldi	r21, 0x44	; 68
    1f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	8f 83       	std	Y+7, r24	; 0x07
    1f50:	98 87       	std	Y+8, r25	; 0x08
    1f52:	a9 87       	std	Y+9, r26	; 0x09
    1f54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f56:	6f 81       	ldd	r22, Y+7	; 0x07
    1f58:	78 85       	ldd	r23, Y+8	; 0x08
    1f5a:	89 85       	ldd	r24, Y+9	; 0x09
    1f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e8       	ldi	r20, 0x80	; 128
    1f64:	5f e3       	ldi	r21, 0x3F	; 63
    1f66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f6a:	88 23       	and	r24, r24
    1f6c:	2c f4       	brge	.+10     	; 0x1f78 <store_eeprom+0x92>
		__ticks = 1;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	9e 83       	std	Y+6, r25	; 0x06
    1f74:	8d 83       	std	Y+5, r24	; 0x05
    1f76:	3f c0       	rjmp	.+126    	; 0x1ff6 <store_eeprom+0x110>
	else if (__tmp > 65535)
    1f78:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7a:	78 85       	ldd	r23, Y+8	; 0x08
    1f7c:	89 85       	ldd	r24, Y+9	; 0x09
    1f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	3f ef       	ldi	r19, 0xFF	; 255
    1f84:	4f e7       	ldi	r20, 0x7F	; 127
    1f86:	57 e4       	ldi	r21, 0x47	; 71
    1f88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f8c:	18 16       	cp	r1, r24
    1f8e:	4c f5       	brge	.+82     	; 0x1fe2 <store_eeprom+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e2       	ldi	r20, 0x20	; 32
    1f9e:	51 e4       	ldi	r21, 0x41	; 65
    1fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	bc 01       	movw	r22, r24
    1faa:	cd 01       	movw	r24, r26
    1fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	9e 83       	std	Y+6, r25	; 0x06
    1fb6:	8d 83       	std	Y+5, r24	; 0x05
    1fb8:	0f c0       	rjmp	.+30     	; 0x1fd8 <store_eeprom+0xf2>
    1fba:	88 ec       	ldi	r24, 0xC8	; 200
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	9c 83       	std	Y+4, r25	; 0x04
    1fc0:	8b 83       	std	Y+3, r24	; 0x03
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <store_eeprom+0xe0>
    1fca:	9c 83       	std	Y+4, r25	; 0x04
    1fcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fce:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	9e 83       	std	Y+6, r25	; 0x06
    1fd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fda:	9e 81       	ldd	r25, Y+6	; 0x06
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	69 f7       	brne	.-38     	; 0x1fba <store_eeprom+0xd4>
    1fe0:	14 c0       	rjmp	.+40     	; 0x200a <store_eeprom+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe4:	78 85       	ldd	r23, Y+8	; 0x08
    1fe6:	89 85       	ldd	r24, Y+9	; 0x09
    1fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	9e 83       	std	Y+6, r25	; 0x06
    1ff4:	8d 83       	std	Y+5, r24	; 0x05
    1ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffa:	9a 83       	std	Y+2, r25	; 0x02
    1ffc:	89 83       	std	Y+1, r24	; 0x01
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	9a 81       	ldd	r25, Y+2	; 0x02
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <store_eeprom+0x11c>
    2006:	9a 83       	std	Y+2, r25	; 0x02
    2008:	89 83       	std	Y+1, r24	; 0x01
	count1++;
}

void store_eeprom (uint8 *arr)
{
	for(int j=0;j<5;j++)
    200a:	8f 85       	ldd	r24, Y+15	; 0x0f
    200c:	98 89       	ldd	r25, Y+16	; 0x10
    200e:	01 96       	adiw	r24, 0x01	; 1
    2010:	98 8b       	std	Y+16, r25	; 0x10
    2012:	8f 87       	std	Y+15, r24	; 0x0f
    2014:	8f 85       	ldd	r24, Y+15	; 0x0f
    2016:	98 89       	ldd	r25, Y+16	; 0x10
    2018:	85 30       	cpi	r24, 0x05	; 5
    201a:	91 05       	cpc	r25, r1
    201c:	0c f4       	brge	.+2      	; 0x2020 <store_eeprom+0x13a>
    201e:	72 cf       	rjmp	.-284    	; 0x1f04 <store_eeprom+0x1e>
	{
		EEPROM_writeByte(0X0211 + j,arr[j]);
		_delay_ms(100);
	}
}
    2020:	62 96       	adiw	r28, 0x12	; 18
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	de bf       	out	0x3e, r29	; 62
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	cd bf       	out	0x3d, r28	; 61
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	08 95       	ret

00002032 <read_eeprom>:


void read_eeprom(uint8 *arr)
{
    2032:	df 93       	push	r29
    2034:	cf 93       	push	r28
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	62 97       	sbiw	r28, 0x12	; 18
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	f8 94       	cli
    2040:	de bf       	out	0x3e, r29	; 62
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	cd bf       	out	0x3d, r28	; 61
    2046:	9a 8b       	std	Y+18, r25	; 0x12
    2048:	89 8b       	std	Y+17, r24	; 0x11
	for(int j=0;j<5;j++)
    204a:	18 8a       	std	Y+16, r1	; 0x10
    204c:	1f 86       	std	Y+15, r1	; 0x0f
    204e:	86 c0       	rjmp	.+268    	; 0x215c <read_eeprom+0x12a>
	{
		EEPROM_readByte(0x0211 + j, &arr[j]);
    2050:	8f 85       	ldd	r24, Y+15	; 0x0f
    2052:	98 89       	ldd	r25, Y+16	; 0x10
    2054:	8f 5e       	subi	r24, 0xEF	; 239
    2056:	9d 4f       	sbci	r25, 0xFD	; 253
    2058:	ac 01       	movw	r20, r24
    205a:	2f 85       	ldd	r18, Y+15	; 0x0f
    205c:	38 89       	ldd	r19, Y+16	; 0x10
    205e:	89 89       	ldd	r24, Y+17	; 0x11
    2060:	9a 89       	ldd	r25, Y+18	; 0x12
    2062:	28 0f       	add	r18, r24
    2064:	39 1f       	adc	r19, r25
    2066:	ca 01       	movw	r24, r20
    2068:	b9 01       	movw	r22, r18
    206a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <EEPROM_readByte>
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a8 ec       	ldi	r26, 0xC8	; 200
    2074:	b2 e4       	ldi	r27, 0x42	; 66
    2076:	8b 87       	std	Y+11, r24	; 0x0b
    2078:	9c 87       	std	Y+12, r25	; 0x0c
    207a:	ad 87       	std	Y+13, r26	; 0x0d
    207c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2080:	7c 85       	ldd	r23, Y+12	; 0x0c
    2082:	8d 85       	ldd	r24, Y+13	; 0x0d
    2084:	9e 85       	ldd	r25, Y+14	; 0x0e
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	4a ef       	ldi	r20, 0xFA	; 250
    208c:	54 e4       	ldi	r21, 0x44	; 68
    208e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	8f 83       	std	Y+7, r24	; 0x07
    2098:	98 87       	std	Y+8, r25	; 0x08
    209a:	a9 87       	std	Y+9, r26	; 0x09
    209c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    209e:	6f 81       	ldd	r22, Y+7	; 0x07
    20a0:	78 85       	ldd	r23, Y+8	; 0x08
    20a2:	89 85       	ldd	r24, Y+9	; 0x09
    20a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e8       	ldi	r20, 0x80	; 128
    20ac:	5f e3       	ldi	r21, 0x3F	; 63
    20ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b2:	88 23       	and	r24, r24
    20b4:	2c f4       	brge	.+10     	; 0x20c0 <read_eeprom+0x8e>
		__ticks = 1;
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	9e 83       	std	Y+6, r25	; 0x06
    20bc:	8d 83       	std	Y+5, r24	; 0x05
    20be:	3f c0       	rjmp	.+126    	; 0x213e <read_eeprom+0x10c>
	else if (__tmp > 65535)
    20c0:	6f 81       	ldd	r22, Y+7	; 0x07
    20c2:	78 85       	ldd	r23, Y+8	; 0x08
    20c4:	89 85       	ldd	r24, Y+9	; 0x09
    20c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	3f ef       	ldi	r19, 0xFF	; 255
    20cc:	4f e7       	ldi	r20, 0x7F	; 127
    20ce:	57 e4       	ldi	r21, 0x47	; 71
    20d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d4:	18 16       	cp	r1, r24
    20d6:	4c f5       	brge	.+82     	; 0x212a <read_eeprom+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    20da:	7c 85       	ldd	r23, Y+12	; 0x0c
    20dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    20de:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 e2       	ldi	r20, 0x20	; 32
    20e6:	51 e4       	ldi	r21, 0x41	; 65
    20e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	bc 01       	movw	r22, r24
    20f2:	cd 01       	movw	r24, r26
    20f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	9e 83       	std	Y+6, r25	; 0x06
    20fe:	8d 83       	std	Y+5, r24	; 0x05
    2100:	0f c0       	rjmp	.+30     	; 0x2120 <read_eeprom+0xee>
    2102:	88 ec       	ldi	r24, 0xC8	; 200
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	9c 83       	std	Y+4, r25	; 0x04
    2108:	8b 83       	std	Y+3, r24	; 0x03
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	9c 81       	ldd	r25, Y+4	; 0x04
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	f1 f7       	brne	.-4      	; 0x210e <read_eeprom+0xdc>
    2112:	9c 83       	std	Y+4, r25	; 0x04
    2114:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2116:	8d 81       	ldd	r24, Y+5	; 0x05
    2118:	9e 81       	ldd	r25, Y+6	; 0x06
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	9e 83       	std	Y+6, r25	; 0x06
    211e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2120:	8d 81       	ldd	r24, Y+5	; 0x05
    2122:	9e 81       	ldd	r25, Y+6	; 0x06
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	69 f7       	brne	.-38     	; 0x2102 <read_eeprom+0xd0>
    2128:	14 c0       	rjmp	.+40     	; 0x2152 <read_eeprom+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212a:	6f 81       	ldd	r22, Y+7	; 0x07
    212c:	78 85       	ldd	r23, Y+8	; 0x08
    212e:	89 85       	ldd	r24, Y+9	; 0x09
    2130:	9a 85       	ldd	r25, Y+10	; 0x0a
    2132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	9e 83       	std	Y+6, r25	; 0x06
    213c:	8d 83       	std	Y+5, r24	; 0x05
    213e:	8d 81       	ldd	r24, Y+5	; 0x05
    2140:	9e 81       	ldd	r25, Y+6	; 0x06
    2142:	9a 83       	std	Y+2, r25	; 0x02
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	9a 81       	ldd	r25, Y+2	; 0x02
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	f1 f7       	brne	.-4      	; 0x214a <read_eeprom+0x118>
    214e:	9a 83       	std	Y+2, r25	; 0x02
    2150:	89 83       	std	Y+1, r24	; 0x01
}


void read_eeprom(uint8 *arr)
{
	for(int j=0;j<5;j++)
    2152:	8f 85       	ldd	r24, Y+15	; 0x0f
    2154:	98 89       	ldd	r25, Y+16	; 0x10
    2156:	01 96       	adiw	r24, 0x01	; 1
    2158:	98 8b       	std	Y+16, r25	; 0x10
    215a:	8f 87       	std	Y+15, r24	; 0x0f
    215c:	8f 85       	ldd	r24, Y+15	; 0x0f
    215e:	98 89       	ldd	r25, Y+16	; 0x10
    2160:	85 30       	cpi	r24, 0x05	; 5
    2162:	91 05       	cpc	r25, r1
    2164:	0c f4       	brge	.+2      	; 0x2168 <read_eeprom+0x136>
    2166:	74 cf       	rjmp	.-280    	; 0x2050 <read_eeprom+0x1e>
	{
		EEPROM_readByte(0x0211 + j, &arr[j]);
		_delay_ms(100);
	}
}
    2168:	62 96       	adiw	r28, 0x12	; 18
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <PWM_Timer0_Start>:
 */
#include<avr/io.h>
#include"gpio.h"
#include"pwm.h"
//timer init
void PWM_Timer0_Start(uint8 set_duty_cycle){
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	0f 92       	push	r0
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    2186:	e2 e5       	ldi	r30, 0x52	; 82
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	10 82       	st	Z, r1
	OCR0  = set_duty_cycle;
    218c:	ec e5       	ldi	r30, 0x5C	; 92
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	80 83       	st	Z, r24
	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,LOGIC_HIGH);//set PB3/OC0 as output pin
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	63 e0       	ldi	r22, 0x03	; 3
    2198:	41 e0       	ldi	r20, 0x01	; 1
    219a:	0e 94 c0 06 	call	0xd80	; 0xd80 <GPIO_setupPinDirection>
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    219e:	e3 e5       	ldi	r30, 0x53	; 83
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	8a e6       	ldi	r24, 0x6A	; 106
    21a4:	80 83       	st	Z, r24
}
    21a6:	0f 90       	pop	r0
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <__vector_7>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

#if(TIMER1_CTC==1)
ISR(TIMER1_COMPA_vect)
{
    21ae:	1f 92       	push	r1
    21b0:	0f 92       	push	r0
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	0f 92       	push	r0
    21b6:	11 24       	eor	r1, r1
    21b8:	2f 93       	push	r18
    21ba:	3f 93       	push	r19
    21bc:	4f 93       	push	r20
    21be:	5f 93       	push	r21
    21c0:	6f 93       	push	r22
    21c2:	7f 93       	push	r23
    21c4:	8f 93       	push	r24
    21c6:	9f 93       	push	r25
    21c8:	af 93       	push	r26
    21ca:	bf 93       	push	r27
    21cc:	ef 93       	push	r30
    21ce:	ff 93       	push	r31
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    21d8:	80 91 78 00 	lds	r24, 0x0078
    21dc:	90 91 79 00 	lds	r25, 0x0079
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	29 f0       	breq	.+10     	; 0x21ee <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    21e4:	e0 91 78 00 	lds	r30, 0x0078
    21e8:	f0 91 79 00 	lds	r31, 0x0079
    21ec:	09 95       	icall
	}
}
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	ff 91       	pop	r31
    21f4:	ef 91       	pop	r30
    21f6:	bf 91       	pop	r27
    21f8:	af 91       	pop	r26
    21fa:	9f 91       	pop	r25
    21fc:	8f 91       	pop	r24
    21fe:	7f 91       	pop	r23
    2200:	6f 91       	pop	r22
    2202:	5f 91       	pop	r21
    2204:	4f 91       	pop	r20
    2206:	3f 91       	pop	r19
    2208:	2f 91       	pop	r18
    220a:	0f 90       	pop	r0
    220c:	0f be       	out	0x3f, r0	; 63
    220e:	0f 90       	pop	r0
    2210:	1f 90       	pop	r1
    2212:	18 95       	reti

00002214 <Timer1_init>:
 *Description
⮚ Function to initialize the Timer driver
Inputs: pointer to the configuration structure with type
Timer1_ConfigType
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	00 d0       	rcall	.+0      	; 0x221a <Timer1_init+0x6>
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	9a 83       	std	Y+2, r25	; 0x02
    2220:	89 83       	std	Y+1, r24	; 0x01

	/*FOC1A/FOC1B bits are only active when the WGM13:0 bits specifies a non-PWM mode
	 */
	SET_BIT(TCCR1A,FOC1A); /* for non-PWM mode */
    2222:	af e4       	ldi	r26, 0x4F	; 79
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	ef e4       	ldi	r30, 0x4F	; 79
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	88 60       	ori	r24, 0x08	; 8
    222e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
    2230:	af e4       	ldi	r26, 0x4F	; 79
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	ef e4       	ldi	r30, 0x4F	; 79
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	84 60       	ori	r24, 0x04	; 4
    223c:	8c 93       	st	X, r24
 * TCNT1 take the initial value
 * OCR1A and OCR1B IS THE COMPARE VALUE IN THE COMAPRE REGISTER
 * For TIMSK We have 2 compare match interrupt and 1 for the overflow
 */

	TCCR1B=(Config_Ptr->prescaler);
    223e:	ae e4       	ldi	r26, 0x4E	; 78
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e9 81       	ldd	r30, Y+1	; 0x01
    2244:	fa 81       	ldd	r31, Y+2	; 0x02
    2246:	84 81       	ldd	r24, Z+4	; 0x04
    2248:	8c 93       	st	X, r24
	TCNT1=(Config_Ptr->initial_value);
    224a:	ac e4       	ldi	r26, 0x4C	; 76
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	e9 81       	ldd	r30, Y+1	; 0x01
    2250:	fa 81       	ldd	r31, Y+2	; 0x02
    2252:	80 81       	ld	r24, Z
    2254:	91 81       	ldd	r25, Z+1	; 0x01
    2256:	11 96       	adiw	r26, 0x01	; 1
    2258:	9c 93       	st	X, r25
    225a:	8e 93       	st	-X, r24

	if( (Config_Ptr -> mode) == NORMAL )
    225c:	e9 81       	ldd	r30, Y+1	; 0x01
    225e:	fa 81       	ldd	r31, Y+2	; 0x02
    2260:	85 81       	ldd	r24, Z+5	; 0x05
    2262:	88 23       	and	r24, r24
    2264:	79 f4       	brne	.+30     	; 0x2284 <Timer1_init+0x70>
	{
		/* Enable interrupts for overflow mode */
		SET_BIT(TIMSK,TOIE1);
    2266:	a9 e5       	ldi	r26, 0x59	; 89
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e9 e5       	ldi	r30, 0x59	; 89
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	84 60       	ori	r24, 0x04	; 4
    2272:	8c 93       	st	X, r24
		/* Enable overflow flag */
		SET_BIT(TIFR,TOV1);
    2274:	a8 e5       	ldi	r26, 0x58	; 88
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e8 e5       	ldi	r30, 0x58	; 88
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	84 60       	ori	r24, 0x04	; 4
    2280:	8c 93       	st	X, r24
    2282:	23 c0       	rjmp	.+70     	; 0x22ca <Timer1_init+0xb6>
	}
	else if ( (Config_Ptr -> mode) == COMPARE )
    2284:	e9 81       	ldd	r30, Y+1	; 0x01
    2286:	fa 81       	ldd	r31, Y+2	; 0x02
    2288:	85 81       	ldd	r24, Z+5	; 0x05
    228a:	81 30       	cpi	r24, 0x01	; 1
    228c:	f1 f4       	brne	.+60     	; 0x22ca <Timer1_init+0xb6>
	{
		SET_BIT(TCCR1B,WGM12);
    228e:	ae e4       	ldi	r26, 0x4E	; 78
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	ee e4       	ldi	r30, 0x4E	; 78
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	88 60       	ori	r24, 0x08	; 8
    229a:	8c 93       	st	X, r24
		OCR1A = Config_Ptr ->compare_value;
    229c:	aa e4       	ldi	r26, 0x4A	; 74
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	e9 81       	ldd	r30, Y+1	; 0x01
    22a2:	fa 81       	ldd	r31, Y+2	; 0x02
    22a4:	82 81       	ldd	r24, Z+2	; 0x02
    22a6:	93 81       	ldd	r25, Z+3	; 0x03
    22a8:	11 96       	adiw	r26, 0x01	; 1
    22aa:	9c 93       	st	X, r25
    22ac:	8e 93       	st	-X, r24
		SET_BIT(TIMSK,OCIE1A); /* enable interrupts for CTC mode */
    22ae:	a9 e5       	ldi	r26, 0x59	; 89
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	e9 e5       	ldi	r30, 0x59	; 89
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	80 61       	ori	r24, 0x10	; 16
    22ba:	8c 93       	st	X, r24
		SET_BIT(TIFR,OCF1A); /* enable CTC flag */
    22bc:	a8 e5       	ldi	r26, 0x58	; 88
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	e8 e5       	ldi	r30, 0x58	; 88
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	80 61       	ori	r24, 0x10	; 16
    22c8:	8c 93       	st	X, r24
	}
	/*
	 * don't forget the global interrupt*/


}
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	cf 91       	pop	r28
    22d0:	df 91       	pop	r29
    22d2:	08 95       	ret

000022d4 <Timer1_deInit>:
/*Timer1_deInit
 * ● Description
⮚ Function to disable the Timer1.
 */
void Timer1_deInit(void){
    22d4:	df 93       	push	r29
    22d6:	cf 93       	push	r28
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
	/*
	 * To stop the TIMER
	 */
	TCCR1B&=~(1<<CS12)&~(1<<CS10)&~(1<<CS11);
    22dc:	ae e4       	ldi	r26, 0x4E	; 78
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	ee e4       	ldi	r30, 0x4E	; 78
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	88 7f       	andi	r24, 0xF8	; 248
    22e8:	8c 93       	st	X, r24
}
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <Timer1_setCallBack>:
/*Timer1_setCallBack
 *Description
⮚ Function to set the Call Back function address.
Inputs: pointer to Call Back function.
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	00 d0       	rcall	.+0      	; 0x22f6 <Timer1_setCallBack+0x6>
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
    22fa:	9a 83       	std	Y+2, r25	; 0x02
    22fc:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
		g_callBackPtr = a_ptr;
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	9a 81       	ldd	r25, Y+2	; 0x02
    2302:	90 93 79 00 	sts	0x0079, r25
    2306:	80 93 78 00 	sts	0x0078, r24
}
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	00 d0       	rcall	.+0      	; 0x231a <TWI_init+0x6>
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	9a 83       	std	Y+2, r25	; 0x02
    2320:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWSR = 0x00;
    2322:	e1 e2       	ldi	r30, 0x21	; 33
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	10 82       	st	Z, r1
	TWBR = Config_Ptr->bit_rate;
    2328:	a0 e2       	ldi	r26, 0x20	; 32
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	e9 81       	ldd	r30, Y+1	; 0x01
    232e:	fa 81       	ldd	r31, Y+2	; 0x02
    2330:	81 81       	ldd	r24, Z+1	; 0x01
    2332:	8c 93       	st	X, r24

	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    //TWAR = 0b00000010; // my address = 0x01 :)
    TWAR=(TWAR&0x01)|((Config_Ptr->address)<<1);
    2334:	a2 e2       	ldi	r26, 0x22	; 34
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e2 e2       	ldi	r30, 0x22	; 34
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	28 2f       	mov	r18, r24
    2340:	21 70       	andi	r18, 0x01	; 1
    2342:	e9 81       	ldd	r30, Y+1	; 0x01
    2344:	fa 81       	ldd	r31, Y+2	; 0x02
    2346:	80 81       	ld	r24, Z
    2348:	88 2f       	mov	r24, r24
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	88 0f       	add	r24, r24
    234e:	99 1f       	adc	r25, r25
    2350:	82 2b       	or	r24, r18
    2352:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2354:	e6 e5       	ldi	r30, 0x56	; 86
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	84 e0       	ldi	r24, 0x04	; 4
    235a:	80 83       	st	Z, r24
}
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	cf 91       	pop	r28
    2362:	df 91       	pop	r29
    2364:	08 95       	ret

00002366 <TWI_start>:

void TWI_start(void)
{
    2366:	df 93       	push	r29
    2368:	cf 93       	push	r28
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    236e:	e6 e5       	ldi	r30, 0x56	; 86
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	84 ea       	ldi	r24, 0xA4	; 164
    2374:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2376:	e6 e5       	ldi	r30, 0x56	; 86
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	80 81       	ld	r24, Z
    237c:	88 23       	and	r24, r24
    237e:	dc f7       	brge	.-10     	; 0x2376 <TWI_start+0x10>
}
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <TWI_stop>:

void TWI_stop(void)
{
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    238e:	e6 e5       	ldi	r30, 0x56	; 86
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	84 e9       	ldi	r24, 0x94	; 148
    2394:	80 83       	st	Z, r24
}
    2396:	cf 91       	pop	r28
    2398:	df 91       	pop	r29
    239a:	08 95       	ret

0000239c <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	0f 92       	push	r0
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    23a8:	e3 e2       	ldi	r30, 0x23	; 35
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    23b0:	e6 e5       	ldi	r30, 0x56	; 86
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	84 e8       	ldi	r24, 0x84	; 132
    23b6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    23b8:	e6 e5       	ldi	r30, 0x56	; 86
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	88 23       	and	r24, r24
    23c0:	dc f7       	brge	.-10     	; 0x23b8 <TWI_writeByte+0x1c>
}
    23c2:	0f 90       	pop	r0
    23c4:	cf 91       	pop	r28
    23c6:	df 91       	pop	r29
    23c8:	08 95       	ret

000023ca <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    23ca:	df 93       	push	r29
    23cc:	cf 93       	push	r28
    23ce:	cd b7       	in	r28, 0x3d	; 61
    23d0:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    23d2:	e6 e5       	ldi	r30, 0x56	; 86
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	84 ec       	ldi	r24, 0xC4	; 196
    23d8:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    23da:	e6 e5       	ldi	r30, 0x56	; 86
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	88 23       	and	r24, r24
    23e2:	dc f7       	brge	.-10     	; 0x23da <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    23e4:	e3 e2       	ldi	r30, 0x23	; 35
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
}
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    23f8:	e6 e5       	ldi	r30, 0x56	; 86
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	84 e8       	ldi	r24, 0x84	; 132
    23fe:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2400:	e6 e5       	ldi	r30, 0x56	; 86
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	88 23       	and	r24, r24
    2408:	dc f7       	brge	.-10     	; 0x2400 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    240a:	e3 e2       	ldi	r30, 0x23	; 35
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
}
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	0f 92       	push	r0
    241c:	cd b7       	in	r28, 0x3d	; 61
    241e:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2420:	e1 e2       	ldi	r30, 0x21	; 33
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	88 7f       	andi	r24, 0xF8	; 248
    2428:	89 83       	std	Y+1, r24	; 0x01
    return status;
    242a:	89 81       	ldd	r24, Y+1	; 0x01
}
    242c:	0f 90       	pop	r0
    242e:	cf 91       	pop	r28
    2430:	df 91       	pop	r29
    2432:	08 95       	ret

00002434 <UART_init>:
#include "uart.h"
#include "gpio.h"
#include<avr/io.h>
#include"common_macros.h"

void UART_init(const UART_ConfigType *Config_Ptr){
    2434:	df 93       	push	r29
    2436:	cf 93       	push	r28
    2438:	00 d0       	rcall	.+0      	; 0x243a <UART_init+0x6>
    243a:	00 d0       	rcall	.+0      	; 0x243c <UART_init+0x8>
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
    2440:	9c 83       	std	Y+4, r25	; 0x04
    2442:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2444:	1a 82       	std	Y+2, r1	; 0x02
    2446:	19 82       	std	Y+1, r1	; 0x01
	UCSRA|=(1<<U2X);//for the double trasmission speed
    2448:	ab e2       	ldi	r26, 0x2B	; 43
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	eb e2       	ldi	r30, 0x2B	; 43
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	82 60       	ori	r24, 0x02	; 2
    2454:	8c 93       	st	X, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2456:	ea e2       	ldi	r30, 0x2A	; 42
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	88 e1       	ldi	r24, 0x18	; 24
    245c:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC |= (1<<URSEL) ;
    245e:	a0 e4       	ldi	r26, 0x40	; 64
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	e0 e4       	ldi	r30, 0x40	; 64
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	80 68       	ori	r24, 0x80	; 128
    246a:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xCF)|((Config_Ptr->parity)<<4);
    246c:	a0 e4       	ldi	r26, 0x40	; 64
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	e0 e4       	ldi	r30, 0x40	; 64
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	28 2f       	mov	r18, r24
    2478:	2f 7c       	andi	r18, 0xCF	; 207
    247a:	eb 81       	ldd	r30, Y+3	; 0x03
    247c:	fc 81       	ldd	r31, Y+4	; 0x04
    247e:	81 81       	ldd	r24, Z+1	; 0x01
    2480:	88 2f       	mov	r24, r24
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	82 95       	swap	r24
    2486:	92 95       	swap	r25
    2488:	90 7f       	andi	r25, 0xF0	; 240
    248a:	98 27       	eor	r25, r24
    248c:	80 7f       	andi	r24, 0xF0	; 240
    248e:	98 27       	eor	r25, r24
    2490:	82 2b       	or	r24, r18
    2492:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xF9)|((Config_Ptr->bit_data)<<1);
    2494:	a0 e4       	ldi	r26, 0x40	; 64
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	e0 e4       	ldi	r30, 0x40	; 64
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	28 2f       	mov	r18, r24
    24a0:	29 7f       	andi	r18, 0xF9	; 249
    24a2:	eb 81       	ldd	r30, Y+3	; 0x03
    24a4:	fc 81       	ldd	r31, Y+4	; 0x04
    24a6:	80 81       	ld	r24, Z
    24a8:	88 2f       	mov	r24, r24
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	88 0f       	add	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	82 2b       	or	r24, r18
    24b2:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xF7)|((Config_Ptr->stop_bit)<<3);
    24b4:	a0 e4       	ldi	r26, 0x40	; 64
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	e0 e4       	ldi	r30, 0x40	; 64
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	80 81       	ld	r24, Z
    24be:	28 2f       	mov	r18, r24
    24c0:	27 7f       	andi	r18, 0xF7	; 247
    24c2:	eb 81       	ldd	r30, Y+3	; 0x03
    24c4:	fc 81       	ldd	r31, Y+4	; 0x04
    24c6:	82 81       	ldd	r24, Z+2	; 0x02
    24c8:	88 2f       	mov	r24, r24
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	88 0f       	add	r24, r24
    24d2:	99 1f       	adc	r25, r25
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	82 2b       	or	r24, r18
    24da:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    24dc:	eb 81       	ldd	r30, Y+3	; 0x03
    24de:	fc 81       	ldd	r31, Y+4	; 0x04
    24e0:	83 81       	ldd	r24, Z+3	; 0x03
    24e2:	94 81       	ldd	r25, Z+4	; 0x04
    24e4:	a5 81       	ldd	r26, Z+5	; 0x05
    24e6:	b6 81       	ldd	r27, Z+6	; 0x06
    24e8:	88 0f       	add	r24, r24
    24ea:	99 1f       	adc	r25, r25
    24ec:	aa 1f       	adc	r26, r26
    24ee:	bb 1f       	adc	r27, r27
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	aa 1f       	adc	r26, r26
    24f6:	bb 1f       	adc	r27, r27
    24f8:	88 0f       	add	r24, r24
    24fa:	99 1f       	adc	r25, r25
    24fc:	aa 1f       	adc	r26, r26
    24fe:	bb 1f       	adc	r27, r27
    2500:	9c 01       	movw	r18, r24
    2502:	ad 01       	movw	r20, r26
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	92 e1       	ldi	r25, 0x12	; 18
    2508:	aa e7       	ldi	r26, 0x7A	; 122
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	bc 01       	movw	r22, r24
    250e:	cd 01       	movw	r24, r26
    2510:	0e 94 26 13 	call	0x264c	; 0x264c <__udivmodsi4>
    2514:	da 01       	movw	r26, r20
    2516:	c9 01       	movw	r24, r18
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	9a 83       	std	Y+2, r25	; 0x02
    251c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    251e:	e0 e4       	ldi	r30, 0x40	; 64
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	9a 81       	ldd	r25, Y+2	; 0x02
    2526:	89 2f       	mov	r24, r25
    2528:	99 27       	eor	r25, r25
    252a:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    252c:	e9 e2       	ldi	r30, 0x29	; 41
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	89 81       	ldd	r24, Y+1	; 0x01
    2532:	80 83       	st	Z, r24

}
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	0f 90       	pop	r0
    253a:	0f 90       	pop	r0
    253c:	cf 91       	pop	r28
    253e:	df 91       	pop	r29
    2540:	08 95       	ret

00002542 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data){
    2542:	df 93       	push	r29
    2544:	cf 93       	push	r28
    2546:	0f 92       	push	r0
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
    254c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    254e:	eb e2       	ldi	r30, 0x2B	; 43
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	88 2f       	mov	r24, r24
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	80 72       	andi	r24, 0x20	; 32
    255a:	90 70       	andi	r25, 0x00	; 0
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	b9 f3       	breq	.-18     	; 0x254e <UART_sendByte+0xc>
	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR=data;
    2560:	ec e2       	ldi	r30, 0x2C	; 44
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	80 83       	st	Z, r24
}
    2568:	0f 90       	pop	r0
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	08 95       	ret

00002570 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void){
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
	/*
	 *RXC the flag is set then the byte is recieved
	 */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2578:	eb e2       	ldi	r30, 0x2B	; 43
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	80 81       	ld	r24, Z
    257e:	88 23       	and	r24, r24
    2580:	dc f7       	brge	.-10     	; 0x2578 <UART_recieveByte+0x8>
	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    2582:	ec e2       	ldi	r30, 0x2C	; 44
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
}
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret

0000258e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str){
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	00 d0       	rcall	.+0      	; 0x2594 <UART_sendString+0x6>
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    2598:	9a 83       	std	Y+2, r25	; 0x02
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	0a c0       	rjmp	.+20     	; 0x25b2 <UART_sendString+0x24>
	while(*Str != '\0')
	{
		UART_sendByte(*Str);
    259e:	e9 81       	ldd	r30, Y+1	; 0x01
    25a0:	fa 81       	ldd	r31, Y+2	; 0x02
    25a2:	80 81       	ld	r24, Z
    25a4:	0e 94 a1 12 	call	0x2542	; 0x2542 <UART_sendByte>
		Str++;
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	9a 81       	ldd	r25, Y+2	; 0x02
    25ac:	01 96       	adiw	r24, 0x01	; 1
    25ae:	9a 83       	std	Y+2, r25	; 0x02
    25b0:	89 83       	std	Y+1, r24	; 0x01
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str){
	while(*Str != '\0')
    25b2:	e9 81       	ldd	r30, Y+1	; 0x01
    25b4:	fa 81       	ldd	r31, Y+2	; 0x02
    25b6:	80 81       	ld	r24, Z
    25b8:	88 23       	and	r24, r24
    25ba:	89 f7       	brne	.-30     	; 0x259e <UART_sendString+0x10>
	{
		UART_sendByte(*Str);
		Str++;
	}
}
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	08 95       	ret

000025c6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str){
    25c6:	0f 93       	push	r16
    25c8:	1f 93       	push	r17
    25ca:	df 93       	push	r29
    25cc:	cf 93       	push	r28
    25ce:	00 d0       	rcall	.+0      	; 0x25d0 <UART_receiveString+0xa>
    25d0:	0f 92       	push	r0
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	9b 83       	std	Y+3, r25	; 0x03
    25d8:	8a 83       	std	Y+2, r24	; 0x02
	// Receive until #
	uint8 i=0;
    25da:	19 82       	std	Y+1, r1	; 0x01
	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	28 2f       	mov	r18, r24
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	8a 81       	ldd	r24, Y+2	; 0x02
    25e4:	9b 81       	ldd	r25, Y+3	; 0x03
    25e6:	8c 01       	movw	r16, r24
    25e8:	02 0f       	add	r16, r18
    25ea:	13 1f       	adc	r17, r19
    25ec:	0e 94 b8 12 	call	0x2570	; 0x2570 <UART_recieveByte>
    25f0:	f8 01       	movw	r30, r16
    25f2:	80 83       	st	Z, r24
    25f4:	0f c0       	rjmp	.+30     	; 0x2614 <UART_receiveString+0x4e>
	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    25f6:	89 81       	ldd	r24, Y+1	; 0x01
    25f8:	8f 5f       	subi	r24, 0xFF	; 255
    25fa:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	28 2f       	mov	r18, r24
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	8a 81       	ldd	r24, Y+2	; 0x02
    2604:	9b 81       	ldd	r25, Y+3	; 0x03
    2606:	8c 01       	movw	r16, r24
    2608:	02 0f       	add	r16, r18
    260a:	13 1f       	adc	r17, r19
    260c:	0e 94 b8 12 	call	0x2570	; 0x2570 <UART_recieveByte>
    2610:	f8 01       	movw	r30, r16
    2612:	80 83       	st	Z, r24
	// Receive until #
	uint8 i=0;
	/* Receive the first byte */
	Str[i] = UART_recieveByte();
	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	28 2f       	mov	r18, r24
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	8a 81       	ldd	r24, Y+2	; 0x02
    261c:	9b 81       	ldd	r25, Y+3	; 0x03
    261e:	fc 01       	movw	r30, r24
    2620:	e2 0f       	add	r30, r18
    2622:	f3 1f       	adc	r31, r19
    2624:	80 81       	ld	r24, Z
    2626:	83 32       	cpi	r24, 0x23	; 35
    2628:	31 f7       	brne	.-52     	; 0x25f6 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
    2632:	9b 81       	ldd	r25, Y+3	; 0x03
    2634:	fc 01       	movw	r30, r24
    2636:	e2 0f       	add	r30, r18
    2638:	f3 1f       	adc	r31, r19
    263a:	10 82       	st	Z, r1
}
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	cf 91       	pop	r28
    2644:	df 91       	pop	r29
    2646:	1f 91       	pop	r17
    2648:	0f 91       	pop	r16
    264a:	08 95       	ret

0000264c <__udivmodsi4>:
    264c:	a1 e2       	ldi	r26, 0x21	; 33
    264e:	1a 2e       	mov	r1, r26
    2650:	aa 1b       	sub	r26, r26
    2652:	bb 1b       	sub	r27, r27
    2654:	fd 01       	movw	r30, r26
    2656:	0d c0       	rjmp	.+26     	; 0x2672 <__udivmodsi4_ep>

00002658 <__udivmodsi4_loop>:
    2658:	aa 1f       	adc	r26, r26
    265a:	bb 1f       	adc	r27, r27
    265c:	ee 1f       	adc	r30, r30
    265e:	ff 1f       	adc	r31, r31
    2660:	a2 17       	cp	r26, r18
    2662:	b3 07       	cpc	r27, r19
    2664:	e4 07       	cpc	r30, r20
    2666:	f5 07       	cpc	r31, r21
    2668:	20 f0       	brcs	.+8      	; 0x2672 <__udivmodsi4_ep>
    266a:	a2 1b       	sub	r26, r18
    266c:	b3 0b       	sbc	r27, r19
    266e:	e4 0b       	sbc	r30, r20
    2670:	f5 0b       	sbc	r31, r21

00002672 <__udivmodsi4_ep>:
    2672:	66 1f       	adc	r22, r22
    2674:	77 1f       	adc	r23, r23
    2676:	88 1f       	adc	r24, r24
    2678:	99 1f       	adc	r25, r25
    267a:	1a 94       	dec	r1
    267c:	69 f7       	brne	.-38     	; 0x2658 <__udivmodsi4_loop>
    267e:	60 95       	com	r22
    2680:	70 95       	com	r23
    2682:	80 95       	com	r24
    2684:	90 95       	com	r25
    2686:	9b 01       	movw	r18, r22
    2688:	ac 01       	movw	r20, r24
    268a:	bd 01       	movw	r22, r26
    268c:	cf 01       	movw	r24, r30
    268e:	08 95       	ret

00002690 <__prologue_saves__>:
    2690:	2f 92       	push	r2
    2692:	3f 92       	push	r3
    2694:	4f 92       	push	r4
    2696:	5f 92       	push	r5
    2698:	6f 92       	push	r6
    269a:	7f 92       	push	r7
    269c:	8f 92       	push	r8
    269e:	9f 92       	push	r9
    26a0:	af 92       	push	r10
    26a2:	bf 92       	push	r11
    26a4:	cf 92       	push	r12
    26a6:	df 92       	push	r13
    26a8:	ef 92       	push	r14
    26aa:	ff 92       	push	r15
    26ac:	0f 93       	push	r16
    26ae:	1f 93       	push	r17
    26b0:	cf 93       	push	r28
    26b2:	df 93       	push	r29
    26b4:	cd b7       	in	r28, 0x3d	; 61
    26b6:	de b7       	in	r29, 0x3e	; 62
    26b8:	ca 1b       	sub	r28, r26
    26ba:	db 0b       	sbc	r29, r27
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	09 94       	ijmp

000026c8 <__epilogue_restores__>:
    26c8:	2a 88       	ldd	r2, Y+18	; 0x12
    26ca:	39 88       	ldd	r3, Y+17	; 0x11
    26cc:	48 88       	ldd	r4, Y+16	; 0x10
    26ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    26d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    26d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    26d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    26d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    26d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    26da:	b9 84       	ldd	r11, Y+9	; 0x09
    26dc:	c8 84       	ldd	r12, Y+8	; 0x08
    26de:	df 80       	ldd	r13, Y+7	; 0x07
    26e0:	ee 80       	ldd	r14, Y+6	; 0x06
    26e2:	fd 80       	ldd	r15, Y+5	; 0x05
    26e4:	0c 81       	ldd	r16, Y+4	; 0x04
    26e6:	1b 81       	ldd	r17, Y+3	; 0x03
    26e8:	aa 81       	ldd	r26, Y+2	; 0x02
    26ea:	b9 81       	ldd	r27, Y+1	; 0x01
    26ec:	ce 0f       	add	r28, r30
    26ee:	d1 1d       	adc	r29, r1
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	ed 01       	movw	r28, r26
    26fc:	08 95       	ret

000026fe <_exit>:
    26fe:	f8 94       	cli

00002700 <__stop_program>:
    2700:	ff cf       	rjmp	.-2      	; 0x2700 <__stop_program>
